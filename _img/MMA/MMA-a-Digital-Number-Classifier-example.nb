(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    651459,      12408]
NotebookOptionsPosition[    644388,      12290]
NotebookOutlinePosition[    644785,      12306]
CellTagsIndexPosition[    644742,      12303]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Remove", "[", "\"\<Global`*\>\"", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Remove", " ", "other", " ", "names"}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.885079337402018*^9, 3.88507936442282*^9}, {
  3.885086915628722*^9, 
  3.885086928748098*^9}},ExpressionUUID->"2e840917-01ed-4b3b-af4b-\
19143a1a9ef8"],

Cell[CellGroupData[{

Cell["An Example of Training a Digit Classifier", "Title",
 CellChangeTimes->{{3.88507954240138*^9, 
  3.885079556536818*^9}},ExpressionUUID->"1b310400-6b59-4d31-acc5-\
7cacb94c30a5"],

Cell["\:4e00\:4e2a\:7b80\:5355\:7684\:624b\:5199\:6570\:5b57\:8bc6\:522b\:7f51\
\:7edc LeNet \:7684\:7b14\:8bb0", "Subtitle",
 CellChangeTimes->{{3.885079663537106*^9, 
  3.885079679127542*^9}},ExpressionUUID->"f8d7aa66-f265-4e63-8683-\
cfb131a39ba4"],

Cell["author: \:51c9\:51c9", "Author",
 CellChangeTimes->{{3.885079566569372*^9, 
  3.885079573145928*^9}},ExpressionUUID->"1f6666b4-ea34-4f90-9980-\
483e5705c143"],

Cell[TextData[{
 "\:53c2\:8003 Wolfram U \:4e2d\:7684\:8bfe\:7a0b ",
 Cell[BoxData[
  TemplateBox[{
   "\"Introduction to Neural Networks\"", 
    "https://www.wolfram.com/wolfram-u/courses/machine-learning/introduction-\
neural-networks-ml010/"},
   "HyperlinkURL"]],
  CellChangeTimes->{3.885079603728463*^9},ExpressionUUID->
  "4ee280a5-a9da-4db2-b8dd-10316d971368"],
 ", \:5176\:4e2d\:7684\:8bad\:7ec3\:624b\:5199\:6570\:5b57\:8bc6\:522b\:7684\
\:4f8b\:5b50\:505a\:7684\:7b14\:8bb0. \:5176\:4e2d\:5173\:4e8e LeNet \:7f51\
\:7edc\:7684\:89e3\:91ca\:4e3b\:8981\:6765\:6e90\:4e8e ",
 Cell[BoxData[
  TemplateBox[{
   "\"\:52a8\:624b\:6df1\:5ea6\:5b66\:4e60: LeNet\"", 
    "https://zh.d2l.ai/chapter_convolutional-neural-networks/lenet.html"},
   "HyperlinkURL"]],
  CellChangeTimes->{3.8850800088212214`*^9},ExpressionUUID->
  "956ecd5c-fb62-4b54-a011-f7fcf18f2d74"],
 ". \:4f46\:662f\:6ca1\:6709\:5bf9\:7f51\:7edc\:7684\:89e3\:91ca, \
\:53ea\:662f\:673a\:68b0\:5730\:4f7f\:7528, \:7c7b\:4f3c\:4e8e\:8fc7\:4e00\
\:904d\:5982\:4f55\:4f7f\:7528 MMA \:6765\:64cd\:4f5c\:795e\:7ecf\:7f51\:7edc\
\:7684\:4e00\:4e2a\:4f8b\:5b50. "
}], "Abstract",
 CellChangeTimes->{{3.8850795800012503`*^9, 3.885079638611455*^9}, {
  3.885079950049238*^9, 3.885079973571968*^9}, {3.885080012434083*^9, 
  3.885080013455812*^9}, {3.8850802774438763`*^9, 
  3.885080327646648*^9}},ExpressionUUID->"a9782164-594f-4fa1-8e3a-\
0ca1da16ee14"],

Cell[CellGroupData[{

Cell["\:6570\:636e\:4e0b\:8f7d", "Section",
 CellChangeTimes->{{3.885079645766941*^9, 
  3.885079657941689*^9}},ExpressionUUID->"01a0b32f-7b71-4d27-97ae-\
7225847e2f7b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"\"\<MNIST\>\"", ",", "\"\<TrainingData\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"ResourceData", "[", 
    RowBox[{"\"\<MNIST\>\"", ",", "\"\<TestData\>\""}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.885079371805462*^9, 3.885079405723566*^9}, {
  3.885079443043235*^9, 3.885079443200417*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"4709cd33-465c-40ce-862d-85d689cb797f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"trainingData", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.885079427449525*^9, 3.8850794542150993`*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"7f8046c1-7776-49ef-b7fc-d1c367f14fba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x/04N6iw+hCfz/9ANP3ORhD0eWe8qu4u09oTZZhVF2HLvcphhEMeFOf
oMn82e+WNn1D/YEDB56hySyxMmHkX4HdaWdFGRmlzHLr9mFK/SmFWMXo/QtD
7hJQmC3IUkuEsR9D7ltC2dXbQPqGLtcSFIl/60/B2RGMMShyu0XPwphfzBjz
UOQsUuHMddwi71DllN5AWfMlGNP+oMjNYswCS+6JZmEMeoMi9f9vPCOPf0qK
HQsjbz+aFNChtaIgf6tOeI7hOZC/Fi9e/PQ3NpnBAQB9Gb33
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "5"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/6clOMKQ+QWH1C3eeIXlOORS+T8tbsUhZ9H8//9rCPPHR3S57VDGEy8D
sUuo1jFC5F418bF7mWqguOoWE1judT5f8bv/v4RuY5GbzjMVRImgyN1l2wAk
/7p6/ceU+28RCyTOMHVhkzN3AhITGReDOcJo+piAxCSmJSD2VS5UuVSmj3C5
GMNfKHI7QcKTmE6D2IzLUKT+v2Hy+vE/CGTwjxTGt6hy/5MZKoFu+f//iwdj
8g80uR+ebEkOTCe22rHN/I8Bviw35mJiZFJahSkFAuf8OcSWvHmDXfL/Ni8m
Jqa5OCQHEgAAjVTDsg==
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "6"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x964Ed9hrCQsMYeLFI3tZmY1M38o8XOYcpt51Yp/AKkZVqxaLwDkvn/
TQKbHATMYlqDS+q2Itt9HFJ/HJiqcGkLY/L+ji72em6kL6NLpDWD9090qRY+
JghgDHuEJpXLLFhwZIIIk1RNrL4iWrgwMtkUq7Mz5V7///+7k8CUb8hydkDT
uKzWgMVehTLJT3yKkPtYX9t3G8b5ViXCJNL7BYdHntZKM+Xg8uX/XwvrccoN
PgAA7GfJyA==
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "2"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+04MTJ//9v2TPwzcKUimNi0tUVYGRiFPyMLtUlxsTECEKMjJNQJH7e
T2NmhAGdN8hSayxB6oGa3PM0mNw3IUtN4GMCAl4FxVm//39+/hfFxCigFiaH
y1gdHw2Se43dY/UgF1h2LFiwDVPubxzIPpBm7paf6JL31ZignmPConWerQnY
b0zcF7BY+uPGjTiQ1q2owttDi3+A7Y3BkHvDw8jYCJbcCTQVVW4CyA2Rt///
vy3LxMR5BkXuLdgVPImpvEAqFtW6PxnwKGCUevMfTfKYnzhESuY6Fh88bghj
YtKufYhFiooAAKRSc/A=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "5"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+C4H6Rw4avOKQymZmZJmGX82WWN2LiX4dNKoPJ9M0BJuZwLFJzmWRv
/vdnYGJ6jCF1U5S57/8bCSZmZky5fGbmZ2s1mKOwyH0yZM44AMRFWOSKmJhm
GDNxPyvCYt9eZqDfgO7Hpu/HbGZmbqDXsMn9//H48bP/OOSgoI6JaSMuuUd4
9O3FI4fPviI89uHVxyz/BpfcBseFuKSIBwAtTr/s
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}]}], "}"}]], "Output",
 CellChangeTimes->{3.885079509191119*^9, 3.885083481231564*^9},
 CellLabel->
  "Out[138]=",ExpressionUUID->"776ca8f0-5839-47ec-8cf2-a235f4a214e2"]
}, Open  ]],

Cell["\:5bf9\:4e8e\:8fd9\:6837\:7684\:6570\:636e, \:901a\:8fc7 NetEncode \
\:548c NetDecode \:6765\:5904\:7406\:7f51\:7edc\:4e2d\:7684\:8f93\:5165\:548c\
\:8f93\:51fa:", "Text",
 CellChangeTimes->{{3.8850804374895782`*^9, 3.88508045995053*^9}, {
  3.885080524591736*^9, 
  3.885080548039836*^9}},ExpressionUUID->"14bdc9aa-b6fe-4a2a-bf91-\
1c7780be0fbe"],

Cell[CellGroupData[{

Cell["\:8f93\:51fa\:662f\:6839\:636e\:8f93\:5165\:56fe\:7247\:5f97\:5230\:7684\
\:4e00\:4e2a\:5206\:7c7b, \:6bcf\:4e2a\:5206\:7c7b\:5bf9\:5e94\:7684\:6570\
\:5b57\:5927\:5c0f\:8303\:56f4\:4e3a 0~9", "Item",
 CellChangeTimes->{{3.885080597515458*^9, 
  3.885080647180002*^9}},ExpressionUUID->"cd62fb3f-e7ce-4e97-82f4-\
99ed11f36880"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dec", "=", 
  RowBox[{"NetDecoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Class\>\"", ",", 
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "9"}], "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.885080549735708*^9, 3.885080561762794*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"26fe37e9-eacc-4414-a6b0-3a37609caffe"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetDecoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Labels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TagBox[
                    TooltipBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", 
                    RowBox[{"\[LeftSkeleton]", "7", "\[RightSkeleton]"}], ",",
                     "9"}], "}"}], 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", 
                    ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}]], 
                    Annotation[#, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, 
                    "Tooltip"]& ], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Input Depth\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["1", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Multilabel\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Dimensions\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["10", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Class\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetDecoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.885080566341741*^9, 3.8850834858747168`*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"2d3ff2d8-1196-4f3b-bedc-147423522ee5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:5c06\:8f93\:5165\:7684\:56fe\:7247\:4ee5\:7070\:5ea6\:5f62\:5f0f\:89c4\
\:8303\:4e3a 28\[Times]28 \:7684\:4e00\:4e2a\:5f20\:91cf", "Item",
 CellChangeTimes->{{3.885080650997686*^9, 
  3.885080701334806*^9}},ExpressionUUID->"a505a10b-ffd5-4ec3-b08d-\
0c558d4c51c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"enc", "=", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Image\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"28", ",", "28"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.885080575793342*^9, 3.885080592778831*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"fca2dbcf-eb6d-4f00-9342-47db85ad20ad"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Image Size\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"28", ",", "28"}], "}"}], Short[#, 3]& ], 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Space\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Grayscale\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Channels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["1", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Interleaving\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Mean Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Variance Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Data Transposed\"", "\":\""}, "RowDefault"],
                   "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Stretch\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Resampling\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Automatic\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Padding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[<|"color" -> GrayLevel[0]|>, 
                   "GrayLevelColorSwatchTemplate"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Alignment\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["Center", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.885080593339695*^9, 3.8850834885282373`*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"13c0522e-41f1-4a69-a3b6-cc089608f4b6"]
}, Open  ]]
}, Open  ]],

Cell["\:4e3a\:4e86\:65b9\:4fbf\:4e4b\:540e\:7684\:8bad\:7ec3, \:5c06\:8f93\
\:5165\:7684\:6570\:636e\:8f6c\:6362\:4e3a Association \:7684\:5f62\:5f0f:", \
"Text",
 CellChangeTimes->{{3.885084374450042*^9, 
  3.885084401504496*^9}},ExpressionUUID->"abe8c1a0-8781-4c25-b5bf-\
e06268d71f2f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "@", "trainingData"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{
       RowBox[{"Values", "@", "trainingData"}], "+", "1"}]}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testAssoc", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "@", "testData"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{
       RowBox[{"Values", "@", "testData"}], "+", "1"}]}]}], "|>"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.885084404550333*^9, 3.885084456499309*^9}, {
  3.885084491200376*^9, 3.885084512161873*^9}, {3.885084558498083*^9, 
  3.885084561443573*^9}},
 CellLabel->
  "In[163]:=",ExpressionUUID->"42d9dc3d-f584-4853-ae84-dd53f50faa80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"trainAssoc", ",", "All", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.885084460593055*^9, 3.885084466564186*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"0de099d2-94f9-4d3a-bf83-765cecf7559a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Input\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9YcCaBKeEsdqnzgszMzEJYpU7KMDELiDEf+4kh8/WwPDMTs+lqZqZW
DLkYoHlMzMzznZgiMJwhyMTk2MskfWEDQzgWZ/h83tL26v9/Jh5Up96MYhLT
Xw1hMzFHIUv98GXm3/HmMUzOBlnuGDPzATgHTc6SyRHBYWCyRpLazMncj+Ax
MWcjya1ilnwGt7qCyfUzipwCXKqGWW7HfxS5PJg3o5iDUDz3fyWTHITRK8gU
iyoF1MeWe/7RKl85JoWI4xhyzMxSGkDCuvY/OnhsAY4CsTwMGSB4Vg+UK7qF
TYp+AABdfKAq
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9osJ+J4QAOqflGLExGE35jlXJiYWFiYXmAIfF+vwI3C4uOFha59V4g
LSwL52PKLWZiYmIA4gXzmZjQ5BYLs/Aoi7Gw8KzF0LceaJzzf6DwpP/ocvP5
mXicr/6fbzzp9//PVqhySixMbUDq9gsQxxFF7rwoExLPAdktl5VYWBA8VDMd
WZDlUN0ClOuDc66Lsqi8QJFbCJdSY5K4gGI5E9QtnwOZmFRuIPtgjzALi4Pj
hO2ODlYsPG0oUv//HxAGBzOQcF74Hx08qQPLSYV/wJACggXaLDoLj2CToRsA
AGmVjzg=
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+04BQDExNTM3Y5byYWIMg7iClzX40PLMc0BVPuFlAYl1wkSG5+Nha5
bUBnMNX+/z+RiWEyhhzIOCA9CYs+U6CU3P//P+uwyGUC5Xb8/9+DzS1AJwa9
/v9fDYucJwOTOohWZWLyRJM6oMTEogGkVwuzsGxCkwO6DiT3JZ6FZT66bSC5
MriDMOXu/K+FOggVAEODaW4mkIhGl4HoAwUzUDMGWASJHvX+X5hy/2cwQcMT
G2hmkduB4USqAwDgHYsG
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9YsI1JZtsrXHIsLCyBWGXeR0oD5Vqxyh1UZgLKsWzAJrdBAiwnvglD
Jo+JiYmBCURMxpDLB2phCp8SxsLk9BpV5skyYRYRjegPP+tYmFjuoEhd0AFa
VQhk3GLBkJvEApX7kg1kRSNLfclkYtB5hsqCgWKgSVPALKCZOhdRjHQEytX/
gsqdQXVlD1DOGejy+5PqWIJmoMqpsbCYPfwPCesdaP6OBIZG1rZMULgUoIcJ
yC2goGRikTyELucIlePVOIEu9f+VE1gO3RkQ8MCciWX+jtfYpOgGANWaiA8=

         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+s4OI0RiBgELiGIXOrU5GRCQx0TqJJfTRnYoLKMXWjyLyPF2YCy3FK
YcjNAasHymnNQZd7ZguSqpkXxrQIQ86QiYlFrOHb/7c3/3wIQZU7wc/EJAZl
P3BFlfMHmtOAZDOaXM037HIdjIziW+C8REbGLoRcJxNTKoKXjKIPj9xFRSS5
H92cTN7fsOvrBjol8D9WuYmcTEz8e1DlBDXOvX79eq8GHxOX2H4kqf9rpaBx
Awxr/in/UYE/Qm4ymtT/6wJQubhjv9HlqAsAfP1nug==
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}]}], "}"}]}], ",", 
   RowBox[{"\<\"Target\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.885084466994334*^9, 3.885084563728277*^9},
 CellLabel->
  "Out[165]=",ExpressionUUID->"94efdaf9-4b3c-493b-8ed8-387c6e657c16"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:7f51\:7edc\:4ecb\:7ecd", "Section",
 CellChangeTimes->{{3.885079696193815*^9, 
  3.8850796981100397`*^9}},ExpressionUUID->"4aa0be44-9e98-4783-8c75-\
3e8a524a892c"],

Cell[TextData[{
 "\:4f7f\:7528\:7684\:662f ",
 Cell[BoxData[
  TemplateBox[{"\"LeNet (Wikipedia)\"", "https://en.wikipedia.org/wiki/LeNet"},
   "HyperlinkURL"]],
  CellChangeTimes->{{3.8850797367872972`*^9, 3.8850797437014103`*^9}},
  ExpressionUUID->"c2725cca-a32c-46d6-96cd-277473e763a7"],
 " \:7684\:7f51\:7edc. \:5177\:4f53\:7f51\:7edc\:6709\:4ec0\:4e48\:7528, \
\:4ee5\:53ca\:600e\:4e48\:6784\:5efa\:8fd9\:6837\:7684\:7f51\:7edc\:6211\:4e0d\
\:6e05\:695a, \:53ef\:4ee5\:53bb\:53c2\:8003\:539f\:59cb\:7684\:8bba\:6587: \
",
 Cell[BoxData[
  TemplateBox[{
   "\"Gradient\.02Based Learning Applied to Do cument Recognition\"", 
    "http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf"},
   "HyperlinkURL"]],
  CellChangeTimes->{3.885083968520727*^9},ExpressionUUID->
  "e4dc434f-08ef-4c74-8341-1df93d849e08"],
 "."
}], "Text",
 CellChangeTimes->{{3.88507970217795*^9, 3.885079703353775*^9}, {
  3.8850797466489573`*^9, 3.885079767454667*^9}, {3.885083915177911*^9, 
  3.8850839393936253`*^9}, {3.885083972420573*^9, 
  3.885083974048327*^9}},ExpressionUUID->"584e59cd-829e-4fcf-8070-\
32c078526eb2"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzs3E9Kw0AUB+CHf8CN0CPUG3TpUsGNO6m4T4uxuKnQCuKq3sAjeASP4BF6
hB5B8QI6QxR1l5LSVvp98AskTCbzlhNectC/6V5tRcR4Lx26vbvj0ah3f95K
JxfD8fVgWF6eDm/LQTk67G+niye7Ee/7ETsBAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAGuikvKQ8pUxWvBYAAACgubOo9vg5
nRWvpYlpVO8sHmO5dUx+5ajhXEXKc1R1TBvOBQAAAAAAAAAAwHrIPW25ty33
hT3UvCeP+/jKW43xuRdwFlUvW3veBc7pu55Z/O++Q4BNVYRvxAEAlq2In31+
zmssb0+dn53/E9RawFzt+FtHsYA56/pk7/51HNfWu0G/l9CBAeMMvkAnOIGz
vgAPmnboZHcwxgdHW8CJDA+wGzBgOGsGBiYa7BqM89IddN9BMZi8C5gLqAIm
mLAb813AmVqW1LW0iqJIivr/PMAP9imRay2xdmuxqPWSeb/1nm19KtpzfQMA
AAAAAAAAAODy1TF8bdjXbPumx/ZPA7cfYvaSX2O55i/vJ+Vu4r72lcbzcAax
/g84V/N4/QxP9eWznvsd4/O1a06pY3P+mSJNz/c+pfXzdk+d+YHfJwCwKd0L
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
fHkv+WbsQLeYxfJex/fxdr3EmPvmH1Iaz8MZxPVyAAAAmui3Fiy/bpDWYOV/
X5bPHWr2GM96XdnjltfrEf2Uz+Lrs1/a50e2z7eefa0tov81k1xZG9FnbVza
Z5+xApyL8jNw0bFtE/3mr0OZxfJ6dF7HXs6Fs55tddXxRWy+1zzPMbzOfK08
1n3HmnyLYXNqxOZ7sJYbAM6HOr79DDl+6TrDItrP69L5UbpH8axlv7z2r+9z
8NqU9xvqq1znsei5z2Nsvr/ZgD4BAAAAAG5Ffi21z5qv/HptvWPbOjavC89G
jjH5EMv70n2O5XXrsm6v7bp3rtmx/dBUA8c/df/HGjcAAADXp4l+f9uX672G
/L2Z1urPBozprmP7Ouun6dlevs+Qv4fnxX59nje0ll+r6LvfmLVxa1VsjvV+
wL4A52IR/a8hN9Fv/jqU/PmxedK4qi37pOvZ31pe37Weehab9drr97zP81fr
rK1ttfNthj4zdq1tLbdaPgA4vfL84lTyaw7Nnm3VE7a1y5jjN1ttW57frZPu
E1Gttr0vXpvvMdZF1s6Q+w3l9614jmHnf+U9h/Y5fwUAAAAAuEblPXjnHdu+
K7atBrRbjxhbGkt5f/9deY7l9ejy3vXNwHamroebuv9jjRsAAIDr00S/v9fL
6wBDahe+xuuarXmPMXWt66qL/vq0NfRZfLkx94+fxeZx6bNP8pDt8xzD17fN
i37vBu4PcEqzeDundGmi3/x1SOsxpPXJXTXo6fM8/4wvr73nP9+mrKe/Hz3q
pfyZenXPfebFGPo8MzZnLTcAnJ99v8Ofwu/FOHatU9iljv7nlPuaYg1EE2/f
//oaRP6/F3uO9SmGH9/y3hVD78OQtnf+BwAAAADQbRGv11HTtdxt11HnsXnN
dtt25Xq5x45tu/S97/9zLK8nd11Dbnq2dah6uLz/xWr/Y0UdHwAAALkmDr9m
L68VWOzZVp211fTYfhH7/S1cFfsveuyTr3Pr+4yj+2yftMZt7DOK8uck7bv2
EeCY8ud89KkRa+Lw89cu6bN61zh/jbdrsMs66z51fBFvP+PT3DHmWntZm99n
zknb5O+jHtHvup1yLTcAcDqnrONL5yTlOeAUf8/WWRvNnmPcZarjV8Xb6xdl
Td9sj/bL+y73aatcnzEf2ffU96MAAAAAALg25T1x6y3bfc22+drRVr5Wb591
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
5vVuzcA+0vcXD7H9/LaO5Xc9Vbx9TuE69z3GOyv2Kb8ryv0ab+vvUh/puP8e
7f/d7JNPO8YOAAAAUGpidW1BHZ+IiNx46gDg3OS1fPOW1/PP8epoo2qX+l+P
JX033+xI/v19KX1/n3/P/BDbv9PP+02ZjRh7k+3fjNh/H+f0O4RL8vPfjjoC
kUlSBcBuPz83zL9yoFTd/wkCABOoYnP+Vcd3OlWc/vxrW+odY38ott9WV9ZW
y3eMPG8Zz+ci5fv42vGe03v5NZY1cU87+l9E+3caVWyv50vj2fbMvEWP97ZW
3h9y36y/70nHpo5l3V75Hg5ZkwkAAABcnyZW1xVOVcf3D//wD3/5z//8TxER
kaPnT3/605DvYwA4jfS97bbvwPPP8epYA9oi9b8eS9Nj+ybbvpTe8128/b74
c8t2eb3fYuigW8aS7r374Yg5p98hXJKf/3ZurY7gz3/+89GuX8l1J8xBwHDm
XzEfAcDlq2Jz/lXHdzpVHL++rW/qjnHPi23vdrzPbdf7D5nFlrE879iv7dly
s559pnq3Ovrda7CK9nq79H1HWy1fXgs539F23XO8f1mNoVmlXuXjanxdtXnv
ijE9bRk3AAAAQJsmVtcV1PGJiMitRR0fwMU7p/WOqf/1WJoe2zfZ9l1tPsfm
+3yI1+/Bv2Q/T98Zj/2eOB/LKVONHD/cop//dtQRiIxLmIOA4cy/Yj4CgMtX
xeb8q47vdFKdVNOR/zs238f/eMn/tWOfqTLvGHe6Dr+uQXuO/tfl363avVv1
ccjn9G0b/9eOfZqOsTdb9nlevZ+qx/tvk8aZH4d6y3azWB7zHz3aXP93VWeZ
r8ZYRb86wz5Svd963ItQxwcAAAD014Q6PhERudGo4wM4G7OR+53TesfU/3os
Ty/5vCNP2fZd0ne/i9h8r+metPfFz9ruk9tXE+3fwR871R7vAW6NOgKRPRPm
IGA486+YjwDg8lWhju+SlM+xuz/tcH5K1+2bmPb87X281prtm201ZfPYrFdM
dX117H7GXXp9Xbe3iOX3EV3Pqxvi3WoMjz22m0/U51QWsaznAwAAABiiCXV8
IiJyo1HHB3AW5rGsS/sWw7/3Paf1jqn/sfVrfaTvgrfdn/frnmNvsrZ+xHHu
Z9yWqb73h1ugjkBkz0Sc1XkEcBnMv2I+AoDLV4U6vkuzfvbdOvOTjuZ2zU49
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
HV/3DLE7vzq+y6njI0nOQR0fsGjGz6+OjzzNyH+GtWn4eQZKMI5nHV+deUNH
wKUb+TqYKs9ZAJaJ9ZfWIwBAj6TI1yMdH0qQIj/mrcfAXMbfcMuxuorl35vv
XFLUvS7evv7mDj/c247NLc+9vue5973WO0c+J03cl4j7O76vTnytN298/cbX
TtiOqexv8xu3/PshXv5clHZzgf0CsC5W0XmtrWtb2/7q+NirOr7+0PF1zxC7
86vju5w6PpLkHNTxAYtm/Pzq+MjTjPxnWJuGn2egBON41vHVmTd0BFy6ka+D
qfKcBWCZWH9pPQIA9EiKfD3S8aEEKfJj3noMzGX8Dfccs57vzfcQKeZzXTzs
bcem4GulM1/rPlK8PMd9NZ63oFPmvMPXuSq1gXfw0Dkf4uXPQ2k35XcLwMpY
Ree1tq5tbfur42Ov6vj6Q8fXPUPszq+O73Lq+EiSc1DHByya8fOr4yNPM/Kf
YW0afp6BEozjWcdXZ97QEXDpRr4OpspzFoBlYv2l9QgA0CMp8vVIx4cSpMiP
eesxMJfxNzxw3K5inffmSzGf6+Jhbzs2BV8rnfla95EiP37vxmlz3jt7z/le
0S28nbmccwA4h1V0Xmvr2ta2vzo+9qqOrz90fN0zxO786vgup46PJDkHdXzA
ohk/vzo+8jQj/xnWpuHnGSjBOJ51fHXmDR0Bl27k62CqPGcBWCbWX1qPAAA9
kiJfj3R8KEGK/Ji3HgNzGX/DkcdvbffmSzGf6+Jhbzs2BV8rnfla9/FGvDxW
Xvjxka9xdfC8N4pvZc4rMZ9zDgDnsIrOa21d29r2V8fHXtXx9YeOr3uG2J1f
Hd/l1PGRJOegjg9YNOPnV8dHnmbkP8PaNPw8AyUYx7OOr868oSPg0o18HUyV
5ywAy8T6S+sRAKBHUuTrkY4PJUiRH/PWY2Au42+YcAyvYj335ksxn+viYW87
NgVfK535WodsO7ivxsv33tv3nfik+9y+/+N7PHyd+x77kNdHbH86eL/XJu4/
AMyFVXRea+va1ra/Oj72qo6vP3R83TPE7vzq+C6njo8kOQd1fMCiGT+/Oj7y
NCP/Gdam4ecZKME4nnV8deYNHQGXbuTrYKo8ZwFYJtZfWo8AAD2SIl+PdHwo
QYr8mLceA3MZf8MJx3IN9+ZLMZ/r4mFvOzYFXyud+Vpbtq3bm3F/u/diuw/H
xuaB55R0OGJf0sFzAGCprKLzWlvXtrb91fGxV3V8/aHj654hdudXx3c5dXwk
yTmo4wMWzfj51fGRpxn5z7A2DT/PQAnG8azjqzNv6Ai4dCNfB1PlOQvAMrH+
0noEAOiRFPl6pONDCVLkx7z1GJjL+BtOPJ5X0fe9+VLM57p42NuOzd4/fxLP
/050ih/tvdZ7E597/cC23edtbI58bgmHO7Zhn+u9x3+8989fb+jVEdsNAIes
ovNaW9e2tv3V8bFXdXz9oePrniF251fHdzl1fCTJOajjAxbN+PnV8ZGnGfnP
sDYNP89ACcbxrOOrM2/oCLh0I18HU+U5C8Aysf7SegQA6JEU+Xqk40MJUuTH
vPUYmMv4G04/pM9Ywr35rm98PNG3I9+ft094jVRo+4e97djc8c9ruP/eL9jc
8rjv3fLPb+N6tw+Hvn/w3Nsec+iHe4//+JZ//+SObbhrX4a9f17zGB9zzAHg
IVbRea2ta1vb/ur42Ks6vv7Q8XXPELvzq+O7nDo+kuQc1PEBi2b8/Or4yNOM
/GdYm4afZ6AE43jW8dWZN3QEXLqRr4Op8pwFYJlYf2k9AgD0SIp8PdLxoQQp
8mPeegzMZfwNpx/SkauY9735hmjzd7qbC2z/5o5/3mp/0u7fbdu96/ik3Xzx
z0+Z497de973jnzO9x7YzmMY9l5jv/trMXZKjyEA62IVndfaura17a+Oj72q
4+sPHV/3DLE7vzq+y6njI0nOQR0fsGjGz6+OjzzNyH+GtWn4eQZKMI5nHV+d
eUNHwKUb+TqYKs9ZAJaJ9ZfWIwBAj6TI1yMdH0qQIj/mrcfAXMbfcPohfYm5
3ptvuGWbari5wPbvv+Zr8XxcT3H/XnePJj736o7tu+3cpsiPxbHsP+/je97z
8P1LfId5L/Jj84LhSPe34cMJz7vP6xP3BcC6WUXntbaubW37q+Njr+r4+kPH
1z1D7M6vju9y6vhIknNQxwcsmvHzq+MjTzPyn2FtGn6egRKM41nHV2fe0BFw
6Ua+DqbKcxaAZWL9pfUIANAjKfL1SMeHEqTIj3nrMTCX8Tecfkhv5Srmd2++
JzG9n9rv3Z7u/vfU17gutP3D3nZsCr5WOvO17iPFaXPcB3vPefTAY19wvfec
jye81yHnfA96dPD8187YDgA4l1V0Xmvr2ta2vzo+9qqOrz90fN0zxO786vgu
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
ao0gZ6GOjz2p4+sPHV/3DLE7vzq+y6nja//7UpLk+oz8u8qm9kUWUJhxPOv4
SB5j5OtgajJzAeUYx7OOr868oSPg0g3rIIDpWH9ZVB0fAMyWFPn8rONDCVJM
O0c9q+MrR4qHx1Xpju/cc/7DAq93rDo+AKjPxfoTsoU6Pvakjq8/dHzdM8Tu
/Or4LqeOr/3vS0mS6zPy7yqb2hdZQGHG8azjI3mMka+DqcnMBZRjHM86vjrz
ho6ASzesgwCmY/1lUXV8ADBbUuTz86U6vsPH/v7E99n3u3uv85MjHq/jq0+K
/Ji36OdevfHNG//zjT/Y25Yf7f7ZN2/8fIXt0PGVI8XD40rHZ64DgJpcpD0h
W6njY0/q+PpDx9c9Q+zOr47vcur42v++lCS5PiP/rrKpfZEFFGYczzo+kscY
+TqYmsxcQDnG8azjqzNv6Ai4dMM6CGA61l8WVccHALMlRT4/X7Lj+/7eY787
8X32/fHe6xzTyOj46pMiP+bn9klfvPGt+KTHu++x237vOwfvf58/2L3+pdoq
HV85Ujw8rrZt5lcm+qM4fh6bes51fADQN9V6FLKGOj72pI6vP3R83TPE7vzq
+C6njq/970tJkusz8u8qm9oXWUBhxvGs4yN5jJGvg6nJzAWUYxzPOr4684aO
gEs3rIMApmP9ZVF1fAAwW1Lk8/M5Hd+2nbrv/mb7jcnH8by3mtqpPDp4z2Oa
Gx1ffVLkx/zULumuJu++MfbxLY8/xrfO2E4dXx1SlBlXh/4wps0pU865jg8A
+qZoc0K29lOf+tTTYRi6druPrY8z6/jaa681H2+XdruPL/b3+vq6+fZc2r/2
1/7a/jn+INAbQ+zOr47vcur42v++lCS5PiP/rrKpfZEFFGYczzq+y/qNb3zj
2d9skks38nXwzRtfr+wrF5sRsUbG8fylL33pWctXw/331fH12RG89dZb7NSw
DgKYzjhv/O7v/m6T63brb19+7Wtfm8N6BAB4mRT5/HxOx/fCbUe1vcfZtova
zvf79zr77t7jvjPxvb4YLzdax9xHTcdXnxT5MT+lSdo2fD+K28fYXePjtsdO
ceqYnNp0DacfUoSO7yF1fABQn3OvPUiS5Gl+EOiNIXbnV8en4yuljo8kOQcj
v47d1L7IAgozjmcd3+X8tV/7tdbfucne1DCgFK3Hso6vw47gs5/9bPNxxa79
KAAsjdbzxirW38985jPNj/PK/CAAAIekyOfKEh3fXW6brP988M8eHfk+t91n
7dg+RsdXnxT5MT+lSfpB3D2WDh+7bf7uug/f9298HM/H0Nbfv/EvbvzJHY+f
+hnQ8dUjxfnjSscHAChJ659zkCS5Vj8I9MYQu/Or49PxlVLHR5Kcg5Ffx25q
X2QBhRnHs47vcv7sz/5s6+/cZG+mAMpw198lVVPH119H0HpMcRWmALAkWs8Z
1l9eytcCALBPinyenNowbRuVv4rz5ua77qm3/effjLvvyXbMvfh0fG1IkR/z
qT3So3j5fP9o989fveXxf3HL4//ijscedk+HPd+Pj3iejq8NKc4bVzo+AEBp
Wv+MgyTJtfr/BnpjiN351fHp+Eqp4yNJzsHIr2M3tS+ygMKM41nHV6dfIFnE
FEAZNtG45dPx6QjIE0wBYElsovH1hvWXFzIFAGCfFPk8eeq9yD6/e+62X9ne
/+yu9u4273rPw/5u3ymtjY6vPinyYz51PP344PnfjfvbusPx8XjCe21f93C8
HnufyKnjbzj9kCJ0fA+p4wOA+jx9/fXXn/bOdh9jt77Y3/5Y2/6+8sorrX82
2cyUUuvDf3H2x/Pjx49bb87FWdv+Hnx+3z1x7cZ8GWJ3fnV8Or5S6vhIknMw
8u9mm9oXWUBhxvGs46vTL9S8bid7MvL1N9WfLoGijONZx1dn3mjVEdR8X/Zt
WAcBTMf6y6Juj2tYjwDgPlLk8+SpHd99Xcm2idreG+2ue/dN7fimNlY6vvqk
yI/5lPP16sFzf/LA43//4PGndFNfPHiN75/wGseMv+H0Q4rQ8R0z35rrAKAu
q+ie1tZ52d++0fH1zdq6trXtr46ve4bYnV8dn46vlDo+kuQcjPy72ab2RRZQ
mHE86/h0fOScjXz9TfWnS6Ao43jW8dWZN3QEXLphHQQwHesvi6rjA4AHSZHP
k6U7vts8vHff5+943GF/t+1hvnjC++n46pMiP+bntEgPdZuH5/f3J77fC79/
xjYfu33D6YcUoeOb+tkBAFyeVXRPa+u87G/f6Pj6Zm1d29r2V8fXPUPszq+O
T8dXSh0fSXIORv7dbFP7IgsozDiedXw6PnLORr7+pvrTJVCUcTzr+OrMGzoC
Lt2wDgKYjvWXRdXxAcCDpMjnyRod37Fu+61tD/M47m79pjY1T4scNTxEivyY
Tzlfh/fXe6jd/Isz3mvfx4Ve577xN5x+SBE6vofU8QFAfVbRPa2t87K/faPj
65u1dW1r218dX/cMsTu/Oj4dXyl1fCTJORj5d7NN7YssoDDjeNbx6fjIORv5
+pvqT5dAUcbxrOOrM2/oCLh0wzoIYDrWXxZVxwcAD5Iinyfn1PFdoqN6WuSo
4SFS5Mf8nPP10ONLdXyHDdSrZ7zWXfsznH5IETq+qWMYAHB5VtE9ra3zsr99
o+Prm7V1bWvbXx1f9wyxO786Ph1fKXV8JMk5GPl3s03tiyygMON41vHp+Mg5
G/n6m+pPl0BRxvGs46szb+gIuHTDOghgOtZfFlXHBwAPkiKfJ3V8KEGK/Jif
0yI9dC/Gqd3fse/70H0ATxl/w+mHFKHjmzqGAQCXZxXd09o6L/vbNzq+vllb
17a2/dXxdc8Qu/Or49PxlVLHR5Kcg5F/N9vUvsgCCjOOZx2fjo+cs5Gvv6n+
dAkUZRzPOr4684aOgEs3rIMApmP9ZVF1fADwICnyeXJKx/foxm/uWatVOaep
eVrkqOEhUuTH/JwW6fcfePzjg8efeh+9Uj3gfa87nH5IEXePq+Z/E32POj4A
6JtVdE9r67zsb9/o+PpmbV3b2vZXx9c9Q+zOr45Px1dKHR9Jcg5G/t1sU/si
CyjMOJ51fDo+cs5Gvv6m+tMlUJRxPOv46swbOgIu3bAOApiO9ZdF1fEBwIOk
yOfJKR3fDw+e27rX0/HNhxTnjY39537/gcd+/uDxj054v8/s3ucS41nHV44U
t5+j5n8TfY86PgDom1V0T2vrvOxv3+j4+mZtXdva9lfH1z1D7M6vjk/HV0od
H0lyDkb+3WxT+yILKMw4nnV8Oj5yzka+/qb60yVQlHE86/jqzBs6Ai7dsA4C
mI71l0XV8QHAg6TI58kaHd+2u/rynqfeP03HN19SnDY27mrqHmrzfrT32B+f
8H6H/VPJ9krHV44Ut4+r5n8TfY86PgDom1V0T2vrvOxv3+j4+mZtXdva9lfH
1z1D7M6vjk/HV0odH0lyDkb+3WxT+yILKMw4nnV8Oj5yzka+/qb60yVQlHE8
6/jqzBs6Ai7dsA4CmI71l0XV8QHAg6TI58kaHd9hVzflPXV8yyDFaWPjrh5p
630t3xcPHvudCe+17Ug/Pnj+4xO2Wcd3eVLcPq6+daY/2XvNHxZ4vR8evJ6O
DwD6ZRXd09o6L/vbNzq+vllb17a2/dXxdc8Qu/Or49PxlVLHR5Kcg5F/N9vU
vsgCCjOOZx2fjo+cs5Gvv6n+dAkUZRzPOr4684aOgEs3rIMApmP9ZVF1fADw
ICnyeVLHhxKkOG1s7Pvdg9fYuu3z7rp/4+F5/kE8v/fjQ93Tjw+e91f3vIeO
ry0pzh9XD81l3yrwevvnXMcHAH2ziu5pbZ2X/e0bHV/frK1rW9v+6vi6Z4jd
+dXx6fhKqeMjSc7ByL+bbWpfZAGFGcezjk/HR87ZyNffVH+6BIoyjmcdX515
Q0fApRvWQQDTsf6yqDo+AHiQFPk8qeNDCVKcNjb23bZ0Pzp4nRdue77fi5d7
u8e3PPY/3/hvbvzynt+857V//8TtPWb8DacfUoSO7yF1fABQn1V0T2vrvOxv
3+j4+mZtXdva9lfH1z1D7M6vjk/HV0odH0lyDkb+3WxT+yILKMw4nnV8Oj5y
zka+/qb60yVQlHE86/jqzBs6Ai7dsA4CmI71l0XV8QHAg6TI50kdH0qQ4rSx
ceh9Ld8Lt/9+e++9t+J5n/eDBx5/n4/O2NZjxt9w+iFF6PgeUscHAPVZRfe0
ts7L/vaNjq9v1ta1rW1/dXzdM8Tu/Or4dHyl1PGRJOdg5N/NNrUvsoDCjONZ
x6fjI+ds5Otvqj9dAkUZx7OOr868oSPg0g3rIIDpWH9ZVB0fADxIinye1PGh
BClOGxvHnsPS/lWUvw/fbds+nH5IETq+h9TxAUB9VtE9ra3zsr99o+Prm7V1
bWvbXx1f9wyxO786Ph1fKXV8JMk5GPl3s03tiyygMON41vHp+Mg5G/n6m+pP
l0BRxvGs46szb+gIuHTDOghgOtZfFlXHBwAPkiKfJ3V8KEGK08bGfX7+xu/G
8+au5N+zfnf32jXG33D6IUXo+B5SxwcA9VlF97S2zsv+9o2Or2/W1rWtbX91
fN0zxO786vh0fKXU8ZEk52Dk3802tS+ygMKM41nHp+Mj52zk62+qP10CRRnH
s46vzryhI+DSDesggOlYf1lUHR8APEiKfJ7U8aEEKU4bG8f4ajy/d962v/vJ
wfsc47YD/P6Nj3evdem2SsdXjhSXGVc6PgDAqayie1pb52V/+0bH1zdr69rW
tr86vu4ZYnd+dXw6vlLq+EiSczDy72ab2hdZQGHG8azj0/GRczby9TfVny6B
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
ZxXd09o6L/vbNzq+vllb17a2/dXxdc8Qu/Or49PxlVLHx3MdhuHpW2+99fTJ
kydPv/71rz/zF3/xF5tf17Vyey/C1ueEXKIHn6XN9MskYFaM41nH11/HFwWu
F0hmpgDKsInGLZ+Or873BR0fOzMFgCWxicbXG72vv9v3aXl8V2wKAJgnKfL5
SseHEqTIj/mU86Xjw12kOH1crUEdHwDUZxXd09o6L/vbNzq+vllb17a2/dXx
dc8Qu/Or49PxlVLH17/b/37ttrM79F//63/99J/8k3+S+Zu/+ZtPP/vZzz79
zGc+M/rpT3/66c/93M89/Zmf+Znm12qX8r/773/h6S//D/9T5v/4G195+pu/
879l/vajbz39wz/5Tub/8X/+4NnjfY7I8zz4XG5OvVgCZsI4nnV8fXd81n3y
NCNf91PlORoozTiedXx15o1W7/tbv/VbT//Vv/pX5NmGdRDAdJqvg606Puvv
Zdwe17AeAVgGKfL5SseHEqTIj/mU86Xjw12kOH1crUEdHwDUZxXd09o6L/vb
Nzq+vllb17a2/dXxdc8QUf/vgXV8Oj5e1tsau63/8l/+y8zf+73fe9ba/cqv
/Mqz1m7rL//yL4+93U/91E81v5aq5bnd3Z/9Pz8uqo6PPN+Dz/nmlAslYEaM
41nHp+Mj+bKRr/up8hwNlGYczzq+OvOGjo9LN6yDAKbTfB3U8fWljg/AgkiR
z1c6PpQgRX7Mp5wvHR/uIsXp42oN6vgAoD6r6J7W1nnZ377R8fXN2rq2te2v
jq97hoj6fw+s49Pxrdn/9J/+062N3be+9a2XOrutv/M7v/P07/29v/fM/d7u
F3/xF5tf57T0v/lvf+rpT3/qbzzzU3/jv3v687/02abdnY6PnJ8H88Zm4jUS
MDfG8azj0/GRfNnI1/1UeY4GSjOOZx1fnXlDx8elG9ZBANNpvg7q+PpSxwdg
QaTI5ysdH0qQIj/mU86Xjg93keL0cbV/Pn504xdPfP6c1fEBQH1W0T2trfOy
v32j4+ubtXVta9tfHV/3DBH1/x5Yx6fjm7Pf/va3b+3svv71r9/a2f36r//6
2Nntu72fXZx4/dCj23v7bdeUF/f62/p3/s7feTZe/v7f//tP/9E/+kfPvL6+
fvq1r31tdPs79m37uD+utn1e685Ox0fO34N5aHP01REwT8bxrOPT8ZF82cjX
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
aSltl2UJfb0Ezo1C/ouMvLqPxN7v79Y4/zT+//88A+/dWbby7nStcD4vvPDC
8OWXX7ai64qqrgfW150c0+d6YDw+P9/D4vGRNoLHF/4cENK1FOY5AwHoNll7
xuPD4yOEbI7Y477x3EcDuCZrz3h8fvoNPD7S9QjjIADUJ/g4iMcXV/D4AKBD
GLH7qxAeX9E9WXP8+nh8/jFi13loly5k8PjcYaS8Xam3d6fwtzJvLpTHp1GX
r+19+fD4AAD80wvvqW+eF+WNGzy+uJk1r61t6pb3xo0bpZ7d+vp6qWd36tSp
Usdu//79wdtzwHwio8/2k/zfMnLo/o+NXBonvwfgB+N/+0A2+3m3ZqA8LvPb
Qt1o1mW0Vj2fEzL6fJ/PnvHj09fyuR4Yjw+Pj5C6weMLfw4I6VoKcyadDwF0
maw94/Hh8RFCNkfscd947qMBXJO1Zzw+P/0GHh/peoRxEADqE3wcxOOLK3h8
ANAhjNj9FR4fuMCIXeehXbqQweNzh5Gt29XBjdws/P0t2fpcbOXxfTZ+XD7X
xe6fqv5Nc2ebY7bdlwIAQPv0wnvqm+dFeeMGjy9uuuzx3b59u9Sx05Q5dpp8
e1a3jr3s0pS5ZJqJT6b/eymXN8e5VMj/Kvb+d5pbM1C+tuuqjnfnmmTy3vD4
8PhcBY+PtBE8vvDngJCuRew52KCFeRSAT7L2jMeHx0cI2Ryxx33juY8GcE3W
nvH4/PQbeHyk6xHGQQCoT/BxEI8vruDxAUCHMGL3V3h84AIjdp2HdulCBo/P
HUa2b1fq8n1YeMx7Un4utvL4rpe87to2x9zub5rT0l7ftlNfCgAA7dML76lv
nhfljRs8vrhp0+O7detWqWP361//utZedocPHw7eFkJl9+7d6Tkqi56vsvzD
P/xDul+g5u67786/3q2NrORySfDuJvHl3bkmkXFZ8fjw+FwFj4+0ETy+8OeA
kK5F7DndwOcEC6AFsvaMx4fHRwjZHLHHfeO5jwZwTdae8fj89Bt4fKTrEcZB
AKhP8HEQjy+u4PEBQIcwYvdXeHzgAiN2nYd26UIGj88dRqq1q8uFx01cvhAe
X75/w+MDAIiPXnhPffO8KG/c4PHFizp1eUdOPbrt9rI7ceJEqWfX5zayb9++
UsfupZdeKnXsLl26NPzoo4+sqHf39ttv7+g6lnmOuqdg6DpwnNi9O9ckMq47
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
EyfStcKvv/566uq5WA88Cx6ffl+oa6N0Hdbi4mLq6s3NzTmpOz2O7gOrZVMf
0OeaK0IIIbOfwrgxcDyHAvBN6M+CeHx4fM6ic/jQ7TlU3n777eDjI3Gbwjk2
Jf03AOxM8P4Zjy8+j2/v3r3B2xWJOrcFALqEkfD9Ri88vvvuuy94PfcstwQA
mmDEvpbqeHxF9+5yjedW8e0+2OJx+cfg8c0mRuw6n9ZPUqdTfbwLMvLvtG28
Jdu3V22fn0q1MeQtaW8PNTw+dxiZrl1pe9F+yuX+fJ/J6ByH2oMPjw8AICyh
PwcTQqYIHl98wePrVW4JxEYi4/PbV49vfX09dfVefPHF1NVTz0xdPXF47dx1
113Zf+vrq6f3q1/9qvX1wL48Pt27U1291dXVdG+9PXv2OKu7+fn51NfT96/7
Eeq6Kj1e6LWahBBCZj+FMWXgdAYF4J9PJPDnQTw+PL6W+udeRT/ThB4fSavt
2WzqvQGgCsXfh/cePL74PL7QbYr0IkYAoCvonmWh+4zoPb5XX301eB33NIcF
AOpixL6O6nh8ms8Kz1+q+fxibhZe772Sx+T/jsc3mxix63yaNqGO3Xb3StTr
K+4FWfSZqkTbXhsuFh6fO4y4a1faRvTcqNd3XXber+9O7nH6PO3r2t7LEY8P
AGD2Cf0ZmBAyRfD44gseX6/yfwnERiLj8xuzx/eLX/xieObMmeEDDzyQHdel
a3bPPfcMDx48mPpmus5YXTZ1A3U/P10PrH+bPNbnemDXHt+7776b7nun5Tt+
/HjqJO7atWvq+tPX0LrT7xb1feraKT1W6PWYhBBCup3CeDNwPYkC8MwpCezy
4fHh8TWJzuv1Nz/+/u//Pt2jWxOyHYcOe4jHl8I5NsXOGwAqMZDALh8eHx4f
IQ1iBAC6xEACzzdi9/j0OCHrt8cxAgB1MWJfR3U9vhXZfC2+XvM18inu8acp
unz5v+HxzSZG7Dpv2h7ek2r9v85rTo+fc1Caz3NuTvFe8fjax4ibdhVr8PgA
APwzPHr06DB2tIwyHl8ob3z0rbxf/vKXs/L2zeN79j+8PfzNf/63qHP/Iwey
82uMCd3cWid//a6srIR+O61TcJ0+CjDuQ7skMj6/Xfb4zp07l3p6uvZUX+/J
J59M995Tv07K70XVzoMPPpj6eM8880y6lvhnP/tZ6upVWQ/cJY/v2rVr6Tpb
XV+7uLiYunpzc3NO6lBdPR0n9L2oD8gaVkIIIW2mMA4NnM+iAPqB03k7Ht/s
enz6Ox36OWCS559/fviXf/mXVp566qn0s0E+9913X/q7HPl7f7HlG998clN+
sPizTXn1zfc25Y33/sl6LT4DxZdCezHNuloACESQ/jl/XDw+Px6f3jf2NY8l
cUcY9wGgHkYCjL+z4vEx/rYTrVdhPAKYFiP2dVTX49MU9+TTfCojn+9kg9db
Knm9/J5r+X/H45tNjNh1Pq3/ViXq7un+aJdL/qZtdEVG7XuSizLaY6342IsN
32+VciTNqxQEj2+n4PEBAPinF95T3zwvyhs3eHzhXTs8Pnfg8UFkJDI+v7Pu
8a2urqbfTeh6Un3OoUOHUldPNt9japx9+/alzp2uFX7xxRdTT++NN96Yej3w
rHl8SZKka3O1TnVvvYWFheGBAwec1OH8/Ly1R5+uB9bjhV5bSQghpH8pjFED
t1MogN5Qe97uen1snz2+yW9sFDOZx+ejn5O+973vpfP6Sf7oj/4ode30N0lk
ijl+1zKNd3f+Hz91nvx7w+OLL4X2Z5p0tAAQjCD9c/64eHx4fKRbEcZ9AKiH
kQDjLx5f3MHjA3CCEfs6auLxqV9X5kMVU+c1L27xGp8W/j8e32xipPm51xyR
zede25g6emvjaBspOqQfyOa9+LZrIwel3Ps72OA9V2l/SfMqBcHj2yl4fAAA
/umF99Q3z4vyxg0eX3jXDo/PHXh8EBmJjM/vLHh8v/jFL9LvH/Tf1C1TT++R
Rx5xtp7zS1/6Uvbf6tbpeld19S5evNjqeuBQHp86dZPj6jpe3Vsv79g1zd69
e9O99fS7QF1nrGuddI3xZD2S/m3yWJ/7iRBCCCH5FMavgdspFEBvKJ23+1wf
O8se3y9/+cvSvPLKK+nzi9H97PS3NjQ6V3/00UfTyJTz867n7nu/muXer94/
/MOvPxbUu8PjI1PMN0z9bhYAAhKkf84fF48Pj490K8K4DwD1MBJg/MXjizt4
fABOMGJfR008Pk0Vl6/ua5bty1cMHt9sYmS6c190627KyO0re+yKbN0+qu6t
d73wvJUG77lK+0uaVykIHt9OweMDAPBPL7ynvnlelDdu8PjCu3Z4fO7A44PI
SGR8fn14fOrM6fc4Dz/8cNauHnjggeE999zjbA3o/fffn/p/6gHqWmP1yCbf
FeX37/O5HrhNj++dd97J1gr/6Ec/StcE5+t3mqiPp/vpaR2ura1VXtOEx0cI
IWQWUhjXBo7nUAB9IbuOuubx6W916OePYn7+858PT548uSnPPvusdVydU0+c
O3Ewt44p+tsgus9fPvoZQPP9739/+Bd/8RdplpeXs6yvr2efJ/KvpX5eaM8O
j484nG+YGv0rAIQnSP+cPy4eHx4f6VaEcR8A6mEkwPiLxxd38PgAnGDEvo6a
enyarfY2m6Spl1Lccy0fPL7ZxMh05z6/p576oTvtj1e2f+NnNY5X3P/veoP3
XKX9Jc2rFASPr0p/SV8HAOCXXnhPffO8KG/c4PGFd+3w+NyBxweRkcj4/Lry
+HSNpn5X88Mf/jB9zccee8zaf89FdI8+dfJ0LbGuudXvLHQvv52+2+iqx/f+
+++nrp7W7WQfD1f7dug+ILreVn27wWCQrltKkmSq9Uh4fIQQQmYhhTFv4HoS
BdATsuvItcc32Yu7mOeff966fnUurXP+p59+Ov1sUcxDDz3k9LNGjJm4dl/7
2tfS+b9GPbv8Y3QOr58Fimm7f8bjI11P4XozFftWAJgNgvTP+ePi8eHxkW5F
GPcBoB5GAoy/eHxxB48PwAlG7OtoGo8v70StyMiFyu/R1/T11OHSvfnKfD48
vtnEiF3ndc73Mal/jrWNFPeDXKl53KKD6sqtwuNzh5F2zlEsweMDAPBPL7yn
vnlelDdu8PjCu3Z4fO7A44PISGR8fut4fK+++mr6fYw+R50y9fT27t3rbJ3p
3XffnTp3uveFrhdWd02/lzh37txU323Musf3q1/9Ku1X9DHHjh1Ly3/vvfc6
qVNdt6vf3alXp2uTrl271tp6JDw+Qgghs5DCWDhwPosCiJs9GzkquevoySef
TOfkOj8vi861y+Jy7+2+ZOLaTfLNb34znVcXM613lz+mz3l7/rh4fKTrKVy/
pkoHCwAzQ5D+OX9cPD48PtKtCOM+ANTDSIDxF48v7uDxATjBiH0dufD42ow6
Xisycq6uSzVXC4/PP0bsOp/GRaraJj8sPO9IzeOuTPGeq7a/pHmVguDx1b12
AACgfXrhPfXN86K8cYPHF961w+NzBx4fREYi4/Ob9/hee+219PuWF154If33
xx9/PHX11K8T+zPw1NHX1XW/um607e90ZsHj+9GPfpTuraeunv63unoPP/yw
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
76lvnhfljRs8vvCuHR6fO2L1+G7fvp2ue7969epwMBgMT506lZ7P3/md33G5
ZvwTGX1GX5fRWuoTwr3lMnSfwaNiO5O3Zfr6n7iSv5Yv6v//mfxd99vztY4C
jw+PjxCfUeeozl52uj9bmcM1NzfnckzsVMqcr628r+32smuyNhLvbutzEJt3
5zqFOhwIADQhyLw9f1w8Pj/9JB4fHh+Zvj0L97gAukaQ/jl/XDw+PD7SrQjj
PgDUw0iA8RePL+7g8QE4wYh9HU3r8Wnu5F4Pj6+fGLHrPHQbmJX2lzSvUhDa
1U7B4wMA8E8vvKe+eV6UN27w+MK7dnh87uiyx3fr1q3U1VtfX09dvRMnTqTn
TOzPNNPmtzL6HD6Q0X7sRkZeGtjoPoNHN3JGRr7eR+Juf0M9B1X3NUwmz8Pj
w+NzFTw+Uidb7WW3lau1la+lUc/JUT/auczPz9fay07nAWWO3bVr16Y+p3h3
o+DdhU/hnAwEAJoQZN6ePy4en59+Eo8Pj49M356F9ZMAXSNI/5w/Lh4fHh/p
VoRxHwDqYSTA+IvHF3fw+ACcYMS+jlx4fNdzr4fH10+M2HUeug3MSvtLmlcp
CO1qp+DxAQD4pxfeU988L8obN3h84V07PD53zLrHd+PGjdSJ0PX5S0tL6Tk5
fPiwy3Xpkz3dqnpifefoRp6Tkat3RUa+novz8Il8sbfhxJfc3+D9JZPXxOPD
43MVPL748+abbw5//OMfp/vWFfO9731veODAgU352te+5nIs6lTuueee1LMr
S1kdatTtKou6+Ft5jy6ir6/7FC4uLuLd4d11PoVzPBAAaEJ2HT355JPpWiEf
yR8Xj89PP4nHF5/Hp/eGdF6naXP+OCuZzGP1fwPON4y33hkAXJBdvz77yvxx
8fji9Ph8zZmJ/4g97utvNB71HL6HA+gWRnL9xne/+910DG47ehwJMP6G9PjO
nTsXfIzwleeff57xCGB6jNjXkQuPL+8t4fH1EyN2nYduA7PS/pLmVQqyuV2d
JFZeF/o6AADf9MJ76pvnRXnjBo8vvGuHx+eO0B7f7du307VYV69eTV29U6dO
pfW+Z8+e4j3bxtm3b19aTr0XfNddd+X/9lHro3w30f0G9Z71ykbOy6iebsv0
52LiTP5aRmvPT4j7vQ2TyfHw+PD4XAWPL+6ok+egfyNk6uDdkZ1SaDMDAYAm
BO/v8fj89JN4fPF5fC7vE3Ux+rlFfx9Df49CvRm9l+ZhvmEEALpE8L4Kjy8+
j++RRx4J3q5I1NHvnQCgOxgJ32/0wuN74IEHgtdzz3JLALqNEbtN4/GBC4zY
dR66DcxK+0uaVyls8B8l/LjfpQAAQPv0wnvqm+dFeeMGjy+8a4fH5w4fHt+t
W7fS9UX6G+Lq6p04cSKtW3H42eXQoUNpWbQM58+fH3700UfpXn5FCuu+Pmp7
kJ9h9HfljsroN+1WZFQXN8TN+fithNvfMJm8Dzw+PD5XweOLO+pObdGXEbJt
8O6I7xTa4EAAoAmfSODxA4/PTz+Jxxefxxf62p3FzM3NDRcWFlK3b21tbXjt
2jXX9WwEALqE/oZa0H4Jjy8+jy90myK9iBEA6Ar6XW/oPiN6j+8Xv/hF8Dru
aVz/9jCAT4zY7RmPD1xgxK7z0G1gVtpf0rxKe81+Ga1LDD3edy0AANA+vfCe
+uZ5Ud64weML79rh8bnDlcenzpy6eurpLS0tpXV3+PBhZ59Ndu/enb5XXQug
7/PSpUupq6f7+dWhhx7f0Y08JyNX74q4+1z8iYzuT6xvZElG93D2eyjPTiQy
fo94fHh8roLHF3ceffTR0PfeiKf83u/9Ht4d6XQKbXogANCEUxLY5cPj89NP
4vHh8fU1+lsTTzzxROr2ra6u1p7HFl7PCAB0iYEEdvnw+PD4CGkQIwDQJQYS
eL4Ru8enxwlZvz2OEYDuYsRuzy48vlkLHp9/jNh1HroNzEr7S5pXaW/R/QV0
L/bQY32XovPtQYO6BgCA+vTCe+qb50V54waPL7xrh8fnjqoen/py6uldvXo1
dfVOnTqV1k/Bi5sq+/btS9+P3p/W93LlypXU1XNJpB6f/j7cURm5eudlVC4X
n4H1c2GykV/L6PPhCZn936JLZPz+8fjw+FwFjy/u5M9vH9Zd9y3f+OaTXL8k
mog9Txv4nGABwNQEmbfnj4vH5+e4fZhP5ssbyuP77148m9a1zvXu/3ePNL7v
8Y1vfnt49LmXhz/694PhT9+8HLxut6pnvQenjop+dmm6n7i6fYuLi8OzZ88O
L1y4UHW+YRz2gwAQL1m/gccXt8f32muveZvHkrgjzDcAoB5GAoy/s+LxMf62
E61XYTyCeDBit2c8PnCBEbvOQ7eBWWl/SfMq7R37pXyvgU+EcRcAAGaHXnhP
ffO8KG/c4PGFd+3w+NyRv371vrC6euvr66mrd+LEibQOZPNnqsY5dOhQekz1
9M6fP596erqXny867PHtkZGrp79TsyKj935D3JyX327kqozWg5+S0eflPR7K
1AaJjMuFx9de8Pj8HJf4P799WHfdt+DxkZgi9vxt4HOCBQBTE2Tenj8uHp+f
4/ZhPpkvbyiP79U337Pe0xvv/VP6byf++5Xht777vDUHrJv7H/7a8Jvf/sHw
mY1z+fJrbw///j99PHP1fO3ateHa2lrazvXzzN69exuV9cCBA8Pjx4+ne/ep
26f3BAuPMQ77QQCIl6zfwOPD4yOkSoT5BgDUw0iA8RePL+7g8UFkGLHbMx4f
uMCIXeeh28CstL+keZX2iq324FuX7q5HBACAOOmF99Q3z4vyxg0eX3jXDo+v
OerM6boc9fSWlpac7qen2b17d9oP6Hf26updunQpdfV0P79ZoAMe39GNPCcj
V++KlP82TZN8IqP7CfqZeElG91z2eyiPbxIZlxmPr73g8flzNojf89uHddd9
Cx4fiSliz+0GPidYADA1Qebt+ePi8fk5bh/mk/nyzorHt1XO/s8fDE+/drGT
e/fVrWe916eP07av9zPn5+dd3Ev6HyTOe0cA4Jas38Djw+MjpErEnm8Yz30W
AHQPIwHGXzy+uIPHB5FhxG7PeHzgAiN2nYduA7PS/pLmVdoL9gt78AEAQLfo
hffUN8+L8sYNHl941w6Pb2vUl9O1O1evXk1dvVOnTqXlcOnr7du3L73W9T6y
unpXrlxJXb0uMCMe32EZ+XorGzk/fh9lv0NTN5/L6J7Br2W0tvvE+Fh9IpFx
feDxtRc8Pj/HJf7Pbx/WXfcteHwkpog97xv4nGABwNQEmbfnj4vH5+e4fZhP
5ss76x5fWbqyd5+retbnLi8vp/vu5T/71Izes9J7V3of6yXp370mANierL/A
48PjI6RKxJ5nGM99FgB0DyMBxl88vriDxweRYcRuz3h84AIjdp2HbgOz0v6S
5lUaPezBBwAAXaQX3lPfPC/KGzd4fOFdu757fLdu3UpdvfX19dTVO3HiRPpe
ZfNnocY5dOhQej2rp3f+/PnU09O9/LqOR49PP4MeldHn1JXxsW44Oj+/3chV
Ga3fPiWj+yd85h2RyLie8PjaCx6fn+MS/+e3D+uu+xY8PhJTxJ4PDnxOsABg
aoLM2/PHxePzc9w+zCfz5e2ix7dVZm3vvjbr+d13303vJ6r3op+Hdu3a1bSs
eq9Lf59K730dddlpAkCnyPoFPD48PkKqROz5hPHcZwFA9zASYPzF44s7eHwQ
GUbs9ozHBy4wYtd56DYwK+0vaV6l0bJf2IMPAAC6Sy+8p755XpQ3bvD4wrt2
ffD41JlTV0/X1SwtLaXv5fDhw43XEBWze/fu9Hp98MEHs3976aWX0v38YqYF
j0/XKT0nI1fvipR/Nm2ST2T0+V9/l2ZJRp9t9zt4v7GTyLgO8fjaCx6fn+MS
/+e3D+uu+xY8PhJTxJ4rDnxOsABgaoLM2/PHxePzc9w+zCfz5Y3J4ytLyL37
fNfztWvXhmtray7uZ+lvWF2S0X0yvWfG704BxE/WB+Dx4fERUiVizx2M5z4L
ALqHkQDjLx5f3MHjg8gwYrdnPD5wgRG7zkO3gVlpf0nzKo0S9uADAICu0wvv
qW+eF+WNGzy+8K5dDB6f+nLq6V29ejV19U6dOpUer+CZTZV9+/al16Te79V9
9a5cuZLuq5cnf/3qY2Knocd3WEZrj3QN0vnx88o+h9bN5zL6jP9rGa3FPjE+
FjQnkXH94vG1Fzw+P8cl/s9vH9Zd9y14fCSmiD2PHPicYAHA1ASZt+ePi8fn
57h9mE/myxu7x7dVfOzdNwv1vJG/kNGancFGrm7ktw3LeUtGv32l99X0t7D2
T9upAsBMkV3veHx4fIRUidjzBOO5zwKA7mEkwPiLxxd38PggMozY7RmPD1xg
xK7z0G1gVtpf0rxKo2K/sAcfAADEQS+8p755XpQ3bvD4wrt2XfH4bt26lbp6
6+vrqat34sSJ9DVl8+eYxjl06FB63amDd/78+dTT0738qoLHl6G/A3NURr8V
szL+2w1H50nXOel6p8FGTsnoMyu/O9MOiYzrHY+vveDx+Tku8X9++7Duum/B
4yMxRez55cDnBAsApibIvD1/XDw+P8ftw3wyX96+enxlcb13X/7/v/HGG6Hm
G2aLPk3/fUlGv0uVNCyn/j6W3nvTe3AvCb9rBdBlsmsbjw+Pj5AqkWrzDQCA
CUYCjL94fHEHjw8iw4jdnvH4wAVG7DoP3QZmpf0lzas0GtiDDwAAYqIX3lPf
PC/KGzd4fOFdu1ny+NSZU1dPPb2lpaX0OYcPH268VqeY3bt3p9eVfgeunt2l
S5dSV0/383NB3zy+e++9N1+//yLlvw/TJJ/I6PP6QEZrmYzw++IhSGR8TvD4
2gsen5/jEv/ntw/rrvsWPD4SU8Seew58TrAAYGqCzNvzx8Xj83PcPswn8+XF
49s5Lvfue+KJJ4aLi4vDs2fPDi9cuOBjvmFq9HPq4Z2S0XqNZCOfNyyn3qc7
L6P1IEdrHB8AwpFdw3h8eHyEVIk0n28AQD8xEmD8xeOLO3h8EBlG7PaMxwcu
MGLXeeg2MCvtL2lepZ1nv7AHHwAAxEcvvKe+eV6UN27w+MK7dj49PvXl1NO7
evVq6uqdOnUq/ffCvm5TZd++fem1o/dl1aW7cuVK6ur5IEaPr8ytdHS+dA1S
IqPfGx/I6HMovxc+WyQyPl94fO0Fj8/PcYn/89uHddd9Cx4fiSliz0sHPidY
ADA1Qebt+ePi8fk5bh/mk/ny4vE1i8u9++bm5oYLCwvDn/zkJ8O1tbXhtWvX
XM43zJR93/6NnJDRvCWR0ZqOJuW8sZFLG1mRkdvH7zoDzBbZ9YrHh8dHSJWI
2/kGAMSPkQDjLx5f3MHjg8gwYrdnPD5wgRG7zkO3gVlpf0nzKu007MEHAACx
0gvvqW+eF+WNGzy+8K6d6/zHa/91+PqF/3340tn/aXj3Vx9svHZmuxw6dCi9
PtSVO3/+fOrpqW8Wmq56fBO/cn19PfX1HO+DmGzkqozWGf3/7L1fjBzHnef5
m7HHK4lsk9afo0lLw4Lk7Z7jjCDaq9W/M9RBSLKt0dCiIHl8TUPbbRs+cSB7
dmT2AX6w1UkcwFmMQZPYhR7G8qCphyPGAy5EgAPsywFMYG9wBywOFDD3cMA8
kLiXe9gH6+GAebiHuvpFVhUzi02yOisyI/MXnw/wBWyRrMyIjMqIjIpPxoYw
b9snchlfRzy+5oLH185xSfvXN4V116kFj49YilTHq1mbAywAWJgo4/bycfH4
2jluCuPJcnnx+MKmvHefyF3nre6Zunv3zXyOa+B+uH/8uZkUc2+f1CzjjVE+
lsLte10KZxAA4jD9buLx4fERMk+k+fEGANjCSYT+F4/PdvD4wBhOqu0Zjw9C
4KRa57HbQFfaX16/SnvJQNiDDwAAbJOE95Sa50V5bYPHF9+7q5N/d+m/eFfv
rXfeH/7xyT8fHnl6dThYCeZ9Dfft2+fbv/5WrT7c9va2d/XUN+syXff41NW7
ePGid/VOnDjhfb1Q10yKd8Vko/yFFM+Xg5AdPEQhl/H1xeNrLnh87RyXtH99
U1h3nVrw+IilSHUcm7U5wAKAhYkybi8fF4+vneOmMJ4slxePr516Pn36tM/x
48crzy+7zTx79838G9fUTXEH9Fg6P3dRSnM7u4zO8+m6kq1R1kc52t7pAyTN
9HuIx4fHR8g8kXjjDQDoJ04i9L94fLaDxwfGcFJtz3h8EAIn1TqP3Qa60v7y
+lXaO9iDDwAAUiAJ7yk1z4vy2gaPL76Tt1P+Jv+v3tPbPPcfvau3enzdu3p7
lvbXXt8ym8OHD/s2rvOn6rx9/PHH3tXrM13w+HRfQvX11NXb2Njwrt7+/Ytf
t4lbub6+7sum12ppaan8d6410K9DXHIZX188vuaCx9fOcUn71zeFddepBY+P
WIpUx7pZmwMsAFiYKOP28nHx+No5bgrjyXJ58fji1fOlS5e8i6dtXZ9pDh48
WHv+rLx338yfuaZuinOiHt6GFGtD8lE+lXpl1Pm/81KsPVlt8fwBUmH6fcPj
w+MjZJ5It8YbANB9nETof/H4bAePD4zhpNqe8fggBE6qdR67DXSl/eX1q7Q3
DIQ9+AAAIB2S8J5S87wor23w+OK5ev/h6j95V29985fe1fvXx173rp7c/uxQ
O5/93H3T//3lL3/Zu1/qmVmlLY/vxo0b3tW7cOGC9/XU1RsMBkGu2U77IN6J
GT/wWuA+HeKTy/j64vE1Fzy+do5L2r++Kay7Ti14fMRSpDoGztocYAHAwkQZ
t5ePi8fXznFTGE+Wy4vH16161nk3/bsh9u4b5z+PsjXK61Ks3+gCg1FOSDEW
yqVYP1KnbNdH2ZaifKvCO6QBFmH63cLjw+MjZJ5ItU92Ld+zAKB/OInQ/+Lx
2Q4eHxjDSbU94/FBCJxU6zx2G+hK+8vrV2kvYA8+AABIjSS8p9Q8L8prGzy+
Zl29f3fpv3hXTz29Pz75597TG6wcXXTdyTQPLO0bHvlXLw6fdt8avvU//Hz4
Z9mvh+//9f/i9/PT4z/46Mr076prZp3QHp+uGbp48aJ39U6cOOHrMMR1m+yF
qOd4/vx57+qpG7hb8PjMk8v4+uLxNRc8vnaOS9q/vimsu04teHzEUqQ6Ps7a
HGABwMJEGbeXj4vH185xUxhPlsuLx9ePeg65d590c287XUPipBgfXRnlE6lX
thujfCzdcxcBus70e4THh8dHyDyRav/rWr5nAUD/cBKh/8Xjsx08PjCGk2p7
xuODEDip1nnsNtCV9pfXr9JOMxD24AMAgDRJwntKzfOivLbB41vM01NfTj29
zXP/0bt6q8fXvau3Z2n/7LNA7Txy8LB39V5d+7F39U6fu+xdvXnOD4/v3uj+
hOrrqau3sbHh62nGj6uVffv2+fNZX1/359LEXoh4fObJZXx98fiaCx5fO8cl
7V/fFNZdpxY8PmIpUh07Z20OsABgYaKM28vHxeNr57gpjCfL5cXj6289B967
74Z0039zo/zFKBelNF+0y+j7p3X+UMu2PsrR9k4foDdMvzN4fHh8hMwTqfa1
ruV7FgD0DycR+l88PtvB4wNjOKm2Zzw+CIGTap3HbgNdaX95/SrtLOzBBwAA
KZOE95Sa50V5bYPHd28X7j9c/Sfv6q1v/tK7ev/62Ove1ZPbx/y1c3j5Ke/q
qaf3b06f856e7uW3qGeIx1ege93pmp4LFy54X0/rYjAYBLl2ekz9TV+Pt729
7X29tsDjM08u4+uLx9dc8PjaOS5p//qmsO46teDxEUuR6pg6a3OABQALE2Xc
Xj4uHl87x01hPFkuLx6f7Xoe5boU71yuOweo825d27tPPbwNKdah5KN8KnbK
BhCL6XcDjw+Pj5B5ItU+1bV8zwKA/uEkQv+Lx2c7eHxgDCfV9ozHByFwUq3z
2G2gK+0vr1+lnWMg7MEHAACQhPeUmudFeW2Dx1f4burMqaunnt4fn/xz7+kN
Vo7WXddxWx5Y2uc9vafdt7yr92fZr72rp/v5Lerq4fHd4ujRW9fsD/7gD3yZ
Q1y/w4cP+/uBunrnz5/3rp66gbHB4zNPLuPri8fXXPD42jkuaf/6prDuOrXg
8RFLkep4O2tzgAUACxNl3F4+Lh5fO8dNYTxZLi8en+16llvrNfZLmL3tNDek
e3v3DUY5IcX4Kpf67qJ6j9tSlG1VeF81pMP0e4DHh8dHyDyRav/pWr5nAUD/
cBKh/8Xjsx08PjCGk2p7xuODEDip1nnsNtCV9pfXr9JOwR58AAAABUl4T6l5
XpTXNql4fCuvbg4P/3dvDx975k99Off//lPDhx5dGe5Z2j87hq+dRw4e9q7e
q2s/9q7e6XOXvavXpKeXosd3/fp1v7ee7qu3sbHhyzXjs9XKvn37/Hd+fX3d
+3rq6umxugwen3lyGV9fPL7mgsfXznFJ+9c3hXXXqQWPj1iKVMfiWZsDLABY
mCjj9vJx8fjaOW4K48lyefH4bNez3Hsdo+5tF8J/m8zRdWl/u4m7mI1yZZRP
pF65bkj3vEWA0EzbPB4fHh8h80SqfaVr+Z4FAP3DSYT+F4/PdvD4wBhOqu0Z
jw9C4KRa57HbQFfaX16/SjvBQNiDDwAAoEwS3lNqnhfltY0lj+/LL//Yu3pf
/KOv+7IsHVwZ7nn4cN31Fjvm8PJT3tVTT+/fnD7nPT3dyy+mq2fR49O97tTV
u3Dhgvf19NwHg0GQa6jfa/0NXl297e1t7+v1FTw+8+Qyvr54fM0Fj6+d45L2
r28K665TCx4fsRSpjtGzNgdYALAwUcbt5ePi8bVz3BTGk+Xy4vHZrmept3bD
+t59ThYvm77rWucktVzrUviQAH1m2r7x+PD4CJknUu0XXcv3LADoH04i9L94
fLaDxwfGcFJtz3h8EAIn1TqP3Qa60v7y+lUaHfbgAwAAuJ0kvKfUPC/Ka5u+
eXyPux96V0/P9cEnnvWe3n37vlh3/cRteWBpn/f0nnbf8q7en2W/9q7e3+T/
NbqTZ9HjU1fv4sWL3tU7ceKEP8dQ11K9P3X1zp8/7109dQOtgcdnnlzG1xeP
r7ng8bVzXNL+9U1h3XVqweMjliLVsXvW5gALABYmyri9fFw8vnaOm8J4slxe
PD7b9Sxh1zFa3rtPy7YhxZqXfJRPxUa5AOZl2o7x+PD4CJknUu3/XMv3LADo
H04i9L94fLaDxwfGcFJtz3h8EAIn1TqP3Qa60v7y+lUajYGwBx8AAMCdSMJ7
Ss3zory26ZrHt/Lqpvf0HnvmT/357P/9p7yr95nfu6/uWojb8nsP7PefOTj6
snf1Tp+77F292M6dVY/v+vXr3tdTV29jY8Ofx4x/Viv79u3z39H19XXv66mr
V/YX9L9ZB4/PPLmMry8eX3PB42vnuKT965vCuuvUgsdHLEWqY/uszQEWACxM
lHF7+bh4fO0cN4XxZLm8eHy261maX8dhee8+PX4Ib/H6KNtSlGtVeDc2dJNp
m8Xjw+MjZJ5Ita9zLd+zAKB/OInQ/+Lx2Q4eHxjDSbU94/FBCJxU6zx2G+hK
+8vrV2kU2IMPAADg7iThPaXmeVFe28Tw+L788o+9q/fFP/q6P+bSwRXv1cnt
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
oHNyOo7TeTnt47Msq/xZF/r9ia+4ubkZvA6Wl5crZVfPS48Xu8xt9YN4fK2N
N1zA+xHsHkt7901cxWyUK6N8cofzvFd0Lje2pwjdYdo28Pjw+AiZJ1LtU1zL
9ywA6B9OIvS/eHy2g8cHDeGk2q7w+CAETqp1HrsNdKX95fWrdC4Gwh58AAAA
bYLHZ5DUyovHZ5vUPC/Kaxs8PvPkMr6+eHx4fKGCx2c7eHy2g8dHLEWqz6JZ
mwMsAOgtjY7bde2RziPoZ7/xxht+vH7gwIFgc24HDx68bW+5u/lM5X/bZr+v
rp6eW3lvwZDlVzfh9OnTvuxXr16N3h91oR/E42ttvOEC35Ngcazt3edk8bLo
u8mvSVGOdSn8R0iDaTvA48PjI2SeSLX/cC3fswCgfziJ0P/i8dkOHh80hJNq
u8LjgxA4qdZ57DbQlfaX16/Se8IefAAAAO2Dx2eQ1MqLx2eb1DwvymsbPD7z
5DK+vnh8eHyhgsdnO3h8toPHRyxFqs+iWZsDLADoLQuN2y9fvuzXF6lDpv9e
99bTMfnevXuDzavpvnI6HtN+WqO+0qVLlxa+T4bu9/Wc1NdTV+/kyZPe1Vta
Wlq4/PoZs65i3fJbT7ne8PhaG2+40DclaAxLe/dpWTakWKOUj/LpHc6z6+WA
5plebzw+PD5C5olU+wnX8j0LAPqHkwj9Lx6f7eDxQUM4qbYrPD4IgZNqncdu
A11pf3n9Kr0jA2EPPgAAgFjg8RkktfLi8dkmNc+L8toGj888uYyvLx4fHl+o
4PHZDh6f7eDxEUuR6rNo1uYACwB6yz3H7R988IFfQ3Tq1Cn/d3TM/cQTTwSd
O9Pxls6faV+cZVlj+8qVj1mn38/z3Lt6m5ub3tdTV29lZSVIHaivOFsHerzY
fUufUq5PPL526llYJ9J3LO3dp8cL4SleH2VbinKsCu8y7zvTa4vHh8dHyDyR
ap/gWr5nAUD/cBKh/8Xjsx08PmgIJ9V2hccHIXBSrfPYbaAr7S+vX6U7wh58
AAAAccHjM0hq5cXjs01qnhfltQ0en3lyGV9fPD48vlDB47MdPD7bweMjliLV
Z9GszQEWAPSWyvyVjt3feOMNP64+cOBAsLkx/Sz9zFdeecUfo/xnbfa/8x5X
XT3d905dvWPHjnlfL0Q9HDx40I8t1SXQPQyb8hVTTbmu8fjaqWdhPaFVrOzd
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
4wsVPD7bweOzHTw+YilSfRbN2hxgwULo+upVud0x07XHoeYmdG+TXIrfVjMp
fre3+E7lyf6EWo/bEq4eZ11HJzbrr02i9L+xjkvaTZ7nw7/+678eZlnmr7PO
zeqYfmlpKdh878R7O3nypHff1Hu7dOlSlPKqb6flPX36tC+vlnV5eTl4WSeO
38yfuyZuEADQOH3cu0/PeUOK8ayec9318m2c7/R4eHy2PT7tf2OPe4iNzNyn
XEP3JgCwg5MI/W9XPD7632ai9Sr0R5ZxUr2+eHywCDqfUK5r/f3J2nshAQAA
ACbg8RkktfLi8dkmNc+L8toGj888uYyvLx4fHl+o4PHZDh6f7eDxEUuR6rNo
1uYAC+7JxC/T9cJbUqwfvi5h5x/yUa5If/eFm5eB3F6X+twWug43hPUqTRKl
/411XNKt6Nq0c+fO+Tawtrbmx/sHDx4Mdj9WX1C9t+PHj3v3TY+lnp/6hW2X
tWnHb5R/kuI+rPfjiRMzCH/LAIAW6OPeffq5IXxEHZdvj89X72OLrj+cfjYe
Hx4fIfNk5p7kFrwHAYB9nETof/H4bAePzzxOqtcXjw/qMpDquxP1HTu88xAA
AAAsg8dnkNTKi8dnm9Q8L8prGzw+8+Qyvr54fHh8oYLHZzt4fLaDx0csRarP
olmbAyzwrEqxTnlLij0+rkk4v2zye2gut/aE0zXLTuy+51Trc12qexSGqMeb
UtRjJrZ9x64Tpf+NdVzSn+ieeg17b97xO3bs2HR/O3X81Ldru6wtOH7qxei9
W+/jOH4A/aVve/dNfEQ9X30/wyc1z1XH8XVdxOnn4PHh8REyT2buP25Xdz0A
SBEnEfpfPD7bweMzj5Pq9cXjg7rMvp9yI+rZAAAAADQPHp9BUisvHp9tUvO8
KK9t8PjMk8v4+uLx4fGFCh6f7eDx2Q4eH7EUqT6LZm0OsBJB1wSvyu1uWfnd
o4tG1xnno1yQ4ho6sf0u08k+hVqf2xKuPmedRye267GPROl/Yx2X2Ijup6fr
2rIs8+1H53z1WUH335PF71s+Kysr3vM7efKk9/zU8VO3sO2y4vgBwD3o4959
Ic5Xx6mTe5c+E9xpfDn9N3h8eHyEzJOZe41b/JYHAMZxEqH/xeOzHTw+8zip
Xl88PqiD/m5VruOLUc8GAAAAoB3w+AySWnnx+GyTmudFeW2Dx2eeXMbXF48P
jy9U8PhsB4/PdvD4iKVI9Vk0a3OAZYiJV6ZOwZYU63Rn3y+6aHIp9gbJJI39
4AZye53qc1boutwQ1pf0iSj9b6zjkjSia97OnTvn29ba2pp/jjh48GCw/kN9
QXX8jh8/7h0/PZZ6fuoXtlnOmfO6KMW9uO5+VzsFxw+gv/Rt7z493w0p1iLq
+X4a6Fynf4bHh8dHyDyZuae4hu55AGAHJxH6Xzw+28HjM4+T6vXF44Pdos/6
5frVucD9Uc8IAAAAoB3w+AySWnnx+GyTmudFeW2Dx2eeXMbXF48Pjy9U8Phs
B4/PdvD4iKVI9Vk0a3OA1TNWpdjrY0uK9bbXJJxXppndC05/33Ri/zdNrdd1
qe5VGKI+b0pRn5mk4T2mQpT+N9ZxCdE99Rre3847fseOHfOO3+bmpnf8dF+9
0GWZOa6b+W4P5NaeV5ng+AFA//bu088M5SIOv/rVr3qXT9e94/Hh8RFyp8zc
O1wD9zYAsIWTCP0vHp/t4PGZx0n1+uLxwW4YSLE//aRu9TewO+1PDwAAAGAN
PD6DpFZePD7bpOZ5UV7b4PGZJ5fx9cXjw+MLFTw+28Hjsx08PmIpUn0Wzdoc
YHUMXSu8Krc7ZeXfGReNOgm5FHt3ZFL8Dp7C75aT/Qq1XrclXL3Ouo9O0qjP
lInS/8Y6LiF3i+6np+vlsizz7VLnkvUZRPffk8Xvrz4rKyve8zt58qT3/NTx
U7ewzvnOfLbbxfd+IDh+AHCLPu3dN3ER9Vx1L+ha964vfOELwyNHjvg56e9+
97ve7cbjw+MjRDNzv3AN3McAwBZOIvS/eHy2g8dnHifV64vHB7tB59zKdbsR
9WwAAAAA2gWPzyCplRePzzapeV6U1zZ4fObJZXx98fjw+EIFj8928PhsB4+P
WIpUn0WzNgdYEZj4ZLpWd0uKtbuzvyUumlyKdbqZpLUP3EBur1t9LgpdpxvC
epCUidL/xjouIYtE19KdO3fOt9m1tTX/fHLw4MFg/Z36gur4HT9+3Dt+eiz1
/NQv3Ol8Zv69C3RPGAiOHwD0b+++hc/1/vvv9/PGOk/95ptvDt999108Pjw+
kmBm7g2ugfsVANjCSYT+F4/PdvD4zOOken3x+GBe9F2W5Xq9GPVsAAAAANoH
j88gqZUXj882qXlelNc2eHzmyWV8ffH48PhCBY/PdvD4bAePj1iKVJ9FszYH
WA2xKsWa2y0p9te4JuF8Ms3sHnC6H4iTYv1wCmj9rkt1z8IQ9TrZqzCTW/5j
KnUK8xOl/411XEKaiu6pp2vtdE8nbdP67LK8vBx0blsdv2PHjnnHb3Nzc/bP
XQv3i4Hg+AGkTp/27jtaPt7nPve5Wuepc8kvvPDC8LXXXhv+4Ac/wOPD4yPG
M3MPcA3cmwDAFk4i9L94fLaDx2ceJ9Xri8cH86DP4bO//fBbDwAAAKQGHp9B
UisvHp9tUvO8KK9t8PjMk8v4+uLx4fGFCh6f7eDx2Q4eH7EUqT6LZm0OsGqi
v/etyu0u2W8l3DP5xCnTd4ZmUvxefbTxknWHyb6FWr/bEq5+Jw5kqvUKixOl
/411XEJiRPfT03V4WZb59q5z1Ppso/vvyeL9wCT/JLecGO1rtM9psz8YCI4f
QKp0ee++6Werg6eu9Xe/+10/F61zxHV/L9W9WL/61a/6z9HP1bX0eHxF8PhI
3zPzfXcL3oMAwD5OIvS/eHy2g8dnHifV64vHB/diINXfkvQ3IX4DAgAAgBTB
4zNIauXF47NNap4X5bUNHp95chlfXzw+PL5QweOzHTw+28HjI5Yi1WfRrM0B
1l0oe2Saa1KsiQ/53J2PckWq+78Nmi5YhxhIUcfqF4TetzCXW3U72a8QIARR
+t9YxyWki9E1eufOnfPfhbW1Nf/co46IhOk/NLrWR/ukbbnlxmh/1dZ7uweC
4weQIl3Yu2/6GXfaS0/Xweuf6fy0zqPWvf9+4QtfGB45csR/Tvm/4/Hh8ZF+
Zea77XZxvwGANHESof/F47MdPD7zOKleXzw+uBezv+NtRD0bAAAAgHjg8Rkk
tfLi8dkmNc+L8toGj888uYyvLx4fHl+o4PHZDh6f7eDxEUuR6rNo1uL4alWK
tflbcmvPtxuyw/NxzUz2frsoVZ+sLQ+gC+y0d2EoH3KyZ2EmtzzIlOoW4hCl
/411XEL6lkuXLvk1fLqHlH5X9JloeXk59Ly5jhcm+1+17cHpcZzg+AGkQtt7
903//p08vjtF/77OHX/lK1+pzCfvNo8++qj/nLfffnv405/+FI8Pj490PDPf
YVf3ZgcAyeAkQv+Lx2c7eHzmcVK9vnh8cDcuSLUuL0Y9GwAAAIC44PEZJLXy
4vHZJjXPi/LaBo/PPLmMry8eHx5fqODx2Q4en+3g8RFLkeqzaBZw/DSQ2x2y
a7LD8+8CmbhkF8bn7qTYSyM1tMyzTqTuZ7Ro/U5cyNTrF7pDlP431nEJsRSp
9i8Xpdi3NZeirwk1Lph4cLoPlvaJOg5pq98aCI4fQCo0tXff9L/v1uPbKe++
+66f133hhRf8HPN9991X6xx1nvjYsWPDt956K+h+feVj4PERUi8z31cX8kYH
ACZxEqH/xeOzHTw+8zipXl88PrgT+oxcrkedE+O9jwAAAJAyeHwGSa28eHy2
Sc3zory2weMzTy7j64vHh8cXKnh8toPHZzt4fMRSpPosmu1yjKRrWFelWFOu
uSbh9nubRMdhV6S679tgl+dpgYEUda1rfHWtr9a1PneEruPJvoUAXSRK/xvr
uIRYilT7HbfD91v/28SLUX88l8XcmNmo365957bc2g9L+9U21hQNBMcPwDoh
9+4bHj582M9Bf/e73/V7nIaaa9bP0s/Uz9Z557q/weq+fc8995yfr1a37xe/
+AUeHx4fiZCZ76YLfmcDAGs4idD/4vHZDh6feZxUry8eH+zEQKrvldR3dvE+
SAAAAEgdPD6DpFZePD7bpOZ5UV7b4PGZJ5fx9cXjw+MLFTw+28Hjsx08PmIp
Un0WzXYYB63K7Xu93ZAdnmNrZrLn20WpemQpvqtTy6z1vS639jAM5UVO9i7M
5JYPmWIdQ7+J0v/GOi4hliLVPsnt8rt/VJr14DQ6vtF+V/vfNl04PYYTHD8A
qwTbu0/niXVvvddeey3Ifn2TlI/xxBNPeEevzvk99NBDw6eeesrPYet46cyZ
M3h8eHyk4cx8D13g+xcA2MNJhP4Xj8928PjM46R6ffH4YCdmf8PaiHo2AAAA
AN0Aj88gqZUXj882qXlelNc2eHzmyWV8ffH48PhCBY/PdvD4bAePj1iKVJ9F
r0mxhv2a7PCcukAmDpnur5NJ8ftvyu/j1LLPupHl95XWzcSJpJ7BKlH631jH
JcRSpNpfuYD3hckeWBtS9H26v2wuRZ8YahwzceF0P1ztu1elnf51IDh+ABYJ
tnffF77wheGRI0cW2ruv/Hm6t95kflj/95tvvjl89tlnK3PFu8kDDzzg/63O
a7/99tvDn/70p3h8gkdAwmXmO+cC36sAwB5OIvS/eHy2g8dnHifV64vHB7Po
b1Hl+rsY9WwAAAAAugMen0FSKy8en21S87wor23w+MyTy/j64vHh8YUKHp/t
4PHZDh4f6VsuXbo0/NWvfjV85513fJ5++unhyspK6OdYHS/p2vlMbu33Nmhi
YNYTBlKsh9d18bru/5qE28cwl1t1Pdm/ECAFovS/sY5LiKVItR9zLd439FiT
vbB0bVEuC+yHtUPUw9c+flsKH049fe3/m97zdiA4fgDWmH4HDx48uNDvo7vZ
u6/878oe305RD0/nbI8dO+bnj++///5a5zfrBeLxEVIvM98t18SNCQBM4SRC
/4vHZzt4fOZxUr2+eHxQRufbynWn81JNz4cBAAAA9AU8PoOkVl48Ptuk5nlR
Xtvg8Zknl/H1xePD4wsVPD7bweOzHTw+0sWop3fu3Dnv6R0/fty7eocOHQr5
nDrZ6+2iVP2xlH+X07KvjrIuxTp33ctQ172HqO/JHoaZ3PIiU65rACVK/xvr
uIRYilT7OBfrJjKD7qnnpDkXTnNNivGBjhPa8uEGDZcLxw+gGabfs4l7p+ve
9X/rvPBXvvKVylzxbnOnvfvKf+deHt9OOXPmjB8f6TnqnPKDDz5Y6/wOHz48
fPHFF/0egFruDz/8EI+PkHtk5nvkGro3AYAdnJTuG3h8JETw+MzjpHp98fhg
wkCKd1tN6k1/Pzwa84QAAAAAOgYen0FSKy8en21S87wor23w+MyTy/j64vHh
8YUKHp/t4PHZDh4fiZGrV696V0/XSaqrp3sgqKsn93i23GX+n/G4R/eryaT4
nZbf3oo60P11tqTYb+eaVH+jrJuJG0l9A8xHlP431nEJsRSp9n8u1k1kF6g7
70bZkKKP1n1wcyn67lDjrokPp/v26hhjVZofBwwExw+gq0y/S/faQ+/dd9/1
Lp7OU+v8cajfUt96660gc8u/+MUvvBOo89k67/roo4/WOp9HHnnEP/Oq2/eT
n/xkeOHCBTw+QkqZ+c64hu5NAGAHJ6X7Bh4fCRE8PvM4qV5fPD6YMPs+y42o
ZwMAAADQPfD4DJJaefH4bJOa50V5bYPHZ55cxtcXjw+PL1Tw+GwHj8928PhI
U7l06ZJ39dTT0+iaxZWVlaDPmnp/0udNbbu6B8PMn2eNjaa6z0CKtea65lzX
01+TYlwfot5zKdb/Z3JrH0MA2D1R+t9YxyXEUqTaL7pYN5GAOCn69EwKHz8f
5aaEG7Pp+wJ0LLIthROn7xPQcUqTe/MOBMcPICbT78u9PL6dEnLvvoceemj4
1FNP+c/SsY++SybEnLO6ferkPfvss7XPbc+ePX5fQf2cU6dODc+ePYvHR5LN
zPfDNXZ3AgArOCndN/D4SIjg8ZnHSfX64vGBovNg5Tq7GPVsAAAAALoJHp9B
UisvHp9tUvO8KK9t8PjMk8v4+uLx4fGFCh6f7eDx2Q4eH1kk6umdO3fOe3rH
jx/3rt6hQ4eCPUsuLS35e5B+trZPPZb+np7n+Y7nM/Pvs+aGU51A176vjrIu
xRryj+X294bWja5zz6WoQ13/7qTZtfYAKRKl/411XEIsRap9pot1E2kJ3VPP
SXM+nOaaFOMYHc+04cQNGi4Tjh9A6TtRx+NrY+8+nTPWfeF13z518haZfy5/
7re+9a3hN7/5TT83/MADD9Q6N3X7Xn311eHbb799Vy+h/G/w+EjfM/M9cA3d
mwDADk5K9w08PhIieHzmcVK9vnh8oO+0mv1djN/BAAAAAG4Hj88gqZUXj882
qXlelNc2eHzmyWV8ffH48PhCBY/PdvD4bAePj9wtV69e9a6e7lmgrp6uc1RX
T+7xDLibLC8v+/vM2tqab4P6e7nu5VfnfGc+O2tsNNUuun5e963ZkmIfm2tS
7GuzaN1/KsW4UN83mknxO/bRNgoEAJ4o/W+s4xJiKVLtT12sm0gH0LVNbpQN
KcYSul9vLsUYI9RYceLE6f7COhZalWbHKwPB8QMIwbTdh/T47rV3nyz4Ha27
d1/5M2Y9ggsXLgzfe+89Py+t88UPP/xwrXM7fPjw8MUXX/R79+kxPvzww8qf
4/GRvmemzbtG7kwAYAknd+l/8fhIneDxmcdJ9fri8aXNQKq/s+lcFr+PAQAA
AOwMHp9BUisvHp9tUvO8KK9t8PjMk8v4+uLx4fGFCh6f7eDx2Q4eH1FnTl09
9fQ06umtrKwEfSbU+4g+F2obO336tP9NXB3B0GWZOW7W2GgqPAMp1nHrem5d
p35NinF4iPrPpVhXn0nxflHXQnkA4N5E6X9jHZcQS5FqP+ti3UR6gJNi7JFJ
8d6AfJSbEm6MqeutdMy0LYUXp+890PFUU+9OHwiOH8C8TNt20x5fOeXjnjx5
0o91dB5a54cffPDB2t/Pe+3dV/6783gE6uDp39O5an1WVkev7rlNsr6+Pvzo
o4/w+EhvM9OmXRM3JgAwhZNd9r94fOReweMzj5Pq9cXjSxudgynX1UbUswEA
AADoNnh8BkmtvHh8tknN86K8tsHjM08u4+uLx4fHFyp4fLaDx2c7eHxpRD29
c+fOeU/v+PHj3tU7dOhQsGe+paUlf6/Qz9Z2pMfS373zPG+1nDPnlTU3nKqF
rilfHWVdivXZH8vtvxXWja4hz6Uos64td9LcGnYACEOU/jfWcQmxFKn2wS7W
TaTn6DvOnTTnxGmuSTHe0nFX017coOHy4PhB35i231ge306+3S9+8Qv/33VP
u2effbYyb7zblPfuK//3RTwC/bdvv/2233evPLe8m+zdu9fPD+t8tL5D54MP
PsDjI73ITFt2Dd2bAMAOTgL1v3h8ZBI8PvM4qV5fPL500XdNlevpYtSzAQAA
AOg+eHwGSa28eHy2Sc3zory2weMzTy7j64vHh8cXKnh8toPHZzt4fDaie9up
q3fmzBnv6uleAerqyT2e1XaT5eVlfz9YW1vzbUV/19a9/GKXvZyZc84aG03d
HV2XrvvBbEmxP8w1KfaLWfQafCrFOE5/Y8yk+N35aBsFAoBGiNL/xjouIZYi
1f7ZxbqJGEbfReCkeBd6JsW+wrkUY6FQY9uJF6f7IOuYbVWaG1cNBMcP0mPa
Rrvk8d0pP/3pT4Pt3ad767366qvexwvhFJw9e9Y/43/zm9/0880PPPBArfPS
OeM33nhjeOrUqYWdg/Ln4hGQUJlps6652xMAGMFJ6b6Bx0dCBI/PPE6q1xeP
L01OSLWOdH6Gd2ICAAAA3B08PoOkVl48Ptuk5nlRXtvg8Zknl/H1xePD4wsV
PD7bweOzHTy+/kSdOXX1dA2fRj29lZWVoM9u+n3X5zdtC/rufv3tWh3B2GWf
NzPlyRobTRVro1elWCut67+vSTFuDnEdcinWq+v562+KrsFyAEA8ovS/sY5L
iKVItd92sW4iCeOkGCNlUrzfIB/lpoQbE+v7F3Rsty2FG6fvZ9BxXxPrugaC
4wc2mbbDPnh8OyXk3n2PPPKIf37Xz/rJT34yvHDhwkLzzvrv33vvvYXvEU88
8cTwlVde8XPX6gdcvnwZj49Ey0z7dA3dmwDADk5K9w08PhIieHzmcVK9vnh8
6TGQ6js39X1RvCsTAAAA4N4M9+7dO8zz3HSOHj06HUvr/459PpQ3bLQNi9z7
dxOLSeH6ltvzxsZG9POhvJR3kXzmM58pf4dv1Oy7obvkMr6+X/3qV/1aijZy
8ODBabvC48PjI/0KHp/t4PF1K+rpnTt3znt6x48f92v9Dh06FOzZbGlpyX+n
9bP1euux9PdpHQPGLnuIzJQ3W3DMpGu1V0dZl2Lt88dSrIUOcS0+GY/J9Bw3
pPgNmXd+AqTF9J6g92S9/7eR8nHp9wmpF6n26S7WTQR2RNdfOWnOi9Nck2Jc
qOPDJt24QcNlwfGDJpm2tddee621+efycRf1+NrYu+/IkSML7d1X/qwzZ874
Nf46D/38888PH3/88VrndODAgeELL7zgP0ffafnRRx91yuNra8xM2s9MW5z0
S22GORmAfuGkdN+Y9KVNR49TPm4KHp/+bhC7j2gr+l5DoT+yjJPq9cXjS4/Z
3/c2op4NAAAAQH+oPQdOCCGEkIVyQ8AauURuV3h8eHykX8Hjsx08vnaje9vp
b8K6xk5dvWPHjnlXL2Q/u7y87L+3a2tr/prq7/q6l1/ssreRmbrI5hwb6Xpv
3WdlS4p9V65J9Z2cdXNTinHXhfG5OGFtNADcIvazPv0+ITUz811yjd4pICS6
HtJJsU4rk2L/41yK96+HurdO3Djdr1nHlqvSzLvdB4LjB90m+jinKY9vp5SP
+9RTT1XmhXeb3ezdV/53d/II9L/r3IPuu1eeN95N9D21+m91jnt2fXubHsHK
ykr0dkVMR+eBAKA/OIl/30jC4wv5jkEyV24INIWTal3j8aWF/k5XrpuLUc8G
AAAAoF/Efk4ihBBCUs0NAWvoOqWo7QqPD4+P9Ct4fLaDxxc+6sypq6dr5TS6
Bi/0ejP9Xjrn/DXTdXT62706grHLHjsz9ZSVxj8DKdYfb0mxrvqaFOPcENcj
l+I3Pz3eCWE9PwDMx02J/FxGv09Ivcx8l1yTNwpoFSfFWC6TYn1XLmHv1eoH
6Bh0W4oxqb5HQsenofdbGAiOH8QnpB9bK7E8vvK+emfPnh2+9957fk5a54of
fvjh2uXZae++8p/vxiP44IMP/DzCiRMn/Fzynj17ap/XSy+9NNzc3PRzIC33
v4Q0EScA0BcGEv+eYd7j0985YtdxomniXTCAx5cyOtdTrhedI2HvSwAAAID5
if2MRAghhKSa/03AGjpPdVMitis8Pjw+0q/g8dkOHl+96Bq1c+fOeU/v+PHj
3tUL+W7apaUl/93Tz9brosfS3+fzPI9e9q5G62amHm9Isc44xDXR3/VyKdZC
b0jxmy+/8wHAImxI5Ocy+n1C6mXmu+QavE9Ad9B1lE6ac+M010b5WJr14wYN
lwPHDyZkEtnl64LHt1M+/PBD/3fUx3vxxRcX2ruvnPX19eFHH31Ue05Z/+37
77/v57F1fvnAgQO1zkPfYaTzGDpXovMmIecwYrYnkkycAECf0HdvRB1vWPf4
9Dgx6zfhOIEmcFKtZzy+NBhI8V6lSZ1ov4ErCwAAALA7hqurq0PraBllPG6k
vPbYv39/7Gf9aNF9IqxTbs9bW1uxT6dxKK9tZu5X12r23QCz5DJuV3h8eHyk
X8Hjsx08vp2je9vpmrMzZ8749WfHjh3zrp7M+Qw0T5aXl/33a21tzde9/i6u
77iNXfauZyeHMtA1uTker+gakEyK33UHIQZBAAAdgn6fkAUj1fGDi/h9hm6g
73ZwUvjZ2ShXpBhThlxTPPHjdF/pLSn8uNDrzgaC4wf9Z9rmuurx3Skh9+7T
+eE33nhjeOrUqYX8gsuXL/t/r3Pbzz///PDxxx+vdT76ziOdU9FneH2W1/mW
RfvftvwFYj8z7dU1d3sCACM4Kd03UvP46H/bqWehP2oKJ9V6xuNLg9l3fW5E
PRsAAACAfpKE55Wa15ZaefH4bJOa50V5bYPHBw2Ry7hd4fHh8ZF+BY/PdlL2
+NSZUydM15Jp1AfTd8fLnM8580S/P/o8pHV7+vRp/5ts3TVrKWXiUep1OXny
ZOj9DnVMclGK9cm6T7ELM9QBAOgFyfb7hISKVMcVLuL3GfqBk2LMmUnxvohc
wu7Hqu+V1/nbbSkcudelcORC7h09EBw/6AfTdtU3j6/pvft0f70XXnjBz1Pr
b1yL7N1X/lx9P1Gd81laWvLP+frMr+9PmuedRuV/j0dAQmWmbbqG7k0AYAcn
pfsGHh9pop6F/qgpnFTrGY/PPjoHU66Pi1HPBgAAAKC/JOF5pea1pVZePD7b
pOZ5UV7b4PFBQ+Qybld4fHh8pF/B47Md6x7fTnu3BfTB/Noz/Y7oZ2v96bH0
d9c8z6OXvevROirvediAR3lDinXGG1L8RhtyLTMAQF8x3e8T0kakOt5wEb/P
0H90Tz0nzflxk7ndj6U5R27QcBlw/GA3TNuOBY/vXnv3SYDvWJ29+8r/frKe
Xz28LMuGa2trfo5E50rqnI/OC+i7fDY3N/18wZ36XzwCEiozbdA1cWMCAFM4
Kd038PhIE/Us9EdN4aRaz3h8ttH3KZXrQucp+I0QAAAAoB5JeF6peW2plReP
zzapeV6U1zZ4fNAQuYzbFR4fHh/pV/D4bKfvHt9k37aJC3bs2DG/7kvmfFaZ
J/p+ef0e6Ho0rSP9XXWed8WTIju5lCGuy8GDB2+7LjN/Jws3jAEAMEOv+31C
uhCpjjdcxO8z2EbXlzkp3kmRjXJFirm1TyXcs87EkTsvhSe3KoVbGIqB4PhB
u0zbh2WPb5LycXVORNf463P3K6+8Upkj3m3utXdf+e/ebT2/ztfoXICOOfXZ
XZ/h65yPvu9H5xLmPS4hu8lMe3NN3JgAwBROSvcNPD7SRD0L/VFTOKnWMx6f
XQaj/FZu1YPOo4Sc6wAAAABIjSQ8r9S8ttTKi8dnm9Q8L8prGzw+aIhcxu0K
jw+Pj/QreHy20wePT505dcF0PVpD+7b5dq7PLVoHp0+f9r+d6pqz2GXvSyY+
pV4ffXd+yH0Pd9rv8E7nMfNvs3DDGAAAM3S+3yek65HqeMNF/D5D2jgp3i+f
jXJBinm3mxLuGUnXvOm88LYUntzrUnhyod5fPxAcPwjPtA2k5vHdySP44IMP
hu+//76fn9Z5Y3X0pOb3arJ3X/m/7XY9f57n/t/oOFTnYPS9SXXO5eGHH/bv
cdI5CJ0nYP6G1M1M23IN3ZsAwA5O5uh/8fjIIvUs9EdN4aRaz3h8dtH5gHI9
bEQ9GwAAAID+k4TnlZrXllp58fhsk5rnRXltg8cHDZHLuF3h8eHxkX4Fj892
uuLx7bRnWygPTLO0tLSjD6ZryGJ/x/oSravy3ochfcrJnod6bbIsq31tZj43
CziOAQCwQif6fUL6HKmON1zE7zPAndD3zDtpzpGbzBl/LM14coOGzx/Hzy7T
64zHd+dcvnw52N59oXw6nQPQdyrpnE15HnI30XkfnafQc9F5C30nVOwxA+l+
ZtqRa+72BABGcFKz/8XjI/PWs9AfNYWTaj3j8dlE33NUroOLUc8GAAAAwAZJ
eF6peW2plRePzzapeV6U1zZ4fNAQuYzbFR4fHh/pV/D4bKctj2+yX9vEAdN1
Xrq+SuZ8ppgnExdsbW3Nl0V//2Td1u6zk1MZ4vocPHjwtusT+p35M8fMwg1j
AADMwLidkAUj1fGGi/h9BqiD7qfnpHgffTbKFSnm7D6VcM9mE0/uvBSu3KoU
bmEIBoLjB3dmei3x+HafkHv36TzCyZMnh5ubm36OoU5/q/M5+p4fnUOo6/aF
OhdiNzPtxTV2dwIAKzgJ3P/i8RE8vtZwUq1nPD57nJBq+XWuYH/UMwIAAACw
QRKeV2peW2rlxeOzTWqeF+W1DR4fNEQu43aFx4fHR/oVPD7bCenx6RorXROl
/lfo/dom0faozxd6rvqu9iZcsBQy8Sr1Oul6tpD7H+6072Fb5Zo5lyzcMAYA
wAyM2wlZMFIdb7iI32eAJnBSrH3LpHiPfT7KTQn3TPdbKeabt6Vw5V6XwpUL
sbZuIDh+qTO9Xnh8YRJy7z6dc1hk777yZ/3Jn/yJn3vQ9wXVORedq9J5Cz0X
nRvJ8zz6+ILEyUzbcA3dmwDADk5a6H/x+NIKHl9rOKnWMx6fLQZSzDdMyq7v
Kgr1PiEAAACA1EnC80rNa0utvHh8tknN86K8tsHjg4bIZdyu8Pjw+Ei/gsdn
O7v1+Hbaqy2U/6VZWlra0QNjTdXuo3VW3gMxpFc52ftQr5G+H78r12jmPLOA
4xgAACswbidkwUh1vOEifp8B2kbXwDlpzpObzEV/LOFduUHD547j1w2m1wSP
r7mUj7uoT6eZd7+88r8pewQ6F6H/X8e2+nu0zlfUOY9FPUPSz8y0A9fEjQkA
TOEkQv+Lx2c7eHyt4aRaz3h8ttBn8nLZN6KeDQAAAIAtkvC8UvPaUisvHp9t
UvO8KK9t8PigIXIZtys8Pjw+0q/g8dnOrMc32adt4n7pGiZdUyVzjv3nycQB
W1tb88fU3yl1L7/Ybb2v2cmtDHGddB3e7HXq+jq2mTJk4YYxAABmYNxOyIKR
6njDRfw+A3QJ3U/PSbFWLhvlihRzgfoO/FDPkhNX7rwUvtyqhHm//kBw/Kww
rXc8vnY8vp18utOnT/u5ifJ84m6zk1N3p+PeKSHORd81pXMseh46T8bclb3M
XHPXxI0JAEzhJEL/i8dnO3h8reGkWs94fHa4INVyX4x6NgAAAAD2SMLzSs1r
S628eHy2Sc3zory2weODhshl3K7w+PD4SL+Cx2cvm//+Pw1/9Jd/N/zm6Ho+
eODRRp4BtN3oc4DeE3TdVB8csC5n4lfq2jF9T33IfRB32v8wdnnrZqZsWbhh
DACAGRi3E7JgpDrecBG/zwB9wo1yQooxuq6xy0e5KeGeQX8rxTz2thS+3OtS
+HL7FzzvgeD49Ylp3eLxte/x3Snqvulcg449F927b5LvfOc7d927727nkmWZ
f1+Rnot6enWOP+8egqT7mbm2rpE7EwBYwkmE/hePz3bw+FrDSbWe8fhsoPMM
5TLr8/qi8wAAAAAAUCUJzys1ry218uLx2SY1z4vy2gaPDxoil3G7wuPD4yP9
Ch5fP6Oe3g9+9mvv6j3z8reHX37y+eGDBx4LNsbXtU47+V/6/vXYbbav0bor
74Wo68JWVlaCXK/JHoh6rXTNmtVrNVPuLOhIBgDABozbCVkwUh1vuIjfZwAr
6J56Tppz5SZz3B9LWF9u0PB54/jtnmn94fF1x+PbKU3v3bebc9G/H8Iz1Pkb
LYueh87tWJxzsZiZ6+gaujcBgB2cROh/8fhsB4+vNZxU6xmPr/8MpHinz6S8
n0oxvwAAAAAAYUnC80rNa0utvHh8tknN86K8tsHjg4bIZdyu8Pjw+Ei/gsfX
zfz8b/7Bu3on3/uld/WefP4b3tWTXY7V75aJ+6XvKdfvtv6eqO8uj90m+x5d
z6VrxHRtl67xUl8vxPXStWaz1yu1PRBn6iQLOZABADAC43ZCFoxUxxsu4vcZ
IAX0PfpulA0pxvdXpJhj1PV5oZ59J77ceSmcuVVZfO3fQHD8YjCtIzy+bnt8
d0rIvfsW2TNv4hnqeehv3Do/VuccFnUMCeM6AOgcTiL0v3h8toPH1xpOqvWM
x9d/9Lm4XN6NqGcDAAAAYJckPK/UvLbUyovHZ5vUPC/Kaxs8PmiIXMbtCo8P
j4/0K3h88bL57/+Td/XU09Oop/elx/8w6Fj9/r2fn/7v559/Pkn3q4loHeo6
MV2rpevGdP2Yrt8Kcc122gcxdnm7kpm6ysINYwAAzMC4nZAFI9Xxhov4fQaA
4jt4Qoqx/wUp5h9vSrhnZn23v86Pb0vhzL0uhTO3f4FzHgiOX1NM6wGPr58e
306ZOHUS4PuxqFcXYg/BpaUlP0ek53DmzBnelxU5M9fHNXFjAgBTOInQ/+Lx
2Q4eX2s4qdYzHl+/0ef/clkvRj0bAAAAANsk4Xml5rWlVl48Ptuk5nlRXtvg
8UFD5DJuV3h8eHykX8Hjazbq6f3gZ7/2nt4zL3/bu3oPHngs2Fj8/j2fH33m
c8NnXnrLX7/v/+zD4bt/+Zvh2d/8oz++/hnf33rRtWTq6um6K11/peuwVlZW
glw3fde7PkfpNcmyzP+Wq8eLXeauZ6Yes4DjGAAAK9DvE7JgpDrecBG/zwBw
d3RPPSfN+XKTufOPJZwzN2j4nK07ftOy4vHZ8fh26n/1uF3Zu0/PQ+dt1tbW
/Hmop9f2ORDGdQDQGk4i9L94fLaDx9caTqr1jMfXX/RdPuVy6jPzIu/aAQAA
AIC7k4TnlZrXllp58fhsk5rnRXltg8cHDZHLuF3h8eHxkX4Fj2+x/Pxv/sG7
eiff+6V39Z58/hve1ZNdjqnvli89fsT7eKuvf99fI/X0dC+/ec4Pj+/e0fVT
ujZMXT1957qurQpx3XSNmX6/dK2Xvs+dvRAXz0wdZ+GGMQAAZqDfJ2TBSHW8
4SJ+nwGgPrrGz42yIcVzwxUp5i4/lXDP6hNn7rwU3tyqFG5hXQaC43cvpuXB
47Pv8e30dyZ79y26Z55mkb379O+GcAz1XVFaDj0HnZvi/U6M6wAgOk4i9L94
fLaDx9caTqr1jMfXTwaj/FZulVGf4Rd5zgYAAACAe5OE55Wa15ZaefH4bJOa
50V5bYPHBw2Ry7hd4fHh8ZF+BY/v3lFnTl099fQ06ul96fE/DDqmVt/uyee+
7q/BiR9ueVdPHcFFzx2Pr4i+P13XROnaKH3/ubp6umZr0eum72HX75Cuu9L6
1XVceqzY5bWamfrPAo5jAACsQL9PyIKR6njDRfw+A0BzOCne8Z+NckGKec2b
Eu4ZX9cd6rz7thTe3OtSeHN19xAYCI6fMj1nPL40Pb47pQt7900cQz0H/d18
eXm51vEX8QsJ4zoAWBgnEfpfPD7bweNrDSfVesbj6yf6bFou40bUswEAAABI
gyQ8r9S8ttTKi8dnm9Q8L8prGzw+aIhcxu0Kjw+Pj/QreHxF1NP7wc9+7T29
Z17+tnf1HjzwWLAx8/17Pu+dumdeesvX8/d/9qF39c7+5h8bLVdKHp+umdI1
VrrWStc76dorfbd5iOun66/0uUfrMMsy/9sr70lvPzPXJQs4jgEAsEIy/T4h
TUWq4w0X8fsMAHHQd/07ac6Zm8zJfyxhvLlBw+fbJcdvel54fHh890pX9u4L
cQ76Dimd49LjnzlzhvdHMa4DgOZwEqH/xeOzHTy+1nBSrWc8vv6h79gpl+9i
1LMBAAAASIckPK/UvLbUyovHZ5vUPC/Kaxs8PmiIXMbtCo8Pj4/0K6l4fLq3
nbp6J9/7pXf1nnz+G97Vk12Ofe+WLz1+xHtzq69/39elenq6l1/Mclv0+NTV
03VTun5J11HpWqYQ10/f167fh7W1Nb/GSn9f5b3n3crMNcvCDWMAAMxgrt8n
pO1IdbzhIn6fAaB76H56Too9AbJRrkgxJ/qphJtbmHhz56Vw51alcAvrMBBb
jt/02Hh8eHx104W9+/Qc9B1ROv+k56CeXpvHTykzdeaauDEBgCmcROh/8fhs
B4+vNZxU6xmPr1+ckGrZ9Lm17n72AAAAALA7kvC8UvPaUisvHp9tUvO8KK9t
8PigIXIZtys8Pjw+0q9Y8vjUmVNXTz09jXp6X3r8D4OOfdWLe/K5r/u6OvHD
Le/qqSMYu+zWPD5d06RrkNTV0zVJujap7rqmcvQztM3re9C1PnTtFu8x709m
rmcWcBwDAGCFXvb7hHQpUh1vuIjfZwDoH06K9YeZFHsJ5KPclHBzEr+VYj5/
Wwp37nUp3Lk66xsH0j/Hb/r5eHx4fCHThb379O+F8AtXVlZ8GfT4Oq+mZYs9
tmJcBwA9wkmE/hePz3bw+FrDSbWe8fj6w0CKZ91JufQ9OXXfZQMAAAAAuycJ
zys1ry218uLx2SY1z4vy2gaPDxoil3G7wuPD4yP9St88PvX0fvCzX3tP75mX
v+1dvQcPPBZsbHv/ns979+2Zl97y9fH9n33oXb2zv/nH6GW35vHpWiJdU6Tv
Ddf1Rerq6XqjENdxeXnZP6domfUd5/pbaeprlyxk5jpnAccxAABW6Gy/T0hf
ItXxhov4fQYAW+g6RCfNeXOTuf6PZXF3btDwudZ1/KafgceHx9dGYu/dN/EL
9fg6x6VzXXWOXdcttJCZunBz3GcAIG2cROh/8fhsB4+vNZxU6xmPrz/o82G5
XBtRzwYAAAAgPZLwvFLz2lIrLx6fbVLzvCivbfD4oCFyGbcrPD48PtKvdM3j
073t1NU7+d4vvav35PPf8K6e7HKMerd86fEj3m9bff37vszq6elefrHLbtXj
0/VJuk5I1wvpuiFduxTiOur6KW2/a2tr/p3p+ntoSmuRUsxMG8jCDWMAAMwQ
vd8npO+R6njDRfw+A0A66H56Tor1itkoV6SYa9V9CELNhUzcufNS+HOrUm+P
g4HEc/ymfw+PD48vVrqwd1+I4y8tLfn5OT32mTNnvLMYu24Z1wFAB3ASof/F
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
qXpOdXd1d3VXd9XnA1/unTn156mac7q6qut76j+96u59+9vfXnv9ub6ML3/5
y1fXhT//+c/39tnuqo5ffRo9vvGlvp/1+ABORhEDvE7q8R0nenxHU0RzP+vx
DSudX9XHmp6VfmfQEQEAsMokel5T67VNbXv1+MZtaj0v2ztuenyMTBWL72c9
vsNFj09ERE4h0TwXLYd44wEAAMBk3I3aeWh6Vl6fz8tLSR2/L33pS1cdv/Rc
vtTxS8/pq0+TOnb1a8Spb5f+7mtf+9rVtem+O37L3L9///U3vvGN19/61rde
f+c73zna+b4ewXH2sx4fwMkoYoDXST2+40SP72iKaO5nPb7hzN7kVbwdZ3oO
+t0hBwQAwFqT6HlNrdc2te3V4xu3qfW8bO+46fExMlUsvp/1+A4XPT4RETmF
RPNctBzijQcAAACTcnMemjp2y+vD6Xl66c+pS5euS6frp+ma8fd93/f1/jns
z/3cz11dg07dvd/8zd9ce/340B2/L3zhC1e9w7T8Pjt+9XXoERznuooeH8DJ
KGKA10k9vuNEj+9oimjuZz2+4TyP5jjng44GAIBNJtHzmlqvbWrbq8c3blPr
ednecdPjY2SqWHw/6/EdLnp8IiJyConmuWg5xBsPAAAAJuXmPLTe49uUNO2v
/uqvXl2z/oVf+IWr68k/+IM/2Ntns5/97GevrhV/+ctfvro+nT7bSv293/md
3znLjl99OXoEx7muoscHcDKKGOB1Uo/vONHjO5oimvtZj28Yj6M5xotBRwMA
QBeT6HlNrdc2te3V4xu3qfW8bO+46fExMlUsvp/1+A4XPT4RETmFRPNctBzi
jQcAAACTcnMeuk2Pb12++c1vXi3rV37lV66uaadrzT/2Yz/W62e36Tryz/7s
z15du/6bf/NvXvX3Uo9vU8evvowf/dEf7W08mzp+9Wn1CI5zXUWPD+BkFDHA
66Qe33Gix3c0RTT3sx7f8T2I5vhevMmdQUcEAEAXk+h5Ta3XNrXt1eMbt6n1
vGzvuOnxMTJVLL6f9fgOFz0+ERE5hUTzXLQc4o0HAAAAk3JzHtpXj29dvv3t
b1+tp77e9My8z3zmM719rvsTP/ETV9eZv/KVr1xd2079vd/8zd+8uv5cn255
P3/q26X///rXv351bThdK/6pn/qp3saTOn71P6f1dH2On+x+XUWPD+BkFDHA
66Qe33Gix3c0RTT3sx7fcc3e5FW8Hdunb3J3yAEBANDZJHpeU+u1TW179fjG
bWo9L9s7bnp8jEwVi+9nPb7DRY9PREROIdE8Fy2HeOMBAADApNychx6jx7dM
fb2pZ7e8Ppz+/9d+7deurkk/ePDg6nrxD//wDx/k89/79++//uijj66enVdV
Vet5+jE6fuue4ye7X1fR4wM4GUUM8Dqpx3ec6PEdTRHN/azHd1zPozm2+aCj
AQBgG5PoeU2t1za17dXjG7ep9bxs77jp8TEyVSy+n/X4Dhc9PhEROYVE81y0
HOKNBwAAAJNycx56Cj2+dUnP1EvTps5bumadriWnZ/nFms94t03q1L377rud
enU6fqeX+v7T4wM4GUUM8Dqpx3ec6PEdTRHN/azHdzyPozmui0FHAwDAtibR
85par21q26vHN25T63nZ3nHT42Nkqlh8P+vxHS56fCIicgqJ5rloOcQbDwAA
ACbl5jz01Ht86/I7v/M7V8tJnbp0PftnfuZnrq41f+Yzn+nt8+Jlr+7999+/
6talXt1v/dZvtZ7f5x2/vsaQj0XHb/V1FT0+gJNRxACvk3p8x4ke39EU0dzP
enzH8SCaY3rxJncGHREAANuaRM9rar22qW2vHt+4Ta3nZXvHTY+Pkali8f2s
x3e46PGJiMgpJJrnouUQbzwAAACYlJvz0HPu8W1KWsev/dqvNdb7Az/wA719
lvz93//9V726+/fvX3XrPvroo6tuXVVVt873v/nNb3qO3xGuq+jxAZyMIgZ4
ndTjO070+I6miOZ+1uM7vNmbvIq34/n0Te4OOSAAAHYyiZ7X1HptU9tePb5x
m1rPy/aOmx4fI1PF4vtZj+9w0eMTEZFTSDTPRcsh3ngAAAAwKTfnoWPu8S1T
X+/yfv70TL1D9ury/NIv/dLKbl3+HD8dv92vq+jxAZyMIgZ4ndTjO070+I6m
iOZ+1uM7vOfRHM980NEAALCrSfS8ptZrm9r26vGN29R6XrZ33PT4GJkqFt/P
enyHix6fiIicQqJ5LloO8cYDAACASbk5D51qj29d0vP00nRlWV5dN06fGadr
yen5exG7f/Zcz7Jb9/7771/161K3LnUL87Ho+G13XUWPD+BkFDHA66Qe33Gi
x3c0RTT3sx7fYT3OxnIx6GgAANjHJHpeU+u1TW179fjGbWo9L9s7bnp8jEwV
i+9nPb7DRY9PREROIdE8Fy2HeOMBAADApNych+rxbZ+0jI8++ujqmvJXv/rV
q+vM77zzTm+fUae+YOrW3b9//6pfl9aV+nWpX1gfh47f7esqenwAJ6OIAV4n
9fiOEz2+oymiuZ/1+A7nQTaOF29yZ8DxAACwn0n0vKbWa5va9urxjdvUel62
d9z0+BiZKhbfz3p8h4sen4iInEKieS5aDvHGA4Cd3Fvk4Zs8epMPan8HAHDK
bs5D9fj6TXqm3rJbF7H759Trkrp177777tp+3ZQ6fvVx6fEBnIwiBnid1OM7
TvT4jqaI5n7W4zuM2Zu8qo3h0ze5O9BYAADoxyR6XlPrtU1te/X4xm1qPS/b
O256fIxMFYvvZz2+w0WPT0RETiHRPBcth3jjAXDG0j0V9+K6R5fyXhyuR5d+
B/PDN3kSzXs72pK+/klcd/uO8bub03qW+2B2hPXNaut7dIT19W0ex91fd+K8
9xcA43PzvkWP7zjn+2m96Xl66b9lWV5dj06fRadr1On5e7H+vWXnLPt177//
/lXHLvXrUrewPq6xdfzq69bjAzgZRQzwOqnHd5zo8R1NEc39rMd3GM+zMcwH
GgcAAP2ZRM9rar22qW2vHt+4Ta3nZXvHTY+Pkali8f2sx3e46PGJiMgpJJrn
ouUQbzwAzsyyE/Uy1l/fexL9dbRST25Td29VXi3Ge6g+3yxbX3Gg9dTl97ec
k/TvcOz99SzOd38BME43xyU9vuOc73dZb5rmo48+urpW/dWvfvXq+vU777zT
22ffqS+Y+nX379+/6tildaWOXeoXLsdwjh2/+vL1+ABORhEDvE7q8R0nenxH
U0RzP+vx9e9xtv6LAcYAAED/JtHzmlqvbWrbq8c3blPrednecdPjY2SqWHw/
6/EdLnp8IiJyConmuWg5xBsPgDOSnr+3bZ/ugz3WV0R7X/DFm3y4+HpRG1ux
+PuqZZ5XcZj7mspsPYdYx7r1DXGPzT7mcdz99WGc9/4CYJxujkt6fMc53993
vemZeofs16Wkft277767smN3qh2/+jL0+ABORhEDvE7q8R0nenxHU0RzP+vx
9etBtu50vfdQv4cNAIDjmkTPa2q9tqltrx7fuE2t52V7x02Pj5GpYvH9rMd3
uOjxiYjIKSSa56LlEG88AM7EPHa/1jffYX0ftCwn/Y7mWcf503Tlm3yaLePj
HcaySrq3JO81Fj0uP3c32vfvuRhif7X1TgFgaDfHJT2+45zvH3K96Xl6afll
WV5d506fcadr3+n5e9H+3m3rLDt277///lXPLnXsUrdwOYYhO3716fT4AE5G
EQO8TurxHSd6fEdTRHM/6/H1ZxbNa3bp+u3dI64fAIDDmkTPa2q9tqltrx7f
uE2t52V7x02Pj5GpYvH9rMd3uOjxiYjIKSSa56LlEG88AM5AEbev36X7K9Kz
zur3WKT/L+N2d+51bHcvxpNs3iq69/dyd+L28/me7LisfLnP4/Z2Fj0se9X6
Xras75j32Ozj2PsrVqzvXPYXAON2c1zS4zvO+f6QPYK07o8++ujqGvhXv/rV
q+vi77zzTm+fqae+YOrY3b9//6pnl9aVenapX5jWf+iOXz0/94vz13/nN/77
13/3H/4jPT6AYRUxwOukHt9xosd3NEU097MeX3/ya3bzI64bAIDDm0TPa2q9
tqltrx7fuE2t52V7x02Pj5GpYvH9rMd3uOjxiYjIKSSa56LlEG88AE5c2zPU
Xiz+fpXU2cu7fE87rq/M5rvYYcxtLrLlzvdY1sNof87bIe+derxifce8x2ZX
aX+9jOPur3LF+s5hfwEwfjfHJT2+45zvn2qPID1T79Adu9Txe/fdd1ufpXfo
jt+PfP7PvP7JL/7M6194/1dff+U/KXvt+J3C91XoTQCnq4gBXif1+I4TPb6j
KaK5n/X4+pFf47w40noBADieSfS8ptZrm9r26vGN29R6XrZ33PT4GJkqFt/P
enyHix6fiIicQqJ5LloO8cYD4MRdRPO1clOHb+lB3L7mt2m+fJ6LXQa8xkW2
/NmG6dN4773Je2/y6E0+idV9tEPeO1XfL6kf+SJb56nI99eTGGZ/FdHcX0/j
NPcXANN1c1zS4zvO+f459gjS8/TSuMuyvLp+nj47T9fU0/P3Yv37q875whe+
cNXze//99696fqnjl7qFaf2n3vE7he+r0JsATlcRA7xO6vEdJ3p8R1NEcz/r
8e0vv/bb9TozAADnZRI9r6n12qa2vXp84za1npftHTc9PkamisX3sx7f4aLH
JyIip5BonouWQ7zxADhhbc/im20xf943e7DFuqoN0z6M6+sP9eU/X/x93b1a
ksvofv2iyJbfJcWGZW4r3y9pH1bZOk9FEaexv17Wlv9h3H42HwAM7ea4pMd3
nPP9MfYI0jZ99NFHV9fWv/rVr15db3/nnXd6+6w+9QVTx+/+/ftXHb+0rtTz
S/3Cesevr/XV06XjdwrfV6E3AZyuIgZ4ndTjO070+I6miOZ+1uPbzyya1zjT
7966e+B1AgAwjNd37969uo445qRtjMX7W9s7vnz2s589yLXvc8gU/n3r38/z
+Xzw8dhe27tPsterZzseu+FUVLH4fv6Lf/EvXt1LcYz82I/92M3PkR6fiIjI
cRLNc9FyiDceACesjObr5OM95y/XTPu4Nt1lrP5dzKnHlncL8zxZTDvLlpkU
2bTr7hfJp+2SYs3ydvFJbdlPF39XZes8FUUMv7+e1JZdLf6ujNPcXwBM181x
6Vd+5VeOdv25vl49vnEnPVPvkM/SS0kdv3fffbfxd6lz9/A/+83XX/kbj17/
3C8+fP3nfv6vvv6Rz//br3/wnVlv6/3XPze76vmdwvdV6E0Ap6uI2uvVN77x
jasu9qGT97uncPxN98ocY98uk/4tf+mXfsnx6DiKaO5nPb79PM/WNT/w+gAA
GE6v1yFFRESkc34/4LxVMfDPkR6fiIjIcZIdg8tDvbkAOFP5/RWH+h3Js2w9
8xXTPYnu51VpGR/W/lzvIFa1v79YM65ii/UtU2zc2u7q40+/o3rZbayP//WG
Zcze5FGW+ZbjmLcso00Rw+6vB9G+v8rovr8A4BgGvfacosc33aS+QdofZVle
XZcviuLqWn16/t7Q35e7Ro8P4JYiJvb6PFRO5PhZ7PftwgpFNPezHt/u6r+/
LeXigOsCAGB4Q58jiYiITDUvA85besbBoD9HenwiIiLHSXYMLg/27gLg/KQO
VP018sUB15U/i6/Nk7h97pTO3VJ3axbXHcOL2tfSM/te1v78oLaseTbdPqps
TMWey1uaRfO5g/Xx5+vcdozbjLPejVvmw47zdhlL13Fskr5fV+2vMrbbXwBw
aKlvPuj1Zz0+WZW0rz766KOra/Zf/epXr67jv/POO4N+v27K3/t7f2+o60jF
tj/8AEcyixN4fR778ffb3/724Pt4kf94v28XViiiuZ/1+HaTX1tM15jvrJ0D
AIBzN/Q5koiIyFTzMuC8pWuJlzHgz5Een4iIyHGSHYPLQ725ADhD+T0WFwdc
18vaeto6YvXn0qV8Gs2e1rppl9PX5R3F2R5jr7JlFXssq67+LMTH2dfydW6S
tjfvC7yKzffM5N24lKedRr9aFYfZX89i9RjL2G5/AcChlTFwl0+PT3bJb/3W
b13ty69//etX1/TTNf4f+IEfGOz7OOXzn//8UfdBtv5ix9cAgGNI1xIGfb9x
6sff9Izab33rW1f5xje+8fpv/a2/9fqv/JW/8vrdd999/aUvfen1F7/4xdef
+9znrp65l/J93/d9gx7z1mSf37fEakU097Me3/Zm0by2mF6T7h5gPQAAnJbX
d+7ceT129+7du3kvnf5/7Ka2vel7OPo9dz+bFEUx9O4/uPr386NHj4YezsHZ
3nH7E3/iT9R/hl/ueOyGqati8XOkxyciInKcRPNctBzmLQDASSpj8z1B773J
o0We1f5/m/sx7mbrmWVfb+uSbVr+ZTZ9W/es/vVii/Hmqh6XtVTWlncZt/t2
+Tq7KLJ5Uj7ZMM+zbPq2sWyriv73V727me4HysdYxvb7CwDG6OZ4qMcnslui
//eyAGNSxBGPv9/5znduengpv/7rv37Vw1vmp3/6p696eMt893d/9+D3wq3K
937mT77+yS/+hZvce+8/ev2X3//Vqzz4G49e/+3f+O2b/Ad/56N8fj2+wyii
uZ/1+LZX/z1lKfMDrAMAgNOjxzdCU9tePb5xm1rPy/aOmx4f9KKKxc+RHp+I
iMhxEs1z0XKYtwAAJyn93vb6a2RR+9rHcbtblyddG3jYYT1lbZ7LDuPocm9S
fZmr7hF5Ufv6qmf7dVHF6v20i7zX2La8fJ1dlXH732mb5xr28fuyq+h/f9W/
F9u2p4zd9hcAjM3N8VCPT2S3RL/vZQHGpogtjr/pOa/1Hl56Jt7Xvva1q6Qe
3s/+7M++/sIXvvD6x3/8x2+eixe3r1WcVLbp433zt3//9ce/+0+3zi9//b/O
16vHdxhFNPezHt928mu6Fz0vHwCA06XHN0JT2149vnGbWs/L9o6bHh/0oorF
z5Een4iIyHESzXPRcpi3AAAnqYrma2QR152p/Pcob8qzWP8Mt7I27UX2tfxZ
fC86jr2+zJTZhu0rOi63TX05+y4rbe/L2rIed1znNur9xZRXcfvfJ+8SpvR1
T1gV/e2vpP79eLFimjJ2318AMCY3x0M9PpHdEv2+lwU4d+n6wb1a/n7UXifv
3r171cNb5nu/93sHvxeta/74H//jV73BlB/6oR96/cUvfvHqs+2U99577/XX
v/7113/tr/21xjypm7dLL0+P72QV0dzPenzdPciWm65Hrrs+DADAuOjxjdDU
tlePb9ym1vOyveOmxwe9qGLxc6THJyIicpxE81y0HOYtAMBJqqL5GpnutVjV
4ft0xd8v83zNep7G6tfhebacecexl7V5VnX/6v3AouNy21TRHOM+y6r/nurL
WH1/S77Obczi9r/XJ7Wvt/07P91yHetU0d/+KqPb/qpPt+3+AoAxuTke6vGJ
7Jbo770swCm4l+VRlme1pGsFfxQncD/ZNkl9vPQsv2VSH+8Xf/EXr5J6eKmP
l94npFRVtdUxIc1TX5ce3+gU0dzPenzdzKJ53TVdh7zb07IBADgPenwjNLXt
1eMbt6n1vGzvuOnxQS+qWPwc6fGJiIgcJ9E8Fy2HeQsAcJKqaL5GfpL9+SJu
34Mxi+vX0rZeX5dny5XZ1y5qX/t0i7Gv6wYmd7Kx7XMvSZUtq9hxOfnvqV43
pnyd+66rfs/X4+zvL6Pf35ddRT/7q9hiOWXst78AYCxujod6fCK7Jfp5LwvQ
h3Sufi+69/BSBr8XbNd813d9100X76d+6qde//zP//xNH6/exdulj7dr9PhG
r4jmftbj6yb//WDznpYLAMD50OMboaltrx7fuE2t52V7x02PD3pRxeLnSI9P
RETkOInmuWg5zFsAgJO06rpdl9+hnO4le9Ey76xl2ipWvw6/rH1tm2fC1X/n
c9tY6z22yy2W26aK5jYWOywj7a/6mMst17mLvK+X1v9h3P436/v3ZVfRz/6q
f2+s6ogulbH//gKAMbg5HurxieyW2P+9LMBS3sN7L5odvI/j9vPwBr+Xa998
93d/91UPb5lf+IVfuPqcOGWoPt6u0eMbvSKa+1mPb7P8euNFD8sEAOD86PGN
0NS2V49v3KbW87K946bHB72oYvFzpMcnIiJynETzXLQc5i0AwEladd2u6Dh/
uh8tfy7fRct0F7H6dXiX1+h5bZ7LFdPU17mpA7ZJFbvtn7r6sw5f7LDOXbV1
LQ99H1gV+++vJ9H8N970vMAy+tlfAHDubo6HenwiuyX2fy8LjMcsmj28hzGB
Hl4tf7TYpn8S1+f66frKRX2aZS/v1Pt4u0aPb/SKaO5nPb716r83bXmNc9M1
OwAAxkmPb4Smtr16fOM2tZ6X7R03PT7oRRWLnyM9PhERkeMkmuei5TBvAQBO
Uts1u4stl5E/3+1VyzTlmuXv8hr9bM3ykjvZcouOy12l2nN5+T7q8vy7fJ27
SuvKu5bLbPP8w21Usd/+yu8J6jJ/Gf3sLwA4dzfHQz0+kd0S+72XBU7LLNb3
8J5Es4eX7oEY/F6qA+T/ietz9WVSH69cJF2zKGrZ1Mkp6sse+/FXj2/0imju
Zz2+1WZxfd13uZx0vbHLNU4AAMZJj2+Epra9enzjNrWel+0dNz0+6EUVi58j
PT4REZHjJJrnouUwbwEATlIVt6/ZbXv/xaxlGUU2Tb3H9jz72rav0XnH60HL
NGXt61WHZW5SxfrtW2cWzXtcyh3XuY953P43SjnU78uuYvf9lca0y/4qo7/9
BQDn7OZ4qMcnslti9/eyQP/SNYp7tXwQzR7eJ9Hs4dXPJ8eY1Jupop8+3q6K
+pjGfvzV4xu9Ipr7WY9vtfx5o/M9lgUAwPnT4xuhqW2vHt+4Ta3nZXvHTY8P
elHF4udIj09EROQ4iea5aDnMWwCAk1TF7Wt2u7jMljHPvj7Lvl6/l6z+9xcb
1pN3vNrGO8um6eP3QlfZOost5q3f4/Jij3Xuo4zb/86HPCZWsfv+eha77a8y
+ttfAHDObo6HenwiuyV2fy8L3HYvy6OYdg9vmVPo4+2qiAkdf/X4Rq+I5n7W
42v3OFvGxY7LAQBgPPT4Rmhq26vHN25T63nZ3nHT44NeVLH4OdLjExEROU6i
eS5aDvMWAOAkVdF8jdymN7VuOWXLNC9qX5+vmXe2Yh3pvrX89z5XLdM9q329
r3uc8jEWHecrsvmexO17FlflZTZv/vWuY7ibLSdP1+Vso9pjHfX50v2cXffX
s+hnfwHAubs5HurxieyWOPz7ZTgn92J9D+9Zlq3vGzrznHMfb1dFTOj4q8c3
ekU097Me320PsvnTNd6xvJ4BALA7Pb4Rmtr26vGN29R6XrZ33PT4oBdVLH6O
9PhERESOk2iei5bDvAUAOEllNF8jqx2XU8Xm19oPa19/Xvv7eTZv+tosm7eI
2x2+tvE+qX3tYvvNWKnK1lt0nK+I22PuK2WH9ad7al5m832a/fll9H/vTRW7
7a+IYfcXAIzBzfFPj09kt0Ts/F4WTk0617tXy3vR7OB9HHp49XPlKqbVx9tV
ERM6/urxjV4Rzf2sx9c0i+ZzUtNr5d0tlwEAwDjp8Y3Q1LZXj2/cptbzsr3j
pscHvahi8XOkxyciInKcRPNctBzmLQDASZpH8zXy1Y7LqbLltN1blO5zq3fI
5rW/v4zb1w6fLVLv7y3vq6tfmyji+l7EZ7W/v9hxO1apr/N1nE+P70k2z/L3
Zeddvk86bk9XVey2vyKG3V8AMAY3xz89PpHdErHze1no2yy26+G1/f6bqUUf
7/CKmNDxV49v9Ipo7mc9vqb8uDLfcn4AAMZLj2+Epra9enzjNrWel+0dNz0+
6EUVi58jPT4REZHjJJrnouUwbwEATtIsbl+z2+U+tnwZxYrpymheV1iuK/0e
57xb1nYvXpruwYbpyh3Gv0kV3bYvdzea9w9uk3x/5F+fb1h3vp/qvy+7bR9u
Wt42qthtfy3n3SWXsd/+AoCxuDke6vGJ7JbY/b0s5GbR7OE9jGYP70k0e3jp
PHnw+3hOJPp4p6uICR1/9fhGr4jmftbje+txNt/FFvMCADB+enwjNLXt1eMb
t6n1vGzvuOnxQS+qWPwc6fGJiIgcJ9E8Fy2HeQsAcLIuo/k6Od9y/rZO2Cr5
s+Dqz4Fbdt7ariM+jeZ9eU9bprmI63skl+tJy37WMu8u8nEVey5vl3VuYxbX
z1Zcd79Xvg9fxdv9t68qjr+/yth9fwHAmNwcD/X4RHZLHP+9LKcrnafeq+WD
0MPbNvp441PEhI6/enyjV0RzP+vxXcuv974Ir9EAADTp8Y3Q1LZXj2/cptbz
sr3jpscHvahi8XOkxyciInKcRPNctBzmLQDAySqj+Tq57fn+s2z+pxumv5tN
/6Tl62W8vadvtmY587h9r1/6/+e15fdxn1MVzTEXPSxz23VuI/83qVqmyTuV
Kc93G+otVRx/f5Wx+/4CgDG5OR7q8Ynsljj+e1kOZ1MPb/n7X5bJfx+KvI0+
HktFTOj4q8c3ekU097Me3+3fD5Ze/+92mA8AgGnR4xuhqW2vHt+4Ta3nZXvH
TY8PelHF4udIj09EROQ4iea5aDnMWwCAkzWL29ftnnSc98OWeR90mG+ezZPu
nezjPr9ZNDt8Fz0sM6miOd6ip+Vus86uymy+dK/NbMW0bc9SLHcYa66K4++v
MnbbXwAwNjfHQz0+kd0Sx38vy2r3sjzK8izL4PfAnEH08dhXERM6/urxjV4R
zf2sx9e8tpoy7zAPAADTo8c3QlPbXj2+cZtaz8v2jpseH/SiisXPkR6fiIjI
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
Ta3nZXvHTY8PzloVi59fPT4REZlaonkuWg51MAY4Yakzl+5zqz/vrWuexX7P
6qt3B9uWn/prT2K3Z+ZVsfr1v76OTcuuL6eP5GPZ5HE2f9u9xPPYretWX+5l
x3nma8ZaZsvcRh/dzVVjqXpeNgDQdHP81+MbX+r7WY8PGMgszqunl6KrBwAA
wFjp8Y3Q1LZXj2/cptbzsr3jpscHZ62Kxc+vHp+IiEwt0TwXLYc6GAOcqNTB
6+O+t/kO63645bqfxXb3vFW1eYvsa6/XfG3dcvpIucU2zLN5n24xbxd9HyPL
bJld3a3NU/UwjnwsfS0TAGh3c/zX4xtf6vtZjw84kFkcr6f3//W4LF09AAAA
pkiPb4Smtr16fOM2tZ6X7R03PT44a1Usfn71+EREZGqJ5rloOdTBGOAEpe7U
qmfwXcbbe9FSLhZ//nTF9CnzLdb9ZM1y1iWNt+i4jqo2Xz7P6zVfyz2O9c+n
u6wt69MN06bMO45/no0zLbvvZ9b1fYwss2V29aw2z0UP48jHUvW0TACg3c3x
X49vfKnvZz0+YEfp+sO9N/kgrnt6n8T1eeCqaxL75F+8yR/1uDxdPQAAAGjS
4xuhqW2vHt+4Ta3nZXvHTY8PzloVi59fPT4REZlaonkuWg51MAY4MakPls7t
89fJ9Ly3uxvmfRCrn1G3ad7k8Yp507rLxfLTfy+ivTf4quN61o2r/rWiw7LW
KWvLqvZc1tI8mmNM+6HLNm+r72NkmS2ziyKb52Fc39/ZNau6jfWxVNttBgCw
pZtjuR7f+FLfz3p8wArH7On94WK5/3ePy9TVAwAAgO70+EZoaturxzduU+t5
2d5x0+ODs1bF4udXj09ERKaWaJ6LlkMdjAFOTBm3r9fNe1jGsw3zFC3zpPvl
VnXUUkfromWe5xvWcyeb/lGW+teeZF8rNiw7V9aWVW05b5t53N7eQ3T4Ivo/
RpbZMjeZxf73dRYdxlJtuyEAwFZujs16fONLfT/r8cFk3Yvj9fT+eVzfi/DP
4rqz19dydfUAAACgH3p8IzS17dXjG7ep9bxs77jp8cFZq2Lx86vHJyIiU0s0
z0XLoQ7GACcmndfXXx+f7rictmfrreucPc+mTffRrXqeWt1Fy3rma6YvWqbv
mrLDeOrK2rzVlvPmnrSMZ77nMtfp+xhZZstcJ/27598Pu6ToMJZql40BADq7
OTbr8Y0v9f2sxwejdW+RR4s8W+QQ9wr9wSL/OK6vTfyfPS5bVw8AAAAO76pT
kLpAY0695/U93/M9r2ez2aiTtnG5vWnbh97/h07Wi5lUpvDvW//5Tf8/9M/X
MX9+05+H3v/+ffvNH/tjf6z+M/xyx2M3MIwqFj+/X/rSl15/7WtfO0o+97nP
3bxu6PGJiMhQiea5aDnUwRjghBRx+1rdgx2XlbpYn2bLerzFeost1vUim3dd
9/BBy7q6ptxiTBH99cWKlrHMV0x7J7r1Hzfp+xhZZstcpa3Dl/7Nig6pryN9
7806jKXaaisAgG3dHNPv379/tOvP9fXq8R3nuooeH5yte3G8nt7/HNfne9Vi
Hb8f1729vpavqwcAAADDOsT1BBEREdmclwGckyoGft3Q4xMRkaGSHZPKQx5w
Ac5EEbffs+/TCbvIllWtmK7sON0q87g97lXq67pcrKue+jJeZF+bbzmu+rqq
Leetu1NbTuqnrXuu4Sdv8upNPo797lfs+xhZxuZ/n7Rdbc/he9Jh+WkfvarN
s+6+6vpYqg7LBgB2N/RnVnp8R7quoscHJymdJ92L4/X0qrju6qVzuN9b/Pd5
9PO89fw8vQxdPQAAADg1g18PFhERmWheBnBO0nMqBn3d0OMTEZGhkh2TyoMe
cQHOwzxuv2ffx4fZsp6vmK7KpptvuZ4iuo+7vq62e2/ryyhavp66Zs865mVt
Wa+2mG/est507pbuV1zXqyxi/X7Mv75O38fIcsO659Hs4aXUn+eY9suqbc+f
4bfueYz5WKquGwAA7GTQa88penzHua6ixweDWPb03ovrjl76fS7p3KnP3lw9
1SKP47qj9/cX/+17nbp6AAAAcJ4Gvx4sIiIywfzLN/mrAZyTIq4/DxvstUOP
T0REhkp2TCoPecAFOBNF3H7P/mCP5c3i+vW1njZVts5iy/XUn1e3zKrOV70r
1raeTeMoWtbVd8qW9d5ds01L9fsmX3QY+zp9HyPLFetO2/RJ9rXU30vfd3ej
2eV7Gbf/Te5Gsy+5qeuYj6XaZWMAgM7KaB7Pjx49vuNcV9Hjg4M4Zk8vvVZX
cf17Ucq47up9ENddvUcHWK+uHgAAAAAAABxPFYvP6vT4RERkqETz3pFyuMMi
wMlInaj89fHZEdZb72G9XoxjG0XcHnebWYdp6l8vOq6r75QbtrdNucPY1+n7
GJmPb2kWzXv7L6P575/uW81/98zHi6+le0rrvcwuHb58LNW2GwIAnAU9viNf
V9Hjg53M4rqn9zCO39NL38O//CZ/Pa7PrXT1AAAAAAAAYLyq0OMTEZGBE837
SsrhDosAJ+Uybt97l+7jmx1wnWVsfmbfOvO4fX/ipumqFdNs6sLN4vZ4+07b
etcpsnE/7TjdOsfq8SUPFn93Ee09vDuLr9Xnf5X9uVox76axVB3nAQDOix7f
ka+r6PFBq1k0e3pP4ror9zKO09Mr3uTfX4xBVw8AAAAAAACmqwo9PhERGTjR
vOekHO6wCHBSlp2qtqR7Dt8bbmgrpfsQu/TYnsbm1/1NPb5Tk7pr9U7bp7G6
z1ZEc/vWOWaPL5l1WMbjaP++rPYYy7bzAgDnQY/vyNdV9PiYqFkcr6d3Gdfn
LxfR7MzdrY1DVw8AAAAAAABoU4Uen4iIDJxo3o9SDndYBDg5F7H5Pr50X2C6
PzD1+mZDDHKhiNtjm6+Ytt53u7timnPq8aW+Xn5vZrFm+iKbdp22f+t1Wbfe
pNxi3bmHcburmeflYrouz+Srj6XaciwAwHnQ4zvydRU9PkYqnTfW+3HH7OnN
o9mXm4WuHgAAAAAAALCbKvT4RERk4ETzXpVyuMMiwEkqY7t7/tJ9jOmexq5d
qj7kz6Jb3nu4Tnre4OM1Xz90j6/I1rGPT2K7Y9k26972ns9N6y63WHf6d039
0PT9lP/7Lu9vTfeVVi1fe7WYb1VPMx9LtWEsAMB50uM78nUVPT7OVN7TS+dY
qR/Xdh5y6J5ehK4eAAAAAAAAcBhV6PGJiMjAieZ9LOVwh0WAkzWLbs/ma0u6
//HhgcfWdj/juv5WF+fS43sSt7e96HHdx+zxzeK6t5fuU113j2q653Tesk3V
iumXnb607Hq3tD6WasO4AYDzpMd35OsqenycqGP29JYdufR7Y8q4/h0yRdzu
yc1CVw8AAAAAAAA4rir0+EREZOBE8x6XcrjDIsDJSx2odP/f09j+HsKXcX3/
Yp/S8truu5z3sOxT7/Glf4u2Dt8he3xVXB8n12XTusuWdbc9TzHPp3F9H+ym
fmb6+sWGZT1tGUu1YbkAwHnS4zvydRU9PgZyb5FH8bYTd+yeXtvz6GehqwcA
AAAAAACcjir0+EREZOBE8/6XcrjDIsDZKeL6dbOK655Vl/sMn/Sw3nR/5Mcr
lj/vYfmRLbOo/f3D2jqKFWPoK6uk7V9372excs72ca/T9zGyXLHu/O9TLuP6
3thl/3P57150WE+adh7tndPl/PV1VttuCABwFvT4jnxdRY+PA1nV0zvEedg2
Pb1kFrp6AAAAAAAAwHmoQo9PREQGTjTvjSmHOywCnL1ZXHenLmJ9r+/xHuso
4vrZfvky0/r6fN5f3g1M/bHlsxzK2liO3eO7G7efKfEi+3OxYdvyca9zrB5f
uic2bcdFXN+b2vbcvU9q86XvgXSP7KzDOpedvuWy28ZSdRo9AHBu9PiOfF1F
j48dHbOnV0XzWeNFrO/pJbPQ1QMAAAAAAADOXxV6fCIiMnCied9MOdxhEWB0
5nH9TLW2+xS37dyleyrrPa78PszZ/sNtWHePZbmYptgwXd89vlnc7vBdtIy3
2LBt+bjXOVaPb5Nlz69tP6Xvi2LPsVQ7zA8AnD49viNfV9Hjo0V6L586cO/F
dQcu/Y6UIXp6m8xCVw8AAAAAAAAYtyr0+EREZOBE856acrjDIsAopXs2L+L2
PYxPt1hG6vzl/bWU9Ay+Pu+bnb3Jw1jdF1zeE1r0sK4iW25Xl7V56s81HHuP
byk9p+8i2p/3mO6zLXYcS7XDWACA06fHd+TrKnp8k7Sqp9dnB66Pnl4yC109
AAAAAAAAYLqq0OMTEZGBE837bcrhDosAo9b2LLVN0v2gT1rmS7lYfH0fy/tN
0/2b6+7d/HSxvrt7rq+uiO32xdLjxXjm2d9PpcdXN4/25z2me3G7fG/Ux1Lt
ORYA4DTp8R35uooe3ygds6eXznWquP69L2W87cIVW4x3Frp6AAAAAAAAAG2q
0OMTEZGBE817ccrhDosAJyHdh5g/66APD+L2/Y/FmunTvaJt91pebpiviw9X
LHtVuqwvTTPfYgxFto5t5mvrE06xx7c0j2afr+uzHutjqXoaCwBwWvT4jnxd
RY/vLM3iuvf2MK57b0/i+D29bX9nynLMunoAAAAAAAAA3VWhxyciIgMnmvfp
lMMdFgFOQhG372Hsw92W5RYrpl3V4St7GstFy7Lr92vmXcZV41yO9Ult2gcd
x1BEv/t4jD2+be/lTcu+jO7PaayPpdpyXQDAedDjO/J1FT2+kzSL9p7eyzjd
nl593Lp6AAAAAAAAAP2oQo9PREQGTjTv4SmHOywCnIQibt/fuMs9l12WW6yY
Nr8389M10+5ini2/iuv7Nme1abbp8b2oTfsquu2vIlvHvsbW40v79dVimnS/
7sdxfd/xrIcxtI2l6nG5AMDp0OM78nUVPb5BzOJ4Pb3LuH7vfBHX76fnsV//
bTl2XT0AAAAAAACAw6tCj09ERAZONO/vKYc7LAKcjNSbq782Pu5hmQ/i9j2V
bc9NK7Np0lj66BHWzeL6vtMHK8YQ2RiKDsur77OXa5a7VGTr2NfYenz5dPWk
/ZvuTd6311dfR7XHcgCA06XHd+TrKnp8B5HOh+pdt0/iuu+2/L0Xp9zTi9DV
AwAAAAAAADgVVejxiYjIwInmvT/lcIdFgJNxEbfvjdy3S5cv87JlmtkB1rur
bXpxyd1snmcbpi+y6fc1th5fuv/2IprPOlyVdA9wuh942++V+liqLecFAM6D
Ht+Rr6vo8e3k3Ht6Ebp6AAAAAAAAAOegCj0+EREZONG8L6gc7rAIcDLyTlrK
q9i9UzdvWV7ZMt1Fh2mOZdseX/JhNt+65xgW2bT7GluPry4927BYzFvF7e+l
el6+ycfR7Xu1Ppaq41gAgPOix3fk6yp6fK2O2dNb9t3SuUgZ188gL2Lz88K7
mIWuHnAc6TXr3iKPFvlg8eehft8TAAAAAADAGFShxyciIgMnmvcMlcMdFgFO
ShntXb4PtlzOo5blfBrt95Hm97H2ca/prnbp8SVPO85bZNPta8w9vlz6vkj3
I6d7ky/j9vdX3ulb9X1UH0u141gAgNOmx3fk6yoT7fHlXZNni/Td0Tt0Ty+Z
ha4enJPUaVu+9swPsPz0evCwto734nA9ullcv/Z0ec1J14+eLMYGAAAAAABA
d1Xo8YmIyMCJ5j0A5XCHRYCTku4DTfdYrrpfKvWj0v1bs2y+9Od7i6+ver5E
2z1fRcs6Hu2Z+a4bn42l2GK+tN8+jc3HlSJbx762Ge826+77GFluse6u7i6W
2/b9etlxLFVPYwEATsvN+wI9vuNcVxljj+/v/MZ/f5VfeP9XrxK333P2mSoO
29NLZqGrB2NxEf2f187i+rmhm3p06fWjr2d9PtmwvnV5Gfv1+e7use5drhsd
Svq3GMN2AAAAAAAAh1XF4rMBPT4RERkq0fysuhzusAhwctI9QBfR3/2cqd9W
rFhX2eN6+riHbZ/7mNK9tp8u/rtKka1jX9uMd5t1932MLLdY9y5m0XxOX9lx
LNUBxgIADO/mfYce33Guq5xbj++bv/37t3p6P/nFn7lKtJ9j9HGOklIuUsRh
ehOz0NWDsUvXbOq/P6nqYZkfxHavBWn9+zyf71Hc/h1Q6XrKRbztMc8W0xaL
lNH+e3yex26vQw9alrVtih3W27cixrEdAAAAAADAYVWx+GxAj09ERIZKND+r
Loc7LAKcrHk0nzG36/2q6+7terzn8letc1f73se06XfSF9k69rXNeLdZd9/H
yHKLde+riPX38NXHUh14LADAMG7ed+jxHee6yqn1+JY9vb/+n/+3Vx29e+/9
9auO3o98/s/0fe5Rf1+ZUsZhe3rJLHT1YMrK6O8aSPIkdnut2KXLl66Z5M/8
S9ed5lssI63zomUs636nUpsydtvufa8b9S29To9hOwAAAAAAgMOqYvHZgB6f
iIgMlWh+Vl0Od1gEOGnpHqv5mzyN7vf/LH+HetFh+dUWy93mHtpdHfo+piJb
x77WjXce1/f1LpPfm/doTerTPdswbT3zFeMss2XeGzD1/VCtGC8AcN5u3nfo
8R3nusqxe3zH7Ol972f+5Jtl/4X87/9BHLb3MAtdPeC2efR7DaTtdytVi/XM
atMVcbs7l/Jyi3Wl60v561gZm38f0ippTJfZ8oot5q9q813G2x72NpltO+gD
uIjb+3TbzA4/TAAAAAAAYGBV6PGJiMjAidufbwOwWRHX93mWizyt/f88tv9d
7Kdm1/u/usrvkdvXuvFWcfseu0OnWjHOcoCx7DNeAOC83Rzv9fiOc12l7x7f
3/2H/+joPb0v/oV/7/VffrOuB3/j0dX2fOO/+r3GmLL5Puzh+3QWunpAN7O4
/Ry7fc9rH7Qsa9Nr23yHeZby17f5tgNukTqAL2rL3OYZgS9j/314Cqpovu4D
AAAAAAC0qWLxmYIen4iIDJVo3jdQDndYBOCE1I8NxY7LSPOle8eetaTvDtm6
8VZx+/66oXpx5QBj2We8AMB5uzne6/Ed57rKtj2+ZU/v/V/9L696en/u3/2r
Vz29P/XDP9r7e76uPb1NyZbbtbcyC109YDuph7Z83fg4Nr9mVDuu52W2nLLj
fPnvJ3reYZ4n2Tx9/g6ovMvXZTx3YrdtP0X17bgYdigAAAAAAMAJq2LxmYIe
n4iIDJUYz2f1APSnfmwoelrOqvTxDI9140331lVHzuMV4yyzsR57XPVcZuMA
AMZHj+/I11XyHt8xe3p/6of+zaue3p/7+f9wr57eHj2+WejqAf2pYrvXiGqH
dczj9utMV3kH7vWG6fPn/q27FjKL9u5iel0tsjHcW+TuYr5trrcU2fQPNkx/
qtK2932dCQAAAAAAGKcqFp8pfOlLX3r9ta99TURE5OiJ5mfc5XCHRQBOSF89
vvrvgm/Lqr7btvoa76GV0f0ev0Mra+OoBh0JAHAoN+877t+/P/j1h7Gmvp//
5A+88/qz/9oPvf6u7/1M7z297/qez7z+7J0fev2n3vnx1//Gj/87r/+tP/3n
X//kT/+l13/6Z+6//rPv/vLRko3rD0JXDziMKg7f43uWLWPbHlt+zaNYM+3L
2nRPV0yTenkfx+ZtnS+mn9f+7mLxd2Xt715tGP+H2XJnG6Y/VXlHshh0NAAA
AAAAwCmroufP8kVERPZMGQBwfTxYZrbHctLvRC9WpE9l9DPeQyuiOdYhFfF2
HPMBxwEAHM7Q1xhE2qKrB3RRxXavLdWWy8+fp3e5/5BXmmfrmq0Yzza96Fk2
/YPacl63/H2bi2zaPhVx/WzWerbtSebzz1dMV0ZzO+5sO1gAAAAAAGAy0u9b
HPozcxERkXrmAQAAAIzB0NcYZLrR1QMOrYjm60615fz5M9we9zi23Mvaei5a
vt7W4fs0rl9Di8XX03ir2tefZdPX1T9/blvfUn151Rbb00Ua82U0x5ieDzjr
OH8Zt48td1dMW9WmudxptAAAAAAAwFQUcf159tCfqYuIiKSkz/f9rloAAAAY
h9SfuozhrzfI+PKv3uT/DV09YDhFNF+Xqi3nv8jm3/ZZcV3NsvXMWqZ5lk3z
YsV0SRW3X5OfZtPMa197vmZs9WWs6jGu6s51cbdlrM86zFe0zPfhmulfxup9
sXSv04gBAAAAAAAAAAAAAAAAWCpivx5fFev7den33T18k0dv8uRNPln8/wct
067zYW0dly1fz58L+CLW/669WdzuuM2zaYrs623yjt1yGWmb815hvYP3wYbx
5cqW5azr5KVlv8ymX9XNW05fn7Zc/P17cf1v9qqn7QAAAAAAAAAAAAAAAACY
miL26/HlXbGlWVz3vzY9l/TZYgybVLV52p55l4+jy/Pv6sts6yDOon3b6vL+
YOrWPY/N252SunEfdBjnqvG+ahnzUr7vL2N9367Ipp9vuR2PttgOAAAAAAAA
AAAAAAAAgCkpYr8eX94VS1K3re35beuyqQdW75Q92LANZcexV7V5XrR8PX9G
XZsyttvOtjzpON40nk+zeZ+3TDdvWcemXmP9eYfLbt622/EsPJsPAAAAAAAA
AAAAAAAAIFdEfz2+NO/dWN3zulzztVXP2WtbT5F97Wn29a5dsqo2T9ny9SJb
7qZl1JP6do8Xyy0W/72I2z28bbt8+Zjysaf9n3fwPuyw3Is123HRsh2XK6b/
pON2AAAAAAAAAAAAAAAAAExFEbv3+PJ507Ph6h2y1AGbx+1eXeqaXUR7Dyx/
1t7Suh5ffZ0XW4y/Pl/b8+rmta+3Pa8veRm3t6Fcs847sfoZfqu2Pfe4Zd7l
+J9nf/+04zKrlmU+jvWdyNQPbOsllh3XCQAAAAAAAAAAAAAAADAFRfTX46sn
9d42PRcvdc/yHtjLFdO2ddaSWfa1ecex158beLlimovaNBctX7+TrfvTaO8D
tini9j5bte1tXmTzpv5e3u+7jO7PJszHMu84X9u/4ast1gsAAAAAAAAAAAAA
AAAwdkX03+O7jO49rgct889bplv1PL58DEV0c1Gb52LFNPXn9bU9K+/OYn0p
ZXTv8C19GLe3vesz+WbR/iy8VX3HTYp4ux1dx7DU9d8QAAAAAAAAAAAAAAAA
YIqK6L/HN99yDFU2/9OWaS6jvauXd8i69Adnsbk7V1/upx2WuavLbCyPt5i3
rT+3zIe9jnKzKlv/xZHXDwAAAAAAAAAAAAAAAHCqiui3x7dL522eLeNVyzRP
a18v18xbdFjfRTZPm2e1r887LHNXj2P3/d82f8qLHsfXVf5swbZ/QwAAAAAA
AAAAAAAAAIApKmK/HlneIWt7lt4md1uWkz9Xr94Te177+yKbb75hXfkz7KqW
aea1r19224SdFbFf/63eN9z0jMFDKlrGAAAAAAAAAAAAAAAAAED/Pb5yx3Hk
yymyr+ddv9ni7+9kf/9yzTrSMl5tGO+sNs2ni3kOqYjd+2/5M/DyPmDehTyk
/N9Bjw8AAAAAAAAAAAAAAADgWhH79fguY30vrqtNPb7kxYr1VNm86Rl1eYft
Ydzu8OXLSfM8r31tvuO2bKNoGVMXbc8w/DRu74dj6fJMRQAAAAAAAAAAAAAA
AIApKmK/Ht/TbP7HO4yh7VlubR2wB7Wvp07ebPH3bR2yZY8t5WXt71IX8LL2
50/e5F7c7vnNO4z7XpZd1Ldp2cXbJO8bLvd7Ebf3wYcdltfHdrStGwAAAAAA
AAAAAAAAAID9e3wf7jl/sk2XrYpmB29pHrd7ZHlShy914B6vmeYy2p8F2KaP
3lo+lmqHeS7jbe+xbdvublhe/hy/Wffh38i/Dy53WAYAAAAAAAAAAAAAAADA
GBWxXw+v7Vl4bc/SW+diizEU2bT1582lPuBly3hST62sTXenZbrLxTTLsaft
Wj7Pb9UzBvP+24M1416l/qzA19k42+Sdx7yn17Ztz2P9v0mVTT/fZgMWnmXL
uNhhGQAAAAAAAAAAAAAAAABjVMT+z9OrYrsuWt3sTV7Fdj2ycsP0DxbTlIv/
b+uwpb8rFvMW2dfuZmNa9Ty7i2wczzaMOzeP25282Zrp78TtfVW2TFe0LHdV
FzHi9jP8XnbdgDXrK7ZcBgAAAAAAAAAAAAAAAMBYFbF/j28et3tcXZ9Nlz/H
LT3jrsvz/C6y+T7YZsBrFNHsys03TJtvd9lxPXlXsMsz7PJ99WLNtHk3b92/
SdszFZ902IakrVtYdZwXAAAAAAAAtnFvkfTZ4KNF3lv8XZfPGAEAAAAAjiVd
s1xe03xUy/LvAJieIvrpYFVxuwu2rls3e5NPWub5sOP60jHtaTbvJ7H+eXab
lpePZ95hviraO3DrPidMfbq8+5b6i6ue+5d82LKeddOn9V9m079aM66LluV/
smE7ipbt2DQuAAAAAAAAzlv6LCh155b3nKTPBA/Vo7uzWFf6/K3tc6k8zxbj
OcRYZnG9nQ/jersfxmG2e3lvz7KruFzPrOf1HNosmvvrUN8n+f5armfW83oA
AAAAOJxZvL3eOD/A8uvXqerX3A5hFtfXqNq6EnleLaZ7eKCx5Opdwj6la8Zt
1zTP/XevHWp/zWKc+wvopoh+enyzuO6i5ceWl2/ycbz9vCS9zqz6nO3pDutt
e+7cx9H9c5k7izHVx5O2Y95x/lm0b3da3pN425dfHveft0ybsu75hW3P7is7
jK1oWc+zFdOm/fBixdjq27H8THbVdnTtYQIAAAAAAHA+lp+ppc/+NvXoip7W
+bDD+tYlfcY162Ec6z4bW+Z57H+vzcMO63m5GM8p38/RZTvsLwAAAADqyti/
z5CbRbffD9bXdcS2XsI2OfS1rAfZ+vbV9ZpxH9cCh5A6HPYXcAhFNH/uqz2W
lV6r2jptXXKxx3rTMeWyZZnpNSy91qXXsXu1LLtoz1rmeRHbP09un+3u0hnM
P396scXY2nqOq7p2bc/w2yabtgMAAADYTRnX1wfS7y4qelpmug6Qfq/fs0W2
vR7Sh3RN5+NwT+2pm8fb75PHww4FABhIeq+46d6CPB8fYH3pM7L0OVcRb98X
zxb/P4/r3xmaf2b3Knb/DGuX7X4eu33WuKmPlidtV7Hjdh3Kqe+vdb9XFQAA
AIBh1a8rVT0sbx7bXz+a77m+Vc85Sl8r4u11sLuLP6drnVXLPC/jMJ/fX2Tr
2UcR2/cV0+fN53RvwEX0t7/anuvU5drpOe0voLsimj/v1Z7Lm0X78WRV0mdp
fT3D7cPYvU93Gfsde9Nr5MWW66xic3e/rYe3zXF51XP2Vi3jzop1btqOYosx
AQAAANup4u15eNnTMp9E8/z+mNeAZ3HdIXT9+fDmcf37rB7F7te+yuj3MzMA
4LzMY/ffH/2kp/VdRPffh53eV5Zx+3dXbjuWeey2za8X4+/6ed4u92/UM99y
uw4ldeT22Y6p7S8AAAAA3kodgPze9H18HMe9fpR/9r7sR3T9DHwW7T2EXcay
Sv5sudd7LGvesqyuOZd7A/rcX/lzELfJyziP/QVsZxbXn2UtM+9puen15iJW
P99t2S0/xOtKWvfjNete5nIxxj5/9+IsrvdjtWKdLxZj6/JZ1PJzxnp2Gevd
luXMO6x7Vce/vh3FDuMBAAAAtpOuzS7Pyfu4jpF/jrDMsx6W3UW67vA0W/cu
z+Ho27MTzT6q2P/zrrKHZQAA56ntXoV0D0oZzfdus1j9+za3ef+a31/zInZ/
j9j2nvNJx3nbtjvlIq4/G7tTmy5t92XLtK9i8+egd6K9k1bF9X6b1aYtov1e
nlfRveN4KKu6dRdxvR3L/TCL688oL1um7bIdfeyv1+HzTQAAAIBTMo/26z27
yjuBy85AWs+sNl0Rq6+3de03pOmeZfM/3WL+XLrOlj+/Z77jsvLltl1X28Vs
xbKqaF6jW3ft9Fj3JexqFqe1v57vuG6AZKgu8PLZs/UAAAAAnIN0PaV+jXa2
5/Lm2fLK7M9d723uQ77uoX/3Xts9vqeQfVS15VQ7LqPsYRkAwPlJ78vS+7P6
+5IXsf792p24fZ/Jy47rm2fzXWxYV1f5cru83823O/UTiw3zXMTt93Gf7DDP
fMM8RdzuS15smOfQ2vbXpv7mRdze9k337zxumefDDfPcjdv769TvEwIAAACY
glmsfm5eteMy234/18UB5ll6Ettdq+rqIlvurr/rN11ffRTtPbJdP4fOx7bp
muadHeYZShrrB3H4/bXu++Sc9hcAAAAAwBgV8fba7OWey5pH81rv4xV/3+Xe
5r5cZOvedK/zIR2ig9dH9lHVllPtuIyyh2UAAOenjOZ7kk0dvqW2+142PVMv
n+dilwGvUWbLL9ZM+yBuj7/rfTL58/9SZmumz+8Huei4nnnLeoZStIxl3nHe
i5Z5Z2umf5lN+7TjeuYt6xny94cAAAAATE26/ncvrjtSqVf2LNZ/PlrtuJ58
uRcd58uf4feqwzxl7HZNrKv670vr8ozAWVzv44fxdh+v6qPtek1x1rKMsuO8
VTbf0M+Ym0Vzf6X7FE55f73cYf0AAAAAwFvpeuDyWuCzWtLvm3sv+run8G68
vUZbz5O4vh4562k9h7bcjinurzK2v0+1zTya13kvsq/nz7Yo91jXti6ydff1
ewq3lY+hGCj550T7qGrLqXZcRtnDMgCA85Pfs1BsMW/eZys3TF/vZ71YM116
35/el+f346T5P8imXd4bdG8xX5VN33Xs27wHz5+lve69bdEy7WyLdeXzFlvM
26eLbBzVFvOm/ZU/K2/V/tqlH1qXr6fYYl4AAAAA9lPF+n5UnmqHdRTZMtL1
oG3uI8ivH6279pSv6/GaaWdxfQ/C82yeZ3H7GtW9aF7TrI9p3TqSMrbbx7t8
Dp3fU3C5xbxFy/q3ub7Xt7JlPH3vr/xz/8st5t33eigAAAAAcC3dc7rpd3i9
XkzzJHbvp6X11O+FXZe0ntmO6zm0rtux7/560HE9y+vph7o+msZ/L8uzaP5b
5V+vZ9W45tk2rLo3Or9neb7f5mylytZdHHHdS7uuP/27pI5p+vylj++NIhvL
Pqracqodl1H2sAwA4LzMo/l+ZNvfJ5HPf7Fm2rI2XbovZbZiuvSefdO5VHpP
didu9+ni/2fvbqzbxrVGgZ4SUgJLSAfDDm46GHUw6SDsYKYDq4NJB2YHkw7i
DiYdfC9Ytl5gCPwBSdnOZO+1sO4dC3+EFFs6wgHj+uzj08Q45Rhr78V3Ub6n
ntpf01fm32LcOc+jlJ+jWudxLtqPE/X6OHa9XuvsEAAAAIBf0Rht+VLjhjHO
RR+nxvZlXG8uzpV/hz93LtmnWL7Wy/lkH7KfXeKxZR5YNzPWsGKsPfG1pMxF
bI2xPRTthw1zOMoQt1+vsWi/lItZyu/J+NrrBQAAAAA/m7SPtIxprilpD2lL
XlAaJ48Zt4xz2n55h9tzHS37RtM4dxvG2RL3X6PfOJe57zNORZ0U653Kd3wX
17HgTzuvaa3yPMH7Fxo3l193v7JNX7Q74t6QZZ97jDH/+lhjOKAPAODn0rJn
ZY/03inPmxsm6v0Z0++By5L6OGX/necgnid+ftFV+ms1FO3HiXp9Ue/fxnHG
on1fPJ7W9lNRynsWLvlQ6SN/v1u7/2CrIbatV+tYY9H21NgeAAAAgO3G2P+9
95LyfK4jvret6WM+LhfRvt8h9XHO/jvPj3uY+HlpaBhvS3ytFgtsPeO2vJ/f
WDye+ivjka2x6T+K9lNrNsRt1ysq7fvG9uUcxw1zAAAAAIBf0VwOX8qZGp/K
w0Sdlly+qXG+ZeOME3Xeyl7GvevVEv98a+vVz4y15fuMu+LxuRy+i1ou392e
i2rQx23Xd8mW19B91uZ80Dz6Yi57jDH9+lhrOKAPAODnku95+XbDcfLzpNM4
tfeqQ9Tf96b9G91TKevk7/NPWV8finrleH1lnFblXKb66OL6ulr2FpX7kmqf
Gct9MamsPSP7faXtUNTpi8cf1k///xti/ZrvWa+vRdu+eaYAAAAA3Eof++Jy
ZSyrdobXUfIz0MaJOrV9COd4vM53T/PN+0n183hfl/X1V1Fvj3JOLfqd7ZMy
PluebVbbqzAV+6wp71+4Nw742ut1RB8AAAAA8Cv6O65jaykm21Xq9lHPG0vx
y6U9ikOl3ZeYPv8txTC/Rfs4t1ZbrzHqsdkuru8Vcov1Sk5xvV5lDH2vdI1j
1HMVH4rHauWvrK+7uL62tc9tLT7+d0P7PfLn8+sLjXnRGs8fijbpe5P7hnKa
6Lcv+t1jzPoZN/YxHNAHAPDzKPe8jDccK9/P8lfl8XJfRyqnib5Olbq19+tz
7/n62H/tZe7ceabuQ6y7tlI5z4eJerX39emzUrfQf2r3NZbXopxHrc6SoaGP
sai7NSdxKmcUAAAAgNfRx744U5m/tTZu1Kq8J13tXnFlfPAhpvPQzkXdy/f6
ub54fI9yrBblGo8bxq+dHVarU+7LWJO/uOZcslZ71usU88/rGl1lDt2GfgAA
AADgV3KK67jaeUW7c6VdbV/rRRkvXhsHrMVAbxXTXqOPbetVu8/EUrvy/hVr
8txq6zX3vOx1jvbnpXY/w4fv5X/fy28NJdUv9/ymfteedbdVmn++xsONx8vl
19ov1K3tKW8tw0TffVFvjzHrZ9zYx3BAHwDAz6N8nzNU6qT3ip++lz/j8XyC
P5/++7eGccrPMH3l8a9Fndq+mNxY1K99JsrrnCpj9lnZ8t63nPPc+/hTUXfN
eSS19/unmfq1zzD3C2PcFfVT+25iLn3sW6/yWuY+X53ier2Wxqyt17BhngAA
AADcTh/7csTORfu+eDzFiH6Pxxhmin3dP/3/P6ItpnWK5zGzUu08qW6mv/K7
8Vp8rIyj7jmfqvy+usUQ+56jqTn0lTqnSr1hps9aDHDr/Obm2mI4aD5r1gsA
AAAA+CHFf7fG5sai7b8zdU9xHb/rVo5T5sCtOcvsVsp767WcSVa2bV2vtfH5
oWj3tWGOrfI9wN2K+n3U8xO35pyl/s5xva6nnde1JL/ul7xH5Nr4d3qt5Ov8
EMv3SryUfIypPd19UW+PfMxxYx/DAX0AAD+PIaZzxNLelvL9ZlnS43+sGCd/
j1rb81Ke7zys6PO0os3Y2GeLPq7XY+lzRvk55mtMvxdNPy/3o6z5zHSqzGuY
qFv77LCUP7lVXxmrX2hzLuqn19vvE3W7qK+Xe/EBAAAAvC197Mt5Gov23dPP
UxzoLq5jUGWZi8nlzlmbz5XH76Mt1lX2ORVPbO1zSnndLYai7XDQHPqJemXc
dC7WWu55SfHmI2KAR67X+aA59Bv7AQAAAIBfQRf7YmrlWW1zccmhqDc2jNNX
xnkte9ara2g/FPVa8gVr49xC/vw/NNbPvzu43CNj6buJWumf+q7Fvbsd19Z6
HacbjVVa89o5xfX87lb2n+9Ff4jp7w76ov89xqyf9P3Tpw3lfmMf3c65AwCv
4xzX74vS+5b7mH7fWCv/xPxeiSGrO1Ye/xrr3jvl+mIOtc9PY/b4sKLPtbae
+fwurvcZXd53/R0/zggv+758jlm7H+VcaV+uTxfXeZq3vP947T7ia9T28By9
XgAAAAC8nD6273dI8lji5fvV8mzWNWXpe98xqzsUj3VFX7U8v5oha1M77yyK
fvuV/S710/o9dBmTGw6aQz9RL8XxHoq6tZhz7VyyqT73zrXFEMes1xi3uTYA
AAAA+C8q44UPG/p4KPqYug9CmWfVstfyXeyLPx6lj/3r9aXoY+p+Z0NRb2wc
p1yvW+wFzXO+8udz7nkaJ9p08XjNraXL+kivvW8xv65HKO+7ctmT+xKW4t+f
KnPLv9OZex2civpz9zTpY/55bjFOzPclSr9z7gDA6xjj+m96LSfq8p597v3A
XC7fkNUr97T0RT9r33+eirnVjFmdI+8zdxf73g+d4sf77TWl9T351L6X3H3x
eMt5J61q69XyfOSfT9aU4aB5AwAAAHC8Po79/n4uh+9h4uf5975TxqxeGZ8b
KnNY45y1OU/UOeq74/JaW4xF22HjHMqYXj9Tt3YGcL4PIsU8y+d567xq9qzX
cNC8xqKfW+7VAAAAAICf3RDP42nnDX2MsS62V4619my3pIvl+GOKj94X5c+G
MS7378jLUNQp87daruFijG3rNTaOsydeu1a+Vzrfz7r0PKWfn240p9T/Le/H
kYxR/76kv/G4MTNeuu5y73ra01zuHU51ukq/p1j3urzo47jX1xj19XyJ0u+c
OwDwOsZ4/je9fB90jus9KOn9/inqe2D+nhjnnNUZiseGoo+152bk55ucJ+rk
+zr6lf3OSXO7i+vrbnnfnN5Xfq30MVdS/U+Nc63texmeHhuKn9/qHtxT63Vu
6KOP6dzSI9cLAAAAgJfRx7Hf3+exoxTnGuI61tU9/bx2VtRUrtRcbHHMHms5
H2tqX8BFX8xtj/I6W4xF22HjHMp++oX6tXOAL23ui5+PG+c0Zc96DXGb9dra
DwAAAAD8CobYH08biz6m4sWnot7XhjHK+wZOxZTPcR2nXHu/hDJ+mmLh5V7c
IY5fr6k+ymtuWa++aPuwYZ5Luni+VrmlOPEt7g34UvJ7Qz7E89fc/QuMP/V9
QfndzRg/1vl98Xj67uaPrO2fRdvzinn0sfw8rzXG89fS+IJl7RmTAMDbMkY9
Dyq9lzgttH030b72uSHPuRtm5nDknpcyj22v2nkPa9/zXdxV2reUuXse1tT2
vZwqPzvyXoUXU+uVnuO113DEenVHXAwAAAAAh+nj+vvYFlOxoBR36hbalt/3
Xr7zrcWrpr5PLh8bVs47/378/ybGHLLHt5yFPDXH1vjoGNuucamffkWbz0Wb
r/E8vnyJXx+9V2LPeg1xm/Xa2g8AAAAA/AqG2B9PK+OC/US9FI8sY8tTdUv3
RbupXME0xkNRdyp+nZs7Hy03xP71+lr0cZqpW67X2n2qfx8wzyX5mp2Lx7bG
ibfq4vG+FamcbjxW6j+/7jLfsrvx+FOv0T7mn+8uruPn6d9VuUd57T1Z8vH2
Ps/5vMadfQEAv4Yx6nteTivb1z433FfqDdnj5f6T/H3U2vdQa3L08r0de/e8
fIr6Op1jX07at6c++qLu5d7YtfPBW3P5yn0vZbnFPbjTWRf5eeX587A3h+8c
9fUaor5eXxvGBAAAAOD2+ngevxkb29diRiku1K1sX8YWp74XHrPHTzPt+5Xj
DvE8TlaTx0qn9nKsVV5jizGW12eNck9Hv6JNbT9MWW5xLtme9RrimPUaD+oH
AAAAAFhW5jAt5TENRd20R3Lpflhljt3SGWW1+HVtT+5c/WFhTlvVxupm6g/R
vl6naFuvrfLYdRlvXhMnPsXj87KmnBbm0mfjjWsvYKPa/VMesp+dbzz+3PcF
6d/K0utjiOvX4OV1cmqYRx/rnuc1xni55w8A+G8Y4/r9zNjYx6nSR/m+Of8s
Uva/5fPDOWszteclf599Wtlvaeqecq2fdWqf99acD/7uqV7ZtiX3bm7fS8v9
D9dI63U/MdbQ0E9faf8llt+jp2ut5S2eG8YGAAAA4Lb62BeP3Bt7Ss5F+38q
dcaJ/vuibb9ivBS3yuOVtRy9cg9Et6LfOeUatRhj3/pOzaFf2a6vtN0SG22x
Z72GOGa9xqKf08Z+AAAAAIBl5V7HNfspz0WblJv2Ka7juSneW95X7lss74FM
avfXq8WUU9y53N86ruh/q/J6Hla0Ocf29fq/WLderfqYv4Y1ceIhruc6VYas
3Smu77uXz2dcfRXtpu6fkr/e1tz/cY8t3xdcpPq118il3MX671X6WPc8rzHG
yzx/AMB/xxjX72W2nGVc9nEqHu/j+fu8qbZr9mDkfU3tZThlj2/JVUvvQ/+M
+nu9NflkpfKz0kOsf687lcvX8l65r7Q/+jPOp4kxHqL9/Xb5+bj1TJXaenWN
cwAAAADgNvrYt6+gFoNq/V65du5W2cdf2WPn7Od90W5NPHWI5VjVOXt8WNHn
kvL6WuRz2TOfcg59Q9uh0r6MLR9pz3oNRdutuYZ71gsAAAAAWO8Uy/tea1Ic
+Vxpu1Qeom2/Znk/gxQb7Yo6fxV1bnXvuqQWUz+tbFvOc+16bdnLvMY5G6cW
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
7fuY9Lr9FG3/FvpY9zy39nOr0u+YIwDwNp1i33v78vyNLwv103v0qX0vSReP
77eG+HH/val+0ueDvphv+v/52Qtz92E7F3O/1T3byrNQhsb2p7h+X9bN1C+f
k4e4fk6nPhvOPffnov6tzoQu5zU0tu+jbb0AAAAAeDl9PI/bjBv6OBd9/N3Q
ds0ZWKVTUf9UPJ5ilcNT+RDTMbb+qW1faZ/vkSgf36KMj7U6VfroVrYdKm3n
4o5rn5Pa/o+W537OLdZrbR5JbQ9Ot2EOAEca47g9W33s+x3boosf33n9fuOx
AAAAeHu6mL4HX36uWouh6OdhQx8fKvPpVratxU+P2vOa+p5ar3O8rfV6qXN7
1sQwhqivWa0MWbsxrr8X6bO6+c/3KtdwmK39w7lo1x04p7zffmMf6XVwjut9
2S35fH2se56XlGs8HlTKfMV+xxwBgLerfD+zdu/DKa7fc645Z6Qv2uT35duj
i+c5fHM5hV0xhzVnTWx1juv3i2s/U5R7eJbeq5/i+jmZy4Vcu++lPOf8Jdcr
lbVnunTRtl4AAAAAvKw+9sduyj5SOa1se1dp261oNxRt7tZPd1Yfz+NZR92H
rbzGVin2V8aN/1nRrhZzXDoPbM25ZBdDpf8j1uxW67UUQ22N/wK8lDHa93lN
6WPf79gW52ycW36Xtcdvb7QAAAD87Gqxtku8bU8O2Fj0tzV3rpxXv7JdLaa9
ZW9laWq9vjTMreZzHLNeD3HMdbZaE8MYsjrneFyvvORntw1ZuzGuY8B9Vjf/
+R5l7mdLjKSL57Hu+4PmFPF8bfudfaXr+SuuX79r/q33se55XjLE8zU+Sh/H
rhUA8DbVzq5I7726mTZ/VNos3Ysvdyraps8Dv7dN+2o++WeKNJe5953lGcfn
HWMv6eJ6D0cqfyy0S+tR+5w09T6zq9QfFsYYKv2fKvVO8XLrVdvzksqnmH9O
+6ivV3+7qQIAAADQqI9jcpbO0RY/Sj+v7Xdo2UNQjpliqFv3f6T5/Bm3i7mV
17nFUOknreHUGk/t++hmxqjFpvuFeZVn0bacmzblVuuVchTn1uufSpt+4/gA
Rxpj/XdNS/rY/zt2jTKXfMge6+LxfcJLlTnl7/23UgAAAH5mp7j+nJP2IB5x
BthY9Dsc1M9pRZsyfvqt0k+Kj7aeY1OL5aa+h8Z+asr5be3zqH5a1T4rp/VK
+30vuYTDwrz6icfHuP5eJK+b/3yP8uy81hzIoWh/i/MH+4P67OLHdzfDyjZ9
1J/nVmPWx9J5hi36uM1aAQBvT3kGxuX9fXo/l75v+l885pWlvSVfK3XTe/jW
vRLv4zpf6/5prLV+j+v7ep9j+XNJ7Xr3lmFmvNNEm7TGd/G4xr/FjzWu7d9Y
+uxWtlmbV1nb99IVdc4T83kL6/Wpcu0v/dkNAAAAgHX6eB6/GTf2k+J/D3Ed
D0qxyxQ/St+pp/jRp6f/njpXuHV/w6nST+p/bWz03dPcyhjrqXEeS8o5bpHm
WsYOLzG6FMNMsbl8jVvjc11cPy9r8ipr9/xbc6/AOS+5Xun5n1qvrWdTA8dI
/45/eypv8T5uR+vix3eA5d+xMY77rqWP/b9j18i/KyrPmS/ncOsy5yXncdSc
AQAA3rJaTlqK03UH9T8WfQ8H9dMv1O/i+rpOUb9Pwn3DPKbWa+9ZaRdj3Ga9
Trtntk4+Zto/na/V8FRnqPws1088Pj79bJyom/98q/IeJ1vyy8rvX444Sy+K
efUz9dI1pNd0ilutjdN1K+tFHBerOuJ1XtPH+rUCAH5u6f3LObZ9r7Mlhy8f
dyqH8C5+7LfJy2WfQ+08kLXnPtT27ewtw8KYp539z13bUKm/9jlZs+9lKk/u
La+XPS8AAAAAb08fz2M4446+uqjnTa0pW3L4LvqJcb/G83ytvHyK6zNwU3mI
23wHW46zVYodPlT6W1POC33fx/VarH1Ohsp4e+KBR61XF9tfk+cd4wLbpPy1
u5j/DuSfpzotZ1DukecS/nbjsfqY/ns8Zo8NC/10cf13Ly9/xPM1naubypbv
HP8qxjgVj/ex7Xfz1jKnfD8yvlIp/14BAAD8jNLn6BSXLT9rHXk+T7m/dWsc
svzs2C/UL+OneT5WeZ++VNbsnX2J9RqK/s8b+yn3+Pb7p3YlxSFSzOdTPK53
uTZlGZ7aDZWf5fqJx8e4jsPkdfOfb1HuBU57qruNfeXzusTI9r5O1jyfXdTX
Pj03lxjd3nn0Rd9H9NHvnNNL9Q0AvE3l91xLJX02OOI9fB/X52e0lHO0vd+8
xXdyw4px32+4zoeYfx/Wb5xLbljo42dbr9b7gAMAAADwMvp4HssZd/b3Ltri
R+l762HnmBen2J7j9vA0j1vd76kcb4/WM+DWnLc2VNr1jfMaD+jj4rXXa9g5
JtDm91jel1Ur/z61vaX7OO730ZIhG2csHhuzx4aGfo4o5VyWlHsXa+0v3ze1
lvz+Bt8a2s3Z+nfr6PcMfTEXAACAn9E5nn+2OTonLSnvb/Z1Qx+1vLu5eQ5F
3fK+80ltr+/S2Thlv/+V9WqZW4q9tN4HJK1/2ivdP/UzZI+l/j4V5S57fMjG
H+M6dtFndfOft6rdZ3HvPtryNXa3s781MZH0HJX3m6yVlFeYzlXcch5UX/S1
Rbk2R+pj3VoBAP8tXTy+dxyj/v4nvXdP70GOuo92OfbHmbHL98WnaH9/nuoP
Nyh9wxxS3bSGY0yv8Xlln6fKXLYo+0jl3cxje0vfMLf0Wptbr4d4XC/5ewAA
AABvWxfPY0Sng/rt4zE+NHUvtDEe447dQePlLrGrh4mxXyOGNRTlCH08XufS
Gq+J15bzO22YT1fpZ82Z02vmc4Qujlsv4Bjp31vaW9WyT6tW7uM2/3bLfW5H
7wEqDdk45+KxMXtsaOjniDI2XEO5R622r3GPceO85mzdh/X1qU363yO+o+2L
uQAAAPxsurjeU9q9wDiptMQha/fA+zxTv7ynWiq1mHLq96Go9zWmPxenn5d5
Xl3DdazVxb71Ssr4zdx6tRgqc5srqX6/s58hazfGdYyhz+rmP2/RxfVzu/W+
kbn0minj21tj8FH00y/U7eLxdT8XY7+UdO138XivvjX6ov0W+b/p88Y+pvTR
tlYAAEdL7wP7onSvNRkAAAAAgAVdXMc05WoBvK70ezid013b63O5z1raFzQ8
lbQ/7GGi/v899XWk2h69W+dWDdk4Q/HYOPNY6RTz96Yr91rN1U1l7T6z2jnz
/cq2a43xfN5H2DLfIWvzcNA8+ni51xoAAMAtlPfDOiJvacoY15/Z+xXtUjzi
rqFta85fX+n7bqJueX7QS6/XaWXblvVqVTtD6RIXGp7muOaz8lDp57Xy+Gox
ry39TEnxl/L+eKeNfe15TtN1rsnrW5PT18e653lKeb/Io89u7GPfWgEAAAAA
AAAAwGuq7QFLe36W9tl08Xim9tI+rL2mcgxv6XNMX8s481irPo6/ploO3+mg
vnNj1v94UJ9b9nzm1/rn9/JbQ+km+u3j5V5rAAAAt1B+lv4j2j4v1cqUqfN3
Uryhm2jTV+aYylxeXhm/WHPf+TKfcSqvaCzqfIr96zU1t64yp63rNc5ce6v0
PA7xGENI49Xmv+az8pDVOcf1uX55vuCQtRvj2Dy+dD3lmqV419HnCpZ5a1vj
MK0xkTldPK7zXE7f1Bz7WPc8T7nP2j5saL+kj2PXCgAAAAAAAAAAXkptr13a
M9eyp6l29njKreoOmF9tv91L5FaN2ThpH92nrHzNHrsvHjs1jtPHsddUy+Eb
Dui3ZszGGA/qs3Uf1lSO59oyTPTbx7HPCwAAwEtKn+n3fFba8jn8NNMufY6+
z0r5uXVNjlUtV2rNfb5Sfw9Fu1rM4hbr1c/M6zTT7oj1upU1r4chqzNUHu8n
Hn//9Nj7ibpjwzxr8ZFbrlftXoanxj5aYyJrvXuaS57T922mfh/rnuc1bW9x
X8tyjP4GYwAAAAAAAAAAwC2c4/nelzVn2df0cb1f6ePOueV9pnk9xPZ9RK22
7tEbG8fp47hrOlXmc97Z55wxtl/3lJZ9WHex/Xma208YIY8PAAD4ufVxm7y0
Jae4PudnbZk7U6iL65ysufv2lfrKePcLjx9R+oV5pTzEres1xsvn8EUxhylD
VmeoPN4vPD5Vd1w5x7SuL5nDd3GO6+fpj4b2La+drbp4jNfNxez6WPc81+Tn
LX2LY874KvXxMmsFAAAAAAAAAABH+xrP977sOSd7LPr6Z0df74q5faz0fyt7
7lswNo7Vx3HXVM7lPFO32zlWMsb2656ydh/WXVF3eKq/VMr7N0zdu6GP454X
AACAl3aK2+SlrdHF4+fRtflpD7F837L7os2WM4j+qow9PD3Wr5xra+lXzCtd
xzmOXa9bWvN6GLI6Q+XxfuHxqbrjivn9Gddr9pL3LTxXxr9bOX7ra+dW+lj3
PJeGot1w8Lwu+ng7awUAAAAAAAAAAC3KvUV77qFX5kjtyX/6O+vjcsb+eFDf
S/psjG9P4+Yl31v3UDzWmgeZj7X3msasn9NMvY9Pdf6OfXud8vHGHf3klvZh
pX1vf8f16yzljHYr+s/3fs7du6GPl3mtAQAA3EIX6846aS0t0ue3FCcY4vpz
dfo8lj6bvl/ZTzmPrnEuU/30T491E4/tLS25Y0et160dkcd3Wng818e62EMX
z+8Fl3/2f+n7FtZyRtPclp6/W+SSHlHWeF+0eVjZbou+GKu/4VgAAAAAAAAA
AHCkcm/OaUdfXaW/LXvM8nzA/Iz9Mdr3EW0xZGPUcr3yeQwTfdyvLOUes7Xt
avmCaU9fWq+5NU9r+W823rlSZ+1eqDGrN87UazE3drqucr3ynMp/Y/7a77K6
DzG/j6+Pl3mtAQAAwM9kax7fb0//28Xzz/b5eVLvnuq9z+rWznkqlbGOuZjH
SzlV5rMUZ3ntfL2teXzp+SrXf+469+pfcCwAAAAAAAAAADhSuTen9X5ypT62
nz2fdPF878+H7LEx2vYRbfU5G2OoPD4uPB6xbV9USxkrY3axfE+C/Ez4bxP1
32Ie36e4XoN0Len1lT9f6bXzR9FnqnMfz697Kb+0L8YCAAAAtufxfYl6fCP/
fN5N1LmUPOdvbsz0uf/DTN2X0sfjOUKXeU3lIV68dr7e1jy+r0X9YUWbPfpi
vP7G4wEAAAAAAAAAwFHy+5ld8qC23EPvKHm+Vbm/aYy2fURb5fuP+srj+TyG
iT5eI49vyfuijzVz72f6G3fOp2XsfKz0mj0V7c5F2/Q66p76+Fq0XfP67ov+
AAAAgO15fPnP5vLaHir1/u/p50tnRY1PpVuo95Iu5w99ieX5v5XctD7aYiIp
znKJL55vNqsf+ng7awUAAAAAAAAAAC3y+7PluXy/v8JcPmZzSPt/yv1NY7Tt
I9qiK8ao7bHK5zFM9DPcuJwWr+S5dB15PttDTO8fe4t5fGmu6TWR9r11E20/
xvO81Py+jpdrXpuj2sftX2sAAADws9max9fFurhGemzMyuenny3lwMXKOq9l
zdzeSm5aH+0xkRRvWbrf4FH6eDtrBQAAAAAAAAAALbq4viffpfzzvfwRL3OO
eXmvuA+VOmPcPrfqlPU/TtTJ5zHcaB5HS/enW7vH6S3m8SXdivbpdVPm711y
+ta0v+jj9q81AAAAAAAAAAAAAAAA4NeRcp9qeXxlTt9dPN6nb+09zVr8k431
10SdMW6fW5Xfn3BYMY+pOm/JEM/XbViovyWPL+XJ3S+Uqed1y9ilVPcu5l/D
aY6fYl0+Xx+3f60BAAAAAAAAAAAAAAAAv5Y+pu/LN1X+jsf79e3N68tz5x6+
l3cT9cZ4mdyqdD0fY/q68nkMN5rD1ny20qno68uBY4/R9noZDxw7+e17+fN7
+VoZK72Wh+/lPDGX9NpNOalTr7W+qA8AAAAAAAAAAAAAAABwhJTTNER7Pl8q
KZdq7b3Ocn2sz90a423kVuXzGG40xhF5fKe4fp6GA8ceK/3fKo8vvTZT3l56
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
j38nltod+ftxjLb5rh0773fcPr1NY29xyem7/G0dZ+r28TZeawAAAAAAAL+a
tN+hzBHbUv6J486oTt4V/Q8b+5n6PqyPtu+njt4n08d6d0XbvxrarnH0d4ZD
1t/Y0O6Utft8wDwi5PEBAAAAvHUf4vGssL3xtnQ/pdYcrC2x0U8N/fdF29yQ
/Xxs7OeIslZa0/I+VB8a2i/pN85rzpj1NzS0O2ftPh40l6Njr8A+6ff+GPt+
fz7Esb8Hc+XcXks+j2FD+zV/j4/8/ThG23zXjp33O26f3qax9+pi/nvbPt7G
aw0AAAAAAOBX0sf8GdfjUxmeSsqtKs9Hzkvq66hcvqHoe9jYT95H/r1hH23f
T40L5VvW17cV9deu010xzy8r27U4+jvDIZ6/htb6mrU7ap/MGPtfQwAAAADc
ximmY42XGFuKSQ5PJf33w0yblG+2Npcvxee23P8vlbuVY/RZmzKuN2SPjSvm
Oi6UMsdkqf4atRy+o88Y64v+jzBm/Q0r23TFPI6Kc8vjg7cp/Rs/x/PvdpZK
+nt0uvG8xjj+d+LeeQw3GuOl8vhS35+KUv5NLx+/lPx7q68z9WplSj52utfv
b69U/oi38VoDAAAAAAD4VZyi/j3kQzzmUM3td+ni8Xuw2veb/z49fvTchg39
lPf0y/Uzj20xZn2NB/SXlN+hpfXuDuo7d/RekiHa1+JjPH8NtX7fOPV6HWPf
awgAAACA20j75mvxyTGW8yQu+Re19v+sGLuLeg5fyrUb4vE+S338yB2sjbMm
n+1DTMfJhpnHttgbS60pn6NbnDHWF2McYYz2tfg7nr+GWuOTU46OvQLH6+Lx
785QKenn/YvP6PWNcdvvVvK/j0f8fhxjer5D1P+O37pMeY257JkvAAAAAAAA
+02dNZ32nqw9rzqe6o6VftbslZnyqdLf1u8J+6KPT1kp96B8KkrXONaY9TVu
mGupnF/K4TvqDOjS0XtJhmhbiz7qz3lLmZr3mNUZGq8DAAAAgNso9+9f4l8f
G/tJ8bKHSl9LOXb3lbE/zNTvJ8bpFsYZsrpf43n88X7msU8L/dbsjaXmavfh
+xJtseO1+mKcI4zRthZDXD+3R+U/HB17BXgJYxzzN+XyneF9UcrvKPcaY3q+
Q+z/HX+rvwtvqQAAAAAAAHA75R6MVE47+vu8o7+01+Z/38ufUc8t3PM94Wmm
v6XSN441Zm3HDXO9SHth8rOfU7llDl/EvuuuGWL9WnQx/7zvfb7GrM7QfikA
AAAAHKyL63jQnvhXiqc9xHW8qJsZv6y7Zuz3T/PM2y3lC54rY91qP/3eWOpF
us6XyuFL+th33TVjrF+LWk7pkc/X0bFXgJcwxjF/U/J+psq4o//aOEPx2Onp
8ZcuU8q/r68xt/Fp7KP//gIAAAAAAHBtiOvvyFrPuS7V9sp8XWjTug9i2DCv
YcM4W/dUjFnbccNcLz4W85jbw9TFMftnjt5LMsS6tSjvC/ntafw15Zy1e4jp
dRhj32sIAAAAgGPdx7Y8ujnvK32eJ+r+tbLemrb/LNQfK/N663l85Zltczl8
R5w91se+664ZY91anIqxx1gfn8xzHT/PjCGPD/gZjXHM35Qh5v/WpXGO+J5r
jGPm+xLeyt+FPo7/+wsAAAAAAMC1lF9X7sM4wimuv3/rZ+q/RB7fmLV/iPlz
JseitO5ByccaN8z1It9zlObYzdRNz2XKg/sU+77nfI08vjKH71I+rei/3JfV
z9QdY99rCAAAAIDjdHEdD1q6p91a50rfNeW95rqGMfqVY1zk8a/ynjsP2WPf
4jo+2eqoPL78nLFzTMcdu6c6KUb5+47x+li/nmuNsbwWp7h+LtPz9WFF//ka
peduLjb7VvI1AFqc4vH3Zyr9jn7exXQ+9JH3eT3FMfN9CUNWulecRxfP5wIA
AAAAAMDxTtGWa9fiXaXvufv8vUQeX56z2BeP9UX/Nad4PB98Tcn35Pzb0K6W
L/gQ83tkkvK+fWU/Q/bYONNPxPGvh6WxPxVjfnsql/++m+m7zP9b2uc1xr7X
EAAAAADHOcd1XOioffwfir6nYl3l+C36yhhTuoV6Q8zH0JIU+1obZ8zH+trQ
bmrew8y1JX9n4z3E9fM4xrq4XB/r1rPF3NhpnvncL/PP//uPmb5PRd2lvL+j
Y68AAAAAAAAAwM/hc1zvTzjSKZ6f3Ti3h6FfKOfYl8dX5hWW+0j6WN4fMhR1
blH6yrhLez/SteS5bOeFuY8L/b1UHl/KwSvPO//29PP38TyX75+4zk1M67J0
3aUxqz+0XggAAAAAh8pjO2vjOy2GopTxpffF+GNj/31cx7am5HmFXybmujSP
sRjvFmXqOuf0RR+nhbkPDX0dYWrsMr54eW5SvPVU/PzvuI4pf4rl6y7J4wMA
AAAAAACAX1O5R2PufnmvbYh9eXxL+2T6WN4fUs7hpfL4ltxl7dNeoW5h7uNC
fy+Zx1fbI5M//q2o8+npsT+Ln59XzmXM2gxNVwEAAADAkfq4jo2VeXa31sXz
PL9TY/t0f7y1eYB53b8qjw8r+hnjes1eIo9vTorn5Wd11WKv5dyHmf76nfNp
GftjMda5aHcqHk85fynOXLuH32nlXOTxAQAAAAAAAMCvp8yheuv7BobYl8eX
75M5Vx7vY3l/SB/XZ3gfXbrFK3mu3GsyTNQbsjrjQp8vlceXXOY/TLR9F9f7
k/ac0573NTUmAAAAALdXxrWOytl6KSluVcapTjP1/1moN8Ry/O4Ut49PtsrP
GJuLJ46xLi7Xx/GvibmxP8fjWWIfJtqmOPpDzMcnTw1z+Vni8QAAAAAAAADA
cX62fTJD7Mvjy/fJ1PZk9PHzrMVF7X52U4as3rjQ70vm8SXdij4+x/XrNZXa
2eVzxtj+GgIAAADgOGW8Z3zV2bQp70G3FJt7V9TtKnWG+PnWoowxz8XqxlgX
l+uLPo8wN/a7pzKn9nzPxZrnyOMDAAAAAAAAgF/PEOv3mbwFQ+zL48vb1vZl
9HH8/pBbStfwNX7MN50Z3c3UH7K640Lf+Tqk/Sn3C+W00F/L2Ll0jb/H8+us
lfunemuMsf01BAAAAMBxxth3XtNrSOdqfYrr+7Gl2OpcLlhf1K0ZYlsM7bW0
nDGWjLEuLtfHdexvqbw/aOxSF/Xnuyx3sT4nTx4fAAAAAAAAAPx6zvFznXc9
xL48vrSP5sNMu77o/xaGOGa9a+c/fzxw7Lk9KbUyHDh2F485eX9PjJXap2t9
qDyW9tP8GfP7dsaGeQMAAABwO+XZTcOrzqauj+XY2DmW7+eWdPF4HtZp4vEh
1sfQthrjmPVO8bcyt+2oXLo+lte8LP1BYyfpOv6I6fvvnZ/6+FZ57OtT226m
f3l8AAAAAAAAAPDrGePXyuNb0hf938IQ+9e7lsO3Zs9Hy9gvmceX9sWkvL2U
f1fu3crL57i+xlM8nvNdq//1qc//FW3GhnkDAAAAcDutMabX0Md8XCzF6X4/
aKwhpmNoRxlj/3rXcvjWxFPXjt1X+r5lHt9v8Zh7dxfT991LOXvneJ6f9+6p
r4eJNum18Smu8xvl8QEAAAAAAADAr2cMeXy5vuj/FobYt95TOXy3zOM7P7Wd
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
xcaGeB5ry/XxMvG9svQTcx1faT5b5wsAAAAAAAAA8F/Wx/S+kxaneNwPc1+U
/D5wqZx3jJH0Mb/n4y3lxQ2vNJ+t8wUAAACAlzbEj7jVuKOfczze+66MT36N
57Gx044xkqHoL9fH7WN7LXlx4yvNZ+t8AQAAAAAAAAD+y/qY3nfS4n28zB6N
fqG/8RXKaWKuQzbPb680t0v5ls1lmJgvAAAAALy0IY7J4/sYy7HJFCN7t2OM
ZIjpeGqKkY6vUN5PzHXM5vnwSnO7FHl8AAAAAAAAAMCvro9j8viSPFestkfm
487+kz5+nj0fQxyzB+kIaXx5fAAAAAC8NUMcE0NbOmfs4Xv5sKP/iyGOi6fe
2hhvJyb4s8R0AQAAAAAAAABupYvHPRyXskfaK9NXytR50Ft08Xy+3YF9H62P
H/M8veI84mn84an0rzgPAAAAAMj1cVwMrZ8o3c5+yzGGOCaeemuneDsxwSF+
jpguAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/L/24JAAAAAAQND/174wAQAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABMAo9/
1EE=
    "], {{0, 1348.}, {3570., 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{545.80625, Automatic},
  ImageSizeRaw->{3570., 1348.},
  PlotRange->{{0, 3570.}, {0, 1348.}}]], "Input",ImageCache->GraphicsData[\
"CompressedBitmap", "\<\
eJzsnQecVcXZ/4fbtheWpbelw9KbUgWxgyigJioq2MXesCKgoKjYBcVObLEb
7F0ssfeGicaQYmLUfxJjiX3+833mmXPOXRaU5ovvu/v53Lv3nnvOnJlnnuf3
1Jkzfs+jD9j3kD2Pnrb3njVbHbnn4QdM2/uomi0PO9IdSjcyJrO5MY0urzEZ
99ka80NvWxvT8FPDTw0/NfzU8FPDTw0/Nfy0IfzUVj6mO7u3C/lgwpvJ7OXe
bnKvRXpaRg5nT3ZvY92rlXuNdq9hHE2N4r2Iz5u4F982da9O/k7mSPc6Ws83
2U3lfbSeM969LnOvqqhPh/g+neLeRmoDJuX71N69Xedev3avX0Z9Sm/k3i5w
rwI5dTjvJSP1fiPca7j2ie9DdYQ99L6bcXaB9CnN72e4145RXw5N0KrEE6DW
vU13r3Pca1boY853ZHAYpIk7N8i9vRm+Km05toN7Pa/E8adWPuje9nevie71
int96l5PudeT+vkl93pCjx2kd7nGvd52ryUM/U6OFN7h3m4zfvY4zPeH3OsD
92oZRrOrXJ0rUUoy7PnuNcX4qfAdzfJvnHudZPwMDpCjfmA0uUsYrJ+gbKUO
DMK8Guji26rczr297l5N3etu9/rYvX7nXo+513L3+pt7Pa6j/Y17FbnXEB05
56dldAX8dLN73eped+oI/278nKw4acXysfAw9/Yf93rZva5yr3v0+2XaR52r
S5VS8qfHBijhM4lhQqVt9bSL3OuE+Pwiunqw/tZLb1mmt4EkfaUdaQjfQf6u
da9pEaUKOdzTvY7R3sLX1Xp56zAyT/rK7nqLD42f9Kvd6133ese9BmnzRUou
yHSNku2fSjLf62II8gsT/3GbOfoZjn+OfkU9LN5W78ofvb3dvfbSz7Pd62L9
7McpFyEnT8Z0KoANJmmHttGmLgm0XGEei+RjZqx+P1pb9fORRny/cq8j4vbT
C4xnG/nz55U2M557GdGL0Wg8iP3ZeKDgDz443tQ7peAG7FCslyOnveLbljGV
QTZBWuDzYfe613ipGKq9aWHi+fRD3NkPsVhvADa0i7peUKFtLDOelZDfb43n
Ez2ncg/39rV7dTN+sppoP5jvnfQzhFyiQ+Qy2Dt/couSk8sfbDVFPzOEixLD
ZVZ/a/xkQ11QGwldarxw7ZzoBrdc1eymwb/Hw111GmGJPxnFdt/B+qa2kE49
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
jt4ifFU9gP0UuNk34MO2wnRtwg/aAILbLhxTceR78G5Ut6aZ9Evzry2hQ0wD
yopZRVzREDixaAvir4jhsJgYhVONV35YdOBvb22SqSRQrbEdaBA5ntFh78Zf
EX3PPhdaN16rHxzfqQiy36a/cRdmcpyOFme1SdxuOiI7f0nzKX7TSYBjm+b3
qhRBma7nAReAJ5M72nhQBBDRoGP1rhr+oBnYEvvg38arKc2bldBR4nJgLaL+
vH7mGuYX/GVWL4u7sQIxDoiJkQ7ESMXnZ0BHsAIJq1ktWohBasoQMzxnlAzz
DS/M1Qux/ulQEAqYFMBTgzSLwMxQAkAvEfYUXTGF8NAn2jHsXGQRgcEpOD/q
aLPkeLFT0WND9ZbBlWPcIMpBegtsqYXGO/1AHWJ9kw7jbpOH8CPkvRihCu4B
rWI4lCXuwECR6saeek1NHEFWjz3L5QGmIsBUNYcLHNRRgsI3y/cCboK1gVUL
BzGt2Gli6nspzKGontEO8ZmZyEV3zG5h4gzn8+FSFXSYeZ9wcw1v4P4A40Fh
JakMLmP5P6XnBAUUEK5SycbEQm2MJew/uBXKQpwHTB6VvT+TDmkv+auu55gn
ZQVm/SN6iJExt7ON95C5DB4AcoLtsrUeK4rbyFVrj0IACGBYyg+isYoQKz6d
ZXycqKOeBvSGJGSAWr6H2NEKs5fZU7/jImIjaDKF6U6OjRth2QJKYfJ0hnJM
9mV6HiLDjMEyKfHvcwwf1MR1Qr3DyqNNkJCijFLmGG0BQyQk0GEliS6lpFsl
oUfMJfMGDmG6MUHcjPkE2CWksAqoKPc/ISZX6KUmLThcBvsEVU4LU41XeDSL
AGsZgjhWYEq3+FbZtnoMUJypXTQZabdoVoKYjP42bRNGwVFKyFslMefgfHG/
oJgxqofo7QCLK/U4fYDdAWew2098Ad15VakS0AH/7WHp8nEyXOYOOwH9zmd4
7iTtPqGYID1IzTN6PDBWNDv81WWsNAP+a/hVFfnh2tFkUhpIICCEHRuyhMpZ
LRksVj3cjyMC+2BTgwfwACEVZPRE/c5xjFyMiEuVnmgiRAXeIQTdUrt0j1nR
ArpFCQhTkPEh2I8egX/g+hC9qGsBeX7KlOtldyhBU5LcbwpnB5ONI7h7J2gL
yBXO6bYmjv49YWJkY+7wd6A/7EdsRIJyEk0xRSE/OlrbZdQYtlCa4OQpMTXL
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
pyhmetnpfpiegm0p+94owTFxw/KggHPMTUU45ndxlUdfta1zXrlJVLHNXE1h
SsnYO4t/hUA98sgjot4oacM8RIAgP8dvueUWWaLuyCxeAz4MAsP0wxooJLwA
1CUxlBBLgHU5B9pxPj4OU+doJnEJBAe3EiHGdHFsnlKVgZb83e9+Z8+af2ZY
T6A5hKzIUx05Wln06KcXJN0hlAJonH9Z3vRogyCtZoFy65Vyc63cm0AEcAzn
UjUJx/L5zjvvFCiGWzFoiaiPGzdOOBIYD9wK5DP2LbbYQrx1DBx8MI4xJs6D
Y4F6jk2aNElUBhzLThZUacJ6qJ6gamBZeErVUeDIOqtifk5MDH4R0l7QwMRr
zsTy2BiZN2CUe7r/Dn7pSWdhViAQZiUUDc0IHREiAlKhNYzOf+hbUlIijLqj
83ZD6Gv06NFip8DYnFdUVCTnYp/AtAgLTBtgNkQF6mHakp8x0+rTa0nc/Tl0
4JEGpl0jpu0sTAti4osSfiDoCJIylxjDOJvEaWE2mI/463bbbSeMCeNxLjYA
EcLCwkI5P6Dp9ttvn4emLDNhfhAEXMtQH59gzKqfMWPqRuLUHJKeENv64Z8z
Yx68Hhmzg5Ibhw6SU7XdSd7TMj1cw+wOWBkD+7Ue7XI6J1R4QnnmjUoGUrOs
zBEkhSlBTRiYQAtoCqqi7jEJysrKInOAc+kowRgQGEOYBBlJOBZrEM+LDNhc
xL+AbSJC2yxRI0PXzz7Lb9J88SP/dEcXPECljPtsj1u0dDWYecJPx8zqjxBG
eDbw9kM/S2bu6ftcY3wJDC+Tk/f0xeuRwWsSHLDU/XbRRRfZBQsudCbrAned
++Z+u8iZrxy78ILz7QXnn+de57qpu+C8cx1jnX/eufIbU4vzRmTDTbXnu4zM
rFZlcYueK40GyWb50cA38QOPnnzDn8+DdCF+Q1kmhWEEUUmtMv1U5tyv0kQp
6Lc6eRScUb5MkSvhI9lEC8kK6gB7BqZEojDEUTNkGlAzLHdCmjDkoSyGPVFx
ItS4powYKq4kAdI4gR5oDp9CgDIVcow0wxGHH26bteth9z35GrvPrF/Z/dz/
A+ZeZ6fNvd69rrMHnnaD7LDf3nURc2kV4uc3iBaq1WWhU35ykQyxtYU/e5EU
8QNXe/Xq5ajmzA1HeoIHcAnY68RyPUklsM0ue43SWVtS0dSmMjnj97gqdt+r
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
jrNdtjrCdhi1j22z0S9s815b2KoOg21Zi662qKqNLaxobgsrW9qS6hpb3rqn
re4y3DbrtbXdaq+5dsFd79jFT/zL3vyKtUvetvbO31t717vW3uH+L1lm7e1v
WXvbGzZrb33dOoJzyqnXPmc7dupsv/3mm5T0qpKwnP3ggw8kTMduObhshJ9g
MfiJEbPWnDpdRkoVM+4FvzmpDh73zJkz6z584X8rfsKuokcBSddDsVBc65gJ
7FHH/vY/Hj9XKJUMAyGuQbH2L3acaEdNnGYvWfqJw7kL7//A9eriR/4JgNr+
/fr6p8OsI3D0QZ7ytIoTUTlygBTpsatDiMotNT6sDwDyWBfsSuxDdZr5V2N8
KgWfjYoHHG6Cc7ihYC3V+mQW8CHF4e7tiUsV/sdYeiwZcfCSk+LwtGyDsE5B
sgAW6yRTl5bUrYM5SixCdI5U54e4l2xY6lqXEm9d3IwNgpfH4udVwF8uAX8Y
sdyrXN79zpeu1Xec6QLRB60vqPPqLoOljzyiqgjhnRmh3No8n458FF72Z599
pscy9quvvrRdnK/UZugetnbCrJTtsR1w32P7kwTw3CHAL2V7TjzZtJGv3cef
YLtufZTtOHo/227ILrZF761tVaeNbWmLbra6TVfbtlNP27pDd9uxdqDtN2wr
u/kO+9ldD51njzjjBnvatc/Yi+5dbq95+jN70yvfg3cB9+wtr7nPb1p7yq+e
th06drL/+eSTIgU912GJlWMRwxfEs1iojyPH/j7E24khEgcLD9PAcPzTn/4E
YBbp+JPPzvu/AHqQhTSFY+iMhqLwuokEriXohcPcecdJE+zI7fejcx660vJA
0gPm3rBWeOcfLtok79ETf/zjHwGao1RQMAipzpytIBUWO2IQ4u9iEFLjSpRQ
tjxSX7pYryWCSEr0ThPvakGmnyXL1ONjeRObFZgdUAfwULrOscnJOpj1AHi1
ikYgzy677HJqfVhH7NcZABndcB+co1COsNkPYF3zhLPuWmBDjZL1iWtCfh8e
ZBUrJhxVWxIePP2nAreiAG7bneQBbgIAp+DW1HYZd6LdY84Se90zn9rzf/O2
nX35o/bAk6+0O+w7w44ct5utHTTKtu/SR8CtXZfe8n3ENrvaSXufYKfNvsLO
uuwRu/Dud537+4BYbV9/9ZX2pLEYpgQIeWoAIWAWuWOEElUHauh5ePATqhSz
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
1DumO5LTBzV4jG+zvuOlick2f9H5iAKQR1qS3wqHYzZmsWPqASCafEwDmTOr
Qj2HbnKp4Azu/Y9LdyzLjnOU8+1vDbIIkn2RttASwFkQBYpmhc1ZZKEZFfnZ
8q/V1YUu3Qjnt/qMuglJIkRInQG1syQRtXu6j1xoumjwDc6N58iygor4gcyl
cY3NLNeNUBUQSdAPBjMkj3N0Pn0HDHCBfSHewLeFGnK/mo/t87kikAUSKDKK
mIqZEKSTigRiGF6MhdPhi0ddah5XFEyrestTcacfa0xCJ0bxcJAvGHGUOsuE
LVDnGKdYnoNJ4nZR6Y0RANf3eIhrXOqCW3MJDggwsqiL4A3I6zvqPiYCxIbI
4iwml7tuoXZFAG+FS/84f5fKz3VIBdm5RhJ4UMcQiAshDebtasXSNYKaV2CE
jtSA0ivz1mREMii+S0MF6ZyvVnlw+KtF95xX6Y1NKdNmCdxqml5AHlZEJ6C+
hRxep2YrKO/yyBAMKGwHPStQjTl7nTrKOgz5s+BhsWUOg6+nIarB52mUnlMD
MZkPue69lcYSyDZmtMYOIDGw9B6w5uj9OA60LA09+bkRHGE1u1u9wyYEmyBw
I4ox+dvFEZYIi/32cy7dxjNWZIeI0QxYlg7V/1/GDqj/gDUzbe4us9mHY3C/
TbMMT1ur87TToM8AeN7GpZXlHF2GGRyh7sIAcCYrF6LgJ9Q1kOE9uhyx8y5X
mXm+sg6bplRIewP5mm0kJCuX4NxHNDo0xQRdG5888Gk9D4jJ9gmdd4NLkyOI
5DCPe2K15lsqAOLCoo3CN1XfEaxYLaE81hWkFpYs2OzEzEhuppGc1mMkv+F6
m/IgWjegQ8UCoEXdJJqcPqgxStfBkTM0hIixMA7LBxSDse06nf5Vl24qMTvT
R3BqpVPgTNGkzgQih1Usp07Bi/QeKLFgmVwAkq9ozEI5Pntvuk9j0qhx+4rG
7hs6DgUi9Ryne+XOtYsRs5bG8VbXzlGT3810DYvFJ+J5ylNHaWDSmMqzXIwK
q3+HWopsCoKhJJymUTIMtahK19Ls0j8oBkSOVg1EOhABKQLKQRTYScemZbrL
vb+ne7tS6C6jGOv69aZINWzh0m2y+UOA2kyfeRZ+Z8Bl9kzUrvG7Ai04rWJq
LQZTa12lay4uw3ZtpThJxoNUF++XD3eNwgjNtqh7jEubS1WFkqsoSXl9DPbc
+sqxyl+YqWQHl4aexOC9KBmHb+GdqVrS4zyaA3naM+fRxhHqWhye6MzN9qXb
UKwxDenbHrWfaj/Vfqr9VPup9lPtp9pPtZ/W5Sc34v8Df57q/A==\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"ca2772e2-e6ca-4058-980b-ed88926bd130"],

Cell[TextData[{
 "\:56fe\:7247\:6765\:6e90: ",
 Cell[BoxData[
  TemplateBox[{
   "\"\:52a8\:624b\:6df1\:5ea6\:5b66\:4e60: LeNet\"", 
    "https://zh.d2l.ai/chapter_convolutional-neural-networks/lenet.html#img-\
lenet"},
   "HyperlinkURL"]],
  CellChangeTimes->{3.8850824306436996`*^9},ExpressionUUID->
  "fda71c96-9d1b-4084-a76e-d4f84aca5317"]
}], "Text",
 CellChangeTimes->{{3.885082405806952*^9, 
  3.88508243399902*^9}},ExpressionUUID->"0fb81abe-b57c-4a28-a0c1-\
6d41625b5437"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"uninitializedLenet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", "5"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "500", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "->", "enc"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "->", "dec"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8850824451553087`*^9, 3.885082560643692*^9}, {
  3.885082886253634*^9, 3.885082923409213*^9}, {3.8850835214161158`*^9, 
  3.885083530003076*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"5f18ad32-1770-42f0-8a81-e3c6414eb087"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 20|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 800}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {50, 4, 4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{28, 28}], "ColorSpace" -> 
                    "Grayscale", "ColorChannels" -> 1, "Interleaving" -> 
                    False, "MeanImage" -> None, "VarianceImage" -> None, 
                    "DataTransposed" -> False, "Method" -> "Stretch", 
                    "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.2.1"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{0, 1, 
                    Skeleton[7], 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    10, "$Rank" -> 0, "$Version" -> "13.2.1"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]24\[Times]24\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]24\[Times]24\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]4\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8850825634698143`*^9, 3.885083491852681*^9, 
  3.885083531581436*^9},
 CellLabel->
  "Out[144]=",ExpressionUUID->"82b7f0fe-ed5f-4b16-b64c-6a22adfef7d0"]
}, Open  ]],

Cell["\:7136\:540e\:6784\:5efa\:4e00\:4e2a\:7528\:4e8e\:5b66\:4e60\:7684\:7f51\
\:7edc:", "Text",
 CellChangeTimes->{{3.8850829518484163`*^9, 
  3.885082963671118*^9}},ExpressionUUID->"cfbe03ec-1e33-4162-9bda-\
59dbed6ec690"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainingNet", "=", "\[IndentingNewLine]", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetGraph", "[", 
    RowBox[{
     RowBox[{"<|", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<lenet\>\"", "->", "uninitializedLenet"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<loss\>\"", "->", 
        RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}]}]}], 
      "|>"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "->", 
        RowBox[{"\"\<lenet\>\"", "->", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<loss\>\"", ",", "\"\<Input\>\""}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "->", 
        RowBox[{"NetPort", "[", 
         RowBox[{"\"\<loss\>\"", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8850829657177267`*^9, 3.885083091829545*^9}, {
   3.8850833299229593`*^9, 3.885083338547453*^9}, 3.885083617984655*^9},
 CellLabel->
  "In[145]:=",ExpressionUUID->"bc1ea546-0511-4d2e-b2da-107955fcb1cf"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"lenet\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -15.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    
                    Offset[{0, -7}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"loss\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, 
                    StripOnInput -> False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999999}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.679489702911785*^-8}], 
                    InsetBox[
                    SubscriptBox["\"\[DoubleStruckCapitalN]\"", "10"], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999999}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    InsetBox["\"10\"", 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193393399298`*^-7, 
                    5.499999999999999}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794897078907816`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10", "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"index ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 10, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999732051023`,
                     1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10", "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"index ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 10, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], {
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"lenet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["lenet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"CE\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageSize -> {223.0000014737193, 103.49999999999997`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Ports"}], FontWeight -> Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "10", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "lenet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 1, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 20|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 800}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {50, 4, 4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 500}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 10, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 10]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[1, 10]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{28, 28}], "ColorSpace" -> 
                    "Grayscale", "ColorChannels" -> 1, "Interleaving" -> 
                    False, "MeanImage" -> None, "VarianceImage" -> None, 
                    "DataTransposed" -> False, "Method" -> "Stretch", 
                    "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.2.1"|>, "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[1, 10]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "lenet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "lenet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "lenet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "lenet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 6.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.885083095117712*^9, {3.885083339483362*^9, 3.885083356883204*^9}, 
   3.885083494085167*^9, 3.885083624879518*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"8b561d6a-346d-4cd6-9289-d54ba696e260"]
}, Open  ]],

Cell["\<\
\:4e8e\:662f\:5c31\:6784\:5efa\:4e86\:4e00\:4e2a\:7528\:6765\:8bad\:7ec3\:7528\
\:7684\:7f51\:7edc, \:5176\:5927\:610f\:5982\:4e0b: \:8f93\:5165\:7ecf\:8fc7 \
LeNet \:540e\:5e94\:8be5\:5f97\:5230\:7684\:662f\:4e00\:4e2a 0~9 (\:5171 10 \
\:79cd) \:7684\:8f93\:51fa, \:5bf9\:4e8e\:8fd9\:4e2a\:8f93\:51fa, \
\:5206\:522b\:548c\:76ee\:6807 Target \:53bb\:8fdb\:884c\:6bd4\:8f83, \:6bd4\
\:8f83\:51fd\:6570\:662f CrossEntropyLossLayer. \
\:6700\:7ec8\:8ba1\:7b97\:5f97\:5230 Loss \:5373\:504f\:5dee\:503c. \
\>", "Text",
 CellChangeTimes->{{3.885083758484598*^9, 
  3.8850839015418367`*^9}},ExpressionUUID->"a98c01a6-755d-4f58-bcf2-\
2a97722e1ca5"],

Cell["\<\
\:6ce8: LeNet \:7684\:8f93\:51fa\:662f 0~9 \:7684\:6570\:5b57, \:4f46\:662f\
\:7ecf\:8fc7\:7d22\:5f15 (Index) \:540e\:662f\:4ee5 1~10 \:53bb\:548c Target \
\:8fdb\:884c\:6bd4\:8f83\:7684. \:6240\:4ee5\:5728\:9a8c\:8bc1\:7684\:65f6\
\:5019\:8981\:6ce8\:610f\:4e00\:4e0b. \
\>", "Text",
 CellChangeTimes->{{3.885083993501452*^9, 
  3.885084062837764*^9}},ExpressionUUID->"61446db3-9e5e-4503-b528-\
aa43e1a88eef"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Input\>\"", "->", 
      RowBox[{"Keys", "@", "#"}]}], ",", 
     RowBox[{"\"\<Target\>\"", "->", 
      RowBox[{
       RowBox[{"Values", "@", "#"}], "+", "1"}]}]}], "|>"}], "&"}], "@", 
  "\[IndentingNewLine]", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"trainingData", ",", "5"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"trainingNet", "@", "%"}]}], "Input",
 CellChangeTimes->{{3.885083171025825*^9, 3.88508317179145*^9}, {
  3.885084114425438*^9, 3.885084191936727*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"40df066b-cca1-47a3-89ad-750fc071b6b8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Input\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+84JMNI2MIdqlLwkxMTBwzsEm9cmcCAQdsckFMuOQ+rBZkYpJcy4VN
rhOoReryDz4md0w5diYm6Sv/m5iYTqLL/PQCasv7/4OVKfgvutxHoJT35f+1
TEwtGCaeBspd+P89kEnuGYZcBhNT3KeveUxMTRhSv2OZvL7+PwfU/Ald6m83
E1MB2GBWDLnjQA2b/89UYWKqwzASKFf375YcE5PjDwy5QCa+d/PFgeHyAUPq
vz2TwD2gGzXOY0r9n8/EpsbEpDIPi9T/V6ZAx3Bexib1/38wE5PdFuxSVAUA
2x6d6Q==
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9g8PFuHROT6C0sMnv2uDCDwF5MqctMYBlmkesYxpVxgOVE5GajS/0J
YGZm0kxdvvwNpoHlzMyaJ95hd6EEM/NVXK6PZmbuwCJ8DkTcUmRmDnyOQ+Ny
eWYmyZU4JO8mMjAxVeCyczYzM+dSHHI/Lwcxq7zEpfM3D/MJXHJ72XDLlTFj
yO3Kk5CY9/lzqyUbS94vVKl17JDIAcZDAbpJ9cxQOcvqP+hyx0H6xAoL733F
5Q56AABEHbMQ
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x/M4BCDCzbhd1UH//8vZHTHIvVcgzH4/38zxm1Y5G4wqn7+f52T8RWm
1J8UliX//59gxCb3kFH9P0jO8BemtjLGQrCcA6a2p4yCT4DUIkZvDKnfvYz6
ILqMcTKG3CtGxvlA6ps2YyuG3H5GqW8/Lh5MZWTkTkKT+qbLyKamyAgG6GH2
DiLMLc2oOP8Zmtz3UEZGA485z6sYbTC98PXZs59AqoqxDVMOCqoY+3DKOTPe
xaPvEVlyd7y/4pSjCgAATmTE6A==
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9AsIFh9R9cck1MTA245B4yMfHdwCH3w4KJaRoujbFMTLa45PbikTtB
A7lm3HI/bXDLvWNiYlqEQ24ZE5PmIxxy2kxMzTikVgON3ItDLo6JKeYXdqlr
3ExMJ3FoO8eEV04QV+w9lmZKwyFFJwAARqzbbQ==
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}], ",", 
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x9y4IhEw5Ejt44c2Zq8BkMumwkIBECE4lsMfSBhRjBxA13u1353LS1B
kJwBhj6IZpDkC+wO8mFk5MZ0ChjUMzKpb8QudVSEkaMNu9R/GSbGwk/Xr/f8
RBO/2ZZkw87EKKuFxQ9zGBiBAExUfECTWwLxtvTUGxg+//+/AyiVuvEzVods
ZWLiOIfdjTclmJhm4XB/G9AZb3DI2TAy+fzBLgUMEoHnOLSVMzGK4ZD6f0GS
0QaXHKkAAAycrNE=
         "], {{0, 28.}, {28., 0}}, {0, 255},
         ColorFunction->GrayLevel],
        BoxForm`ImageTag[
        "Byte", ColorSpace -> Automatic, Interleaving -> None],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSizeRaw->{28., 28.},
       PlotRange->{{0, 28.}, {0, 28.}}]}], "}"}]}], ",", 
   RowBox[{"\<\"Target\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "6", ",", "5", ",", "2", ",", "8"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8850831722109623`*^9, 3.885084119859095*^9, {3.8850841859338627`*^9, 
   3.885084192365302*^9}},
 CellLabel->
  "Out[155]=",ExpressionUUID->"e4e01f6f-3970-4148-bb5f-01abd7b71f75"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "3.154320240020752`", ",", "3.643721580505371`", ",", "3.0903942584991455`",
    ",", "2.3217904567718506`", ",", "1.3529341220855713`"}], "}"}]], "Output",\

 CellChangeTimes->{
  3.8850831722109623`*^9, 3.885084119859095*^9, {3.8850841859338627`*^9, 
   3.885084192395321*^9}},
 CellLabel->
  "Out[156]=",ExpressionUUID->"d6e6edd3-0d6e-4a8c-9757-e03e0f2934d3"]
}, Open  ]],

Cell["\:53ef\:4ee5\:770b\:5230, \:5728\:672a\:8bad\:7ec3\:7684\:7f51\:7edc\
\:4e0a, \:9884\:6d4b\:7684\:503c\:548c\:9884\:671f\:7684\:504f\:5dee\:503c\
\:6709\:5f88\:5927\:7684\:504f\:5dee. ", "Text",
 CellChangeTimes->{{3.8850842096709347`*^9, 
  3.885084249456492*^9}},ExpressionUUID->"d7673c15-5b7b-4ff5-8368-\
e15f4b32211d"],

Cell["\:4f7f\:7528 NetTrain \:6765\:5728\:6570\:636e\:7684\:57fa\:7840\:4e0a\
\:8fdb\:884c\:8bad\:7ec3. (\:6ce8, \:4f46\:662f\:5728\:6211\:7684\:7535\:8111\
\:4e0a\:4e0d\:77e5\:9053\:4e3a\:4ec0\:4e48\:597d\:50cf\:6709\:70b9\:5c0f\:95ee\
\:9898)", "Text",
 CellChangeTimes->{{3.885084831677105*^9, 
  3.885084868167877*^9}},ExpressionUUID->"7dce6f3d-744a-4143-aad9-\
f3652b18dd07"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"trainingNet", ",", "trainAssoc", ",", "All", ",", 
    RowBox[{"ValidationSet", "->", "testAssoc"}], ",", 
    RowBox[{"MaxTrainingRounds", "->", "5"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.88508431572705*^9, 3.8850843379160643`*^9}, {
  3.885084475944029*^9, 3.8850844805173817`*^9}, {3.8850845197860193`*^9, 
  3.885084543056656*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"f560e97d-de32-450b-bfe5-4db018b98ec0"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   TagBox["NetTrainResultsObject",
    "SummaryHead"], "NonInterpretableSummary"], 
  StyleBox["[", "NonInterpretableSummary"], 
  FrameBox[GridBox[{
     {
      ItemBox[
       FrameBox[
        StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
         StripOnInput->False,
         FontSize->12],
        FrameMargins->{{10, 5}, {-4, 2}},
        FrameStyle->None,
        StripOnInput->False],
       Alignment->{Left, Bottom},
       Background->RGBColor[0.96, 0.96, 0.96],
       Frame->{{False, False}, {True, False}},
       FrameStyle->Opacity[0.1],
       ItemSize->{Automatic, 1},
       StripOnInput->False]},
     {
      ItemBox[
       TagBox[
        FrameBox[
         TagBox[GridBox[{
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["summary"], 
                 TextCell["summary"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batches:"], 
                  TextCell["batches:"]], "4690"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["rounds:"], 
                  TextCell["rounds:"]], "5"}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["time:"], 
                  TextCell["time:"]], 
                 InterpretationBox[
                  Cell["16min"], 
                  TextCell["16min"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["examples/s:"], 
                  TextCell["examples/s:"]], "315"}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["data"], 
                 TextCell["data"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["training examples:"], 
                  TextCell["training examples:"]], "60000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["validation examples:"], 
                  TextCell["validation examples:"]], "10000"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["processed examples:"], 
                  TextCell["processed examples:"]], "300160"}, 
                "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["skipped examples:"], 
                  TextCell["skipped examples:"]], "0"}, "RowWithSeparators"]},
              
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["method"], 
                 TextCell["method"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["ADAM"], 
                  TextCell["ADAM"]], 
                 InterpretationBox[
                  Cell["optimizer"], 
                  TextCell["optimizer"]]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 InterpretationBox[
                  Cell["batch size"], 
                  TextCell["batch size"]], "64"}, "RowWithSeparators"], 
               InterpretationBox[
                Cell["CPU"], 
                TextCell["CPU"]]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["round"], 
                 TextCell["round"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"1.6\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], ShowStringCharacters -> 
                    False], 0.016017962242327835`, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["error:"], 
                    TextCell["error:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                 InterpretationBox[
                  Cell["0.525%"], 
                  TextCell["0.525%"]]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             TemplateBox[{
               TemplateBox[{5}, "Spacer1"], 
               StyleBox[
                InterpretationBox[
                 Cell["validation"], 
                 TextCell["validation"]], 
                GrayLevel[0.4], StripOnInput -> False]},
              "RowDefault"], 
             TemplateBox[{",", "\",\"", 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["loss:"], 
                    TextCell["loss:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                 TagBox[
                  InterpretationBox[
                   StyleBox[
                    RowBox[{"\"4.03\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], ShowStringCharacters -> 
                    False], 0.04027968308547112, AutoDelete -> True], 
                  ScientificForm[#, 3]& ]}, "RowWithSeparators"], 
               TemplateBox[{"\[ThinSpace]", "\" \"", 
                 TagBox[
                  TooltipBox[
                   InterpretationBox[
                    Cell["error:"], 
                    TextCell["error:"]], 
                   TagBox[
                    GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                   Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                 InterpretationBox[
                  Cell["1.22%"], 
                  TextCell["1.22%"]]}, "RowWithSeparators"]},
              "RowWithSeparators"]},
            {
             ItemBox[
              
              DynamicModuleBox[{NeuralNetworks`Private`NetTrain`index$$ = 1, 
               NeuralNetworks`Private`NetTrain`plotList$$ = {
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJw1mHlcTfkbx+9t3251700/U2ES1VhDWcv3QbZSKJIxKLILDWVJJbuQaoqa
sYZQmJlKRttzMVki0iS7SdGq5Xa767nL79zjzF+97ut0zznf5/l83p9POa/Y
HLTKgMPhuHI5HP3P/XWO3yVtTyXqjVWTE/KqyLfPF0hn44YXwxdW4oO71wbP
HZNLPIJbi50vv8Vv1/8k6yRGdb5un3Dw0xXnNr68Rfo9ERVMKvvM/n4xUdeP
3Rrm9gXX3O7OG5VaTuKcztxRFjSx379L7nrNMzl2pRkXzCc/xebcJ7/GDjNx
eNWMg5j7VZCP+ZYjsqUd2DvjYMNSo0cktHPobOO2NvybuX8lcTpT9SLRqwPT
vavWwoqn5KHhYiosqAUjmOc9I/HUgTN/dHWgA/00flg1yVzcb+YX9y7cyzz/
BcnUrJzu2tSJbb/cKDY4UUN8573aZyNswyDmff4h30/mXsxP7cRi6xcaSVkt
yTj84JVJTjcOZN7vJfltk6hwmUUXJh3phS9f68imlOuK2ZIu7GHe9zX5mlB9
y76+A3806ksf+Q0ZUV52OX9nJ95j3v8tCQggp/3XdOOQhEkPH/q9I0drwGzx
sW5MY87znrTfO/tih68YVcplFnd2fiBUipYTAGJcwZzvI1k9JFsgK+rEym17
A3Kv/ksmSkI2hif34HfMeetJ7MAS3cfIHqySBz2qaq8nLRljUgYeF2Mic/5P
JIAaxrFzF6PXrc/rZhg2kMnSNlfNUTG2MvNoIJZv2gz8zbvwzM8xlujQSCyG
hXw6ldiD85n5NJJPf8T6HbojQWMPsxvjRn8mXS7HdyeX9eIdZl6fyf2g4Jc7
7MUY2ZEV+MfsL2SO+4WcAa096MzM7wuJ3H1x3rT5Pfgyd2i3e3gTsTkYV2sf
3ItHmHk2kaSmkPKwsVL0WVuWemFHM7m83pcburobxcx8W4hLzpq1Fd5ivExP
0yGlhbStpWqHCXtwMTPvVhKx9/n/freWIq+xvjbtSisZ8XHUuKtWErzLzL+N
XCsvexA1WILR5/UHbCPhBwuzlOW9+AOzj3YSoLOu/OtaN35Yqr9hO2n8Iyh5
p7cEU5n9fCV245c6aQokON3x5B11x1fif2VQX/vNvahk9tVBtg6aYsxvl+KN
125Loo07SfTpufa8pB4MZ/bXSTqcL73STJVgH/3XnbpIoOZGndNJMT5m9tlF
qrZE1oz8Xoqof12HbuJnM8b4z9USdr/dJJQ/z6pOJMOthzvPdV3uJnUes9pm
FkrZfXcTx4H5+wIuKdGNMaCY7L8iFwyfLmH3Lyanoq5ven9Jhu+m75mytkxM
FA9bNCt4vaweesi8ufLurk4pnhg0O23Q7B5ygHvws9xexuqjh5xpSOOmUb04
zVBAT7iHzKeOomOglNWLhHg8jb6amNmD8k9vx5wJkxBl1DlrI56E1Y+E3Irb
1JR1VIp5oov7F3+VkOzntaEl9lJWT71E1xZbcXy8HJfTaumzo5fYbe+/9LSp
nNVXLxmFXu05vjIUxnu51hhKSVqUu4dbsZzVm5TIbk608CYyfPiTNib5hJQ8
PZkX9eKulNWflNyo9MuZ8FKBsfp1O8rIja3veREWElaPMpIy2q1/35FSHOmQ
0tf0ioz4JubwQpIlrD5lRLAmc+CtqTJsVISuuz9aTuy2dC7flSJj9Son7yNC
mk77yPDUK+fihHI5KeuXG1O0RMbqV0Hqp1f4r3ojQf+iNgtvPwXhffQ+/pXW
+zc9K0jf9vjgwJ1K1KUXLFG8VJCGO08b2nzkrL6VZF5CAOzP7sWCrbuvF4Yr
SUTktPIfPGSs3pWkhHtgfdmGXlwTNF2zpUNJYvuk/Rpn1cvqX0U+/Xvkbo2u
Fx1HWQcO36kiWXvialbUKFk/qEjarKeqEJUUn9u8OttqRJGz+3qCOpYqWX9Q
RDRztPKpQIb79PJLoUjSgurYiAY56xeK9N1+y+a9Uorj9HZxUpMB0e5FneEy
1j9q0mg05Lu4oWJsp93Q/6qauB2QZ9q+kLJ+UpOLMQceL+2S4bkkFa0gDTEY
nciLHy5l/aUhc6Zygy+P78VgevqnUEPiPEaNaRmvYP2mJdpf7lzp86cUTWcd
2xfsryXXA4p8ZI+lrP+0JGXs2ayWkxIscV1Ya/NKS2a/Kxp6jebFNz/qSHrx
lFeGz2W42bg/HXE6EhMct7xfvJT1p46c/DDv4ZCxcnT53BR9uFNHKoZWhS0u
kLN+5YCBs8FBy4cK3Php0cqBPhyoDP31lLZDwfqXA9Xv7u7aGabEB/NKj3L2
ccAsp0/xiysK1s8caJpetm3TMRl+L/q+8OMjDghKArfnTJOx/ubAjqmt/3sz
XIO7Rh54X2rNhe7MtPhunYz1Oxf63VvZsipDhbX09n5bwIXI+w9SruRpWf9z
IcjIua9HlApH6Nf/KxcO7fFZsi1IyfKACx0X8gJXqRV4OC5/4aJ6Llwf1ld8
9YKc5YMBvLVqCrI+o8aGr/a0A+nPVWLD0efkLC8M4OSeX6ovr1GgN+124UYD
2HV0zemazSqWHwZQoXsyKDJEiSef/PtM/KcBJIga49xAxvLEAIRzcovXZ1LY
PdFX/lxuAL7OxwzNflGzfDGEsQPWVXXskaNf7tUBN30MYWTZsWPXeEqWN4bw
w/i49tBkCi99x6MVYAiBP1QvHP2IYvljCDLuv+sHrJSi9nDUlvWPDaE+eq6R
vaec5ZEh5J3yfr/liRRDFS8zZ9kYQdDBiVty0+Usn4xg36K/f90xV4n5aybe
dV1oBFPz7p13l1Isr4zgiEf+l0IOR2Slt89vRjDugZeutEXF8ssIIsqdCndN
VeLqGfoDG8GS9bxHpne0LM+MIaDjfcvPoRSKbukfYAwLXReFhIapWL4Zw/HB
9unrNXJ0YAqYMYjuk1Xc9QqWd8YQFd9/ic9bOW5L9zgal28MJZ2lLq6nVSz/
jGHAp4uKlX1k+MwwgwaMMXQ69p+62V3O8tAEzNouBZe4Uui+VfluwmQTcPFf
u+JRm4LlowlUw/SiSwop7m3QG94E9g/0FlJFCpaXJtBYWvmqeJsC38+/N0z2
2AQsOxYHl57Wsvw0gc/Za9oDhHIce1dvQFNQTbq16U3Mfzw1heZ3nIQEmucp
+tdfaApTroi3vdurYvlqCvHPPc/PitJimx4/v5mCQenbVymgZHlrCteCA73W
0vfztVnwbNMnU9jqdigt2fY//ppBh6l74LmdUjwb/5dsjpsZVDwZNCXLT83y
2AyKHCdftDyrREWH04ChkWZwCK9oM+KULJ/NwC9+r10BUWLQ0sSZ5gVmMFdV
PTmqnmJ5bQZVXLWqZKYGrz/9srlZYQbmxSGmplu0LL/NwdJo65AGew2aePtl
Vkw2h35pP4an3+OIvvHcHC5uyFverJNjWN5NWpHmwF+VKVo1hGL5bg6Sw3+u
T3DjiIodhK2JleYwLsbKq61GxfLeHMZMquwtP6xFOz1ubC2goyrLRjJIw/Lf
AsbnvQmJo1S4Sb/eEAtwCWzov+AJxeaBBYy6n5Rf1UDhIz2+T1uAV/PyYAsh
xeaDBUxUu0rRX4MDX1+iCW0B0V1z+eeHatm8sIR1E3v8yQcl7qan89rNEqbt
jy7176LY/LCEEEv3jGE/c0V1RZHviiItocBz74XYcDWbJ5bgM3M39s5Togft
howCS5hUVlxmzVOx+WIJ5n0iig+aKzEpY+ywrUpLcL4+dFH3OjWbN1bAfR2e
/MRQi59p+s0nVmAmb7c4d4li88cKgrzP3dr1SYaTt+l2jzxgBU21O83mrqDY
PLKCGdT2Pr+r5ZjZuPIy74kV9Mk68HntY4rNJysQ3u5fvjxDjT16HNvyIH97
uOPg0xSbVzyo8cjyaXwrwzl6+YfwoHnCxAXXpsnZ/OLBsybrDUE6FeboH3ea
B7OTGxdU8Sk2z3iwvzV0Wb9cCjkXpLRiefDXz4Xnh+soNt+swbhm5dLlR7T4
o+2PmyPcraFswOIN5wNkbN5Zg/jvK9ysaDkWJpSfmrrJGgaXLq7cmq5m888a
xk7Yk1plSaF110A6Yazhb/HM2kShgs1Da0jif3Iqpvm2dtmhFq3SGlZG3PuY
9ljO5qMN/LT36McBWSq8R5/+A7GBmKbCGdkZOjYvbWBRcWhzXIQcnXzmTSg5
YANjuxzDzx2SsflpAxzLwAW5t5QYQ6s964kNmA7+/cQHXxWbpzbgcNvROvUr
hS3HrSpKzGwhf/KNMdV0vn/LV1uw5bSeq/Ok8GTF5De5Q22hb3fNsxG1XFEk
k7e2QKWmx96006Ev7YasQFt487tnRP0DLToy+WsLhjOyx7pzKOzxvMg9EmUL
phG6oXXH1fiYyWNb+G2OtimsQo3n9ThPt4V1iRVlPc/UuJ3JZ1vwbM07dUHI
FQVeMh2y5rYtiBOMD0834YgGM3ltC4LtlRn9/dWo1tvrrS0MLZpwsO08hf8w
+W0LX2JcBmYrNJgr3Eg71haiFx1zGJ+owkQmz/lw/jj/rva6BkP9z672/J4P
z/r2+uYM1+JIJt/5ULFjdO6Beh2a7Kve5TKNDyfnDI+16uKIPjB5zwfz2csa
ky6psZBOW8FqPqz+J9WjPlaLR5n854PC9MOJxJsUrmAGwIfipcnx9XSfmMD0
AT7sE60dVfFUhbZD9A/kQ5R8Y+rS8RxRM9MP+OBSOuAfP9pf5fT2/n3Gh/7t
WrlTpAozmL7Ah4Lds4rch6hwo/6ymA9HeMM3r5miwWlMfxDAc78vRS5nKXTQ
x6GdAMDr78OZ+RSKmT4hAEHH8UmH6Ps9MtMHrgA6n/qmrJtK+4vpFwLoNyY7
wqud1o8eTz8KYEZPbuUDer8BTN8QgC/PaNY0Xx0O2qEPQAFsb96RqpMokWL6
hwBqhd55T0oprPn9ge+u8wIo2e1vkL2II7rG9BEBlI9wjo7eocM9zfpAEsDk
sdvPteRwRIuYfiIAa+NT/Tw8dTiCTofQJgH0lXnWBY3jiIwn6fuKAOJ3fx3c
84DC9yH6gBCCejV38wW6DxQw/UUIdh9jko0s5ZiUfIImmBDKePJ6/d9j4Uyf
EUJYiV32xxgNjmf+oSKE8tV2ovh1FNo06PuNEOrmuoT3Gc8VNenH97MQvnam
mFiG6LCM6TtCcLk20il2ng7T9XUiQwjVh3c/fm3AEW1g+o8Qwme5m71dpsap
9Nv33KavD0rPWfxahd8d0fchITTd867a66zAbj3e3wrB7Hayy804Ch8y/UgI
uqSQYf12afAsrdYXGiG4ZnqunvVGg9FMX7ID3+HhgeOyFfh/ayByOA==
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.9866220735785953, -1.2329335799268641`}, {
                    1.9899665551839465`, -1.4587622066125634`}, {
                    2.9933110367892977`, -1.403144182748889}, {
                    3.9966555183946486`, -1.5103471540067068`}, {
                    5., -1.3949139550690792`}}]}, {
                    AbsolutePointSize[4.125], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.9866220735785953, -1.2329335799268641`}, {
                    1.9899665551839465`, -1.4587622066125634`}, {
                    2.9933110367892977`, -1.403144182748889}, {
                    3.9966555183946486`, -1.5103471540067068`}, {
                    5., -1.3949139550690792`}}]}}}, Prolog -> {{
                    Text[2, 
                    Offset[{-2, -2}, {2., 0.7530000000000001}], {1., 1.}], 
                    Text[4, 
                    Offset[{-2, -2}, {4., 0.7530000000000001}], {1., 1.}], 
                    Text[6, 
                    Offset[{-2, -2}, {6., 0.7530000000000001}], {1., 1.}], 
                    Text[8, 
                    Offset[{-2, -2}, {8., 0.7530000000000001}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 0.7530000000000001}], {1., 1.}]}, {
                    
                    Text[
                    Superscript[10, "-4"], 
                    Offset[{3, 0}, {0, -4.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-3"], 
                    Offset[{3, 0}, {0, -3.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-2"], 
                    Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-1"], 
                    Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
                    Text["1", 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}]}}, 
                  PlotRange -> {{0, 5.015458422174863}, {-4.6530000000000005`,
                     0.7530000000000001}}, ImageSize -> {302, 182.}, 
                  GridLines -> {{2., 4., 6., 8., 10.}, {{-5., 
                    GrayLevel[0.3001]}, {-4., 
                    GrayLevel[0.3001]}, {-3., 
                    GrayLevel[0.3001]}, {-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "loss", "rounds"}], 
                GeneralUtilities`TightLabeled[
                 Graphics[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1: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
R8hGiNWq9Vo1sh4W8fdSY8kR8D9y3BE7
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.9866220735785953, 0.0198}, {1.9899665551839465`, 
                    0.012}, {2.9933110367892977`, 0.0129}, {
                    3.9966555183946486`, 0.0098}, {5., 0.0122}}]}, {
                    AbsolutePointSize[4.125], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.9866220735785953, 0.0198}, {1.9899665551839465`,
                     0.012}, {2.9933110367892977`, 0.0129}, {
                    3.9966555183946486`, 0.0098}, {5., 0.0122}}]}}}, 
                  Prolog -> {{
                    Text[2, 
                    Offset[{-2, -2}, {2., 0.9090000000000001}], {1., 1.}], 
                    Text[4, 
                    Offset[{-2, -2}, {4., 0.9090000000000001}], {1., 1.}], 
                    Text[6, 
                    Offset[{-2, -2}, {6., 0.9090000000000001}], {1., 1.}], 
                    Text[8, 
                    Offset[{-2, -2}, {8., 0.9090000000000001}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 0.9090000000000001}], {1., 1.}]}, {
                    
                    Text[
                    PercentForm[0.], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text[
                    PercentForm[0.25], 
                    Offset[{3, 0}, {0, 0.25}], {-1, -1.}], 
                    Text[
                    PercentForm[0.5], 
                    Offset[{3, 0}, {0, 0.5}], {-1, -1.}], 
                    Text[
                    PercentForm[0.75], 
                    Offset[{3, 0}, {0, 0.75}], {-1, -1.}]}}, 
                  PlotRange -> {{
                    0, 5.015458422174863}, {-0.009000000000000001, 
                    0.9090000000000001}}, ImageSize -> {302, 182.}, 
                  GridLines -> {{2., 4., 6., 8., 10.}, {{0., 
                    GrayLevel[0.8501]}, {0.05, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.15, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.35, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.45, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.55, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.65, 
                    GrayLevel[0.8501]}, {0.7, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.8, 
                    GrayLevel[0.8501]}, {0.85, 
                    GrayLevel[0.8501]}, {0.9, 
                    GrayLevel[0.8501]}, {0.95, 
                    GrayLevel[0.8501]}, {1., 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.3001]}, {0.25, 
                    GrayLevel[0.3001]}, {0.5, 
                    GrayLevel[0.3001]}, {0.75, 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRangePadding -> None, 
                  PlotRangeClipping -> True, Background -> GrayLevel[1], 
                  FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                  None], {None, "error rate", "rounds"}]}}, 
               TagBox[GridBox[{
                  {
                   DynamicBox[ToBoxes[
                    Grid[{{
                    Button[
                    MouseAppearance[
                    Style["\:2039", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ - 1, 2, 1], 
                    Appearance -> None], 
                    Dynamic[
                    Part[{
                    Tooltip["loss", 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}]], 
                    Tooltip["error rate", 
                    Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}]]}, 
                    NeuralNetworks`Private`NetTrain`index$$], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetTrain`index$$}], 
                    Button[
                    MouseAppearance[
                    Style["\:203a", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ + 1, 2, 1], 
                    Appearance -> None]}}, ItemSize -> {{3, 20, 3}, {2}}, 
                    Alignment -> Center], StandardForm],
                    ImageSizeCache->{256., {7.9150390625, 14.0849609375}},
                    
                    TrackedSymbols:>{
                    NeuralNetworks`Private`NetTrain`index$$}]},
                  {
                   DynamicBox[ToBoxes[
                    Part[
                    NeuralNetworks`Private`NetTrain`plotList$$, 
                    NeuralNetworks`Private`NetTrain`index$$], StandardForm],
                    ImageSizeCache->{313., {95., 99.}},
                    TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]}
                 },
                 DefaultBaseStyle->"Column",
                 GridBoxAlignment->{"Columns" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                "Column"],
               DynamicModuleValues:>{}],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"},
            {
             ItemBox[
              StyleBox[
               RowBox[{
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.083, 1., 1.],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
                GraphicsBox[{},
                 Axes->None,
                 Background->Hue[0.59, 0.7, 0.75],
                 ImagePadding->{{0, 0}, {5, 2}},
                 ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
               FontFamily->"Verdana",
               FontSize->8,
               FontColor->GrayLevel[0.4]],
              Alignment->Center,
              StripOnInput->False], "\[SpanFromLeft]"}
           },
           AutoDelete->False,
           ColumnsEqual->False,
           
           GridBoxAlignment->{
            "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
           GridBoxDividers->{"Columns" -> {False, {
                Opacity[0.15]}, False}},
           GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], 
               Offset[1.1199999999999999`], {
                Offset[1.75]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.8]}, 
               Offset[0.2]}}],
          "Grid"],
         FrameMargins->{{10, 10}, {10, 5}},
         FrameStyle->None,
         StripOnInput->False],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       Alignment->Center,
       BaseStyle->{
        FontWeight -> "Light", FontSize -> 11, FontFamily -> 
         ".AppleSystemUIFont", NumberMarks -> False, Deployed -> False},
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.5599999999999999]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], 
        Offset[0.8], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   Background->GrayLevel[1],
   FrameMargins->{{0, 0}, {0, 0}},
   FrameStyle->GrayLevel[0.85],
   RoundingRadius->5,
   StripOnInput->False], 
  StyleBox["]", "NonInterpretableSummary"]}]], "Output",
 CellChangeTimes->{{3.88508453996472*^9, 3.885084549268635*^9}, 
   3.885085521927883*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"82f491a8-6895-44cb-a7a4-4bb0c06dbd50"]
}, Open  ]],

Cell["\:53c2\:6570\:89e3\:6790:", "Text",
 CellChangeTimes->{{3.885086026068886*^9, 
  3.885086032929303*^9}},ExpressionUUID->"f8d92db6-0baf-4f5b-964c-\
f4334a56fb8d"],

Cell["All \:8868\:793a\:8ba9\:8bad\:7ec3\:7684\:65f6\:5019\:663e\:793a\:6240\
\:6709\:7684\:4fe1\:606f", "Item",
 CellChangeTimes->{{3.8850860346283817`*^9, 
  3.885086054304983*^9}},ExpressionUUID->"cfb333f9-e78b-4534-8d1d-\
47395fdcc524"],

Cell["ValidationSet \:7528\:4e8e\:4f20\:5165\:4e00\:4e2a\:548c\:8bad\:7ec3\
\:6570\:636e\:96c6\:4e0d\:540c\:7684\:6570\:636e\:6765\:9632\:6b62\:8fc7\:62df\
\:5408\:7684\:60c5\:51b5\:51fa\:73b0", "Item",
 CellChangeTimes->{{3.8850860346283817`*^9, 
  3.885086087249262*^9}},ExpressionUUID->"10a3e251-7596-4733-9e87-\
d3ed65876412"],

Cell["MaxTrainingRounds \
\:6307\:5b9a\:6700\:591a\:8bad\:7ec3\:7684\:8f6e\:6570", "Item",
 CellChangeTimes->{{3.8850860346283817`*^9, 
  3.885086108846345*^9}},ExpressionUUID->"1cb1a99a-f61c-4610-a70f-\
9dfd4693f7ff"],

Cell["results \:4e2d\:5305\:542b\:4e86\:8bad\:7ec3\:7684\:5404\:79cd\:4fe1\
\:606f:", "Text",
 CellChangeTimes->{
  3.885085251099502*^9, 3.88508533324867*^9, {3.885086140237121*^9, 
   3.8850861595700397`*^9}},ExpressionUUID->"819fdaa9-d426-4a8f-bdf0-\
47cbc7639b79"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", "[", "\"\<LossEvolutionPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8850861609744167`*^9, 3.885086173036725*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"459786b7-b806-4a1b-8564-43290c4b60f8"],

Cell[BoxData[
 TemplateBox[{
   GridBox[{{"", 
      ItemBox["\"rounds\"", DefaultBaseStyle -> "LabeledLabel"]}, {
      RotationBox[
       ItemBox["\"loss\"", DefaultBaseStyle -> "LabeledLabel"], BoxRotation -> 
       1.5708], 
      GraphicsBox[{
        AbsoluteThickness[1.25], {{
          Hue[0.083, 1., 1.], 
          LineBox[CompressedData["
1:eJw1mHlcTfkbx+9t3251700/U2ES1VhDWcv3QbZSKJIxKLILDWVJJbuQaoqa
sYZQmJlKRttzMVki0iS7SdGq5Xa767nL79zjzF+97ut0zznf5/l83p9POa/Y
HLTKgMPhuHI5HP3P/XWO3yVtTyXqjVWTE/KqyLfPF0hn44YXwxdW4oO71wbP
HZNLPIJbi50vv8Vv1/8k6yRGdb5un3Dw0xXnNr68Rfo9ERVMKvvM/n4xUdeP
3Rrm9gXX3O7OG5VaTuKcztxRFjSx379L7nrNMzl2pRkXzCc/xebcJ7/GDjNx
eNWMg5j7VZCP+ZYjsqUd2DvjYMNSo0cktHPobOO2NvybuX8lcTpT9SLRqwPT
vavWwoqn5KHhYiosqAUjmOc9I/HUgTN/dHWgA/00flg1yVzcb+YX9y7cyzz/
BcnUrJzu2tSJbb/cKDY4UUN8573aZyNswyDmff4h30/mXsxP7cRi6xcaSVkt
yTj84JVJTjcOZN7vJfltk6hwmUUXJh3phS9f68imlOuK2ZIu7GHe9zX5mlB9
y76+A3806ksf+Q0ZUV52OX9nJ95j3v8tCQggp/3XdOOQhEkPH/q9I0drwGzx
sW5MY87znrTfO/tih68YVcplFnd2fiBUipYTAGJcwZzvI1k9JFsgK+rEym17
A3Kv/ksmSkI2hif34HfMeetJ7MAS3cfIHqySBz2qaq8nLRljUgYeF2Mic/5P
JIAaxrFzF6PXrc/rZhg2kMnSNlfNUTG2MvNoIJZv2gz8zbvwzM8xlujQSCyG
hXw6ldiD85n5NJJPf8T6HbojQWMPsxvjRn8mXS7HdyeX9eIdZl6fyf2g4Jc7
7MUY2ZEV+MfsL2SO+4WcAa096MzM7wuJ3H1x3rT5Pfgyd2i3e3gTsTkYV2sf
3ItHmHk2kaSmkPKwsVL0WVuWemFHM7m83pcburobxcx8W4hLzpq1Fd5ivExP
0yGlhbStpWqHCXtwMTPvVhKx9/n/freWIq+xvjbtSisZ8XHUuKtWErzLzL+N
XCsvexA1WILR5/UHbCPhBwuzlOW9+AOzj3YSoLOu/OtaN35Yqr9hO2n8Iyh5
p7cEU5n9fCV245c6aQokON3x5B11x1fif2VQX/vNvahk9tVBtg6aYsxvl+KN
125Loo07SfTpufa8pB4MZ/bXSTqcL73STJVgH/3XnbpIoOZGndNJMT5m9tlF
qrZE1oz8Xoqof12HbuJnM8b4z9USdr/dJJQ/z6pOJMOthzvPdV3uJnUes9pm
FkrZfXcTx4H5+wIuKdGNMaCY7L8iFwyfLmH3Lyanoq5ven9Jhu+m75mytkxM
FA9bNCt4vaweesi8ufLurk4pnhg0O23Q7B5ygHvws9xexuqjh5xpSOOmUb04
zVBAT7iHzKeOomOglNWLhHg8jb6amNmD8k9vx5wJkxBl1DlrI56E1Y+E3Irb
1JR1VIp5oov7F3+VkOzntaEl9lJWT71E1xZbcXy8HJfTaumzo5fYbe+/9LSp
nNVXLxmFXu05vjIUxnu51hhKSVqUu4dbsZzVm5TIbk608CYyfPiTNib5hJQ8
PZkX9eKulNWflNyo9MuZ8FKBsfp1O8rIja3veREWElaPMpIy2q1/35FSHOmQ
0tf0ioz4JubwQpIlrD5lRLAmc+CtqTJsVISuuz9aTuy2dC7flSJj9Son7yNC
mk77yPDUK+fihHI5KeuXG1O0RMbqV0Hqp1f4r3ojQf+iNgtvPwXhffQ+/pXW
+zc9K0jf9vjgwJ1K1KUXLFG8VJCGO08b2nzkrL6VZF5CAOzP7sWCrbuvF4Yr
SUTktPIfPGSs3pWkhHtgfdmGXlwTNF2zpUNJYvuk/Rpn1cvqX0U+/Xvkbo2u
Fx1HWQcO36kiWXvialbUKFk/qEjarKeqEJUUn9u8OttqRJGz+3qCOpYqWX9Q
RDRztPKpQIb79PJLoUjSgurYiAY56xeK9N1+y+a9Uorj9HZxUpMB0e5FneEy
1j9q0mg05Lu4oWJsp93Q/6qauB2QZ9q+kLJ+UpOLMQceL+2S4bkkFa0gDTEY
nciLHy5l/aUhc6Zygy+P78VgevqnUEPiPEaNaRmvYP2mJdpf7lzp86cUTWcd
2xfsryXXA4p8ZI+lrP+0JGXs2ayWkxIscV1Ya/NKS2a/Kxp6jebFNz/qSHrx
lFeGz2W42bg/HXE6EhMct7xfvJT1p46c/DDv4ZCxcnT53BR9uFNHKoZWhS0u
kLN+5YCBs8FBy4cK3Php0cqBPhyoDP31lLZDwfqXA9Xv7u7aGabEB/NKj3L2
ccAsp0/xiysK1s8caJpetm3TMRl+L/q+8OMjDghKArfnTJOx/ubAjqmt/3sz
XIO7Rh54X2rNhe7MtPhunYz1Oxf63VvZsipDhbX09n5bwIXI+w9SruRpWf9z
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
           "]]}, {}}, {{
          Hue[0.59, 0.7, 0.75], 
          
          LineBox[{{0.9866220735785953, -1.2329335799268641`}, {
           1.9899665551839465`, -1.4587622066125634`}, {
           2.9933110367892977`, -1.403144182748889}, {
           3.9966555183946486`, -1.5103471540067068`}, {
           5., -1.3949139550690792`}}]}, {
          AbsolutePointSize[4.125], 
          Hue[0.59, 0.7, 0.65], 
          
          PointBox[{{0.9866220735785953, -1.2329335799268641`}, {
           1.9899665551839465`, -1.4587622066125634`}, {
           2.9933110367892977`, -1.403144182748889}, {
           3.9966555183946486`, -1.5103471540067068`}, {
           5., -1.3949139550690792`}}]}}}, Prolog -> {{
          InsetBox[
           FormBox["2", TraditionalForm], 
           Offset[{-2, -2}, {2., 0.7530000000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["4", TraditionalForm], 
           Offset[{-2, -2}, {4., 0.7530000000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["6", TraditionalForm], 
           Offset[{-2, -2}, {6., 0.7530000000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["8", TraditionalForm], 
           Offset[{-2, -2}, {8., 0.7530000000000001}], 
           ImageScaled[{1., 1.}]], 
          InsetBox[
           FormBox["10", TraditionalForm], 
           Offset[{-2, -2}, {10., 0.7530000000000001}], 
           ImageScaled[{1., 1.}]]}, {
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-4\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -4.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-3\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -3.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-2\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -2.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox[
            
            TemplateBox[{"10", "\"-1\""}, "Superscript", SyntaxForm -> 
             SuperscriptBox], TraditionalForm], 
           Offset[{3, 0}, {0, -1.}], 
           ImageScaled[{0, 0.}]], 
          InsetBox[
           FormBox["\"1\"", TraditionalForm], 
           Offset[{3, 0}, {0, 0.}], 
           ImageScaled[{0, 0.}]]}}, 
       PlotRange -> {{0, 5.015458422174863}, {-4.6530000000000005`, 
         0.7530000000000001}}, ImageSize -> {302, 182.}, 
       GridLines -> {{2., 4., 6., 8., 10.}, {{-5., 
           GrayLevel[0.3001]}, {-4., 
           GrayLevel[0.3001]}, {-3., 
           GrayLevel[0.3001]}, {-2., 
           GrayLevel[0.3001]}, {-1., 
           GrayLevel[0.3001]}, {0., 
           GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, AspectRatio -> 
       Full, BaseStyle -> {
        FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.5], 
         ScriptSizeMultipliers -> 0.2, ScriptMinSize -> 6}, PlotRangePadding -> 
       None, PlotRangeClipping -> True, Background -> GrayLevel[1], 
       FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> None]}},
     GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    GridBoxSpacings -> {"Columns" -> {{0.5}}}, 
    BaseStyle -> {
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]}], 
   TemplateBox[{"\"validation\"", "\"training\""}, "LineLegend", 
    DisplayFunction -> (StyleBox[
      StyleBox[
       PaneBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.59, 0.7, 0.75]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                GraphicsBox[{{
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                   Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    Hue[0.083, 1., 1.]], {}}}, AspectRatio -> Full, 
                 ImageSize -> {20, 10}, PlotRangePadding -> None, 
                 ImagePadding -> Automatic, 
                 BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
              GridBoxAlignment -> {
               "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
              AutoDelete -> False, 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], 
             "Grid"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], "Grid"], 
        Alignment -> Left, AppearanceElements -> None, 
        ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> "ResizeToFit"], 
       LineIndent -> 0, StripOnInput -> False], {FontFamily -> "Arial"}, 
      Background -> Automatic, StripOnInput -> False]& ), 
    InterpretationFunction :> (RowBox[{"LineLegend", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{
             
             TemplateBox[<|"color" -> Hue[0.59, 0.7, 0.75]|>, 
              "HueColorSwatchTemplate"], ",", 
             
             TemplateBox[<|"color" -> Hue[0.083, 1., 1.]|>, 
              "HueColorSwatchTemplate"]}], "}"}], ",", 
         RowBox[{"{", 
           RowBox[{#, ",", #2}], "}"}]}], "]"}]& ), Editable -> True]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.885086173736682*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"202e6104-1cea-4bb4-a280-f779d9245595"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.885086177455834*^9, 3.885086184915988*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"3d1e99ef-429f-4c81-a388-549a052e46fa"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Loss\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.0149], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.03], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                   18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                   49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                  
                  JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                   18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                  FaceForm[
                   RGBColor[0.631, 0.8160000000000001, 0.498]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15.,
                    33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                   22., 40.}}}]}, {
                  FaceForm[
                   RGBColor[0.38, 0.753, 0.89]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                  FaceForm[
                   RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15.,
                    12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                   22., 19.}}}]}, {
                  FaceForm[
                   RGBColor[0.584, 0.51, 0.8390000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5,
                    30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                  FaceForm[
                   RGBColor[0.4, 0.396, 0.659]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30.,
                    23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                   37., 30.}}}]}, {
                  FaceForm[
                   RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5,
                    40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                  FaceForm[
                   RGBColor[0.647, 0.259, 0.08600000000000001]], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45.,
                    33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                   52., 40.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    
                    Offset[{0, -7}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"lenet\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{0, -15.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    
                    Offset[{0, -7}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"loss\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999732051026, 
                    1.0000000267948967`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999732051026, 
                    1.0000000267948967`}]], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}], 
                    InsetBox["\"Loss\"", 
                    
                    Offset[{0, -7}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}], 
                    NCache[
                    ImageScaled[{
                    Rational[1, 2], 1.}], 
                    ImageScaled[{0.5, 1.}]], Automatic, {1, 0}]}, 
                    StripOnInput -> False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"28\"", "\"28\""}, 
                    "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014818`*^-7, 
                    5.499999999999999}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.679489702911785*^-8}], 
                    InsetBox[
                    SubscriptBox["\"\[DoubleStruckCapitalN]\"", "10"], 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999999}, {-1.4499999732051023`, 
                    1.0000000388526005`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    InsetBox["\"10\"", 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999985262806, 
                    0.5500000388526006}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193393399298`*^-7, 
                    5.499999999999999}, {-0.44999997320510277`, 
                    1.0000000120577033`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999999, -2.6794897078907816`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10", "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"index ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 10, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-0.9999999732051026, 
                    1.0000000267948967`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999732051026, 1.0000000267948967`}, {
                    2.6794897029117842`*^-8, 0.9999999999999997}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"array", 
                    Style[
                    "(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4499999732051023`,
                     1.0000000388526005`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999998, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\[VeryThinSpace]range: \"", "1", 
                    "\"..\"", "10", "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}, {
                    
                    StyleBox[
                    TemplateBox[{"\"Target\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"index ", 
                    Style[
                    
                    Row[{"(\[VeryThinSpace]range: ", 1, "..", 10, 
                    "\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}], 
                    Style[
                    Row[{"Target", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.449999985262806, 
                    0.5500000388526006}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051027}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"vector", 
                    Style["(\[VeryThinSpace]size: 10\[VeryThinSpace])", 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.44999997320510277`, 
                    1.0000000120577033`}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489707890781*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Loss\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Loss"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.999999999999999, 8.038469108735353*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    GrayLevel[0.7]], 
                    FaceForm[
                    RGBColor[
                    0.7999999999999999, 0.7999999999999999, 
                    0.7999999999999999]], {
                    EdgeForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    FaceForm[
                    RGBColor[0.5664, 0.5664, 0.5664]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"lenet\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["lenet", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999732051024`, 1.0000000535897937`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.584, 0.51, 0.839]], 
                    FaceForm[
                    RGBColor[
                    0.7226666666666666, 0.6733333333333333, 
                    0.8926666666666666]], 
                    DiskBox[{-0.9999999732051026, 1.0000000267948967`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"CE\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-0.9999999732051026, 
                    1.0000000267948967`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "CrossEntropyLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["loss", Bold], 
                    Style[
                    CrossEntropyLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{2.6794897029117842`*^-8, 0.9999999999999997}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Loss\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Loss", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999732051026, 
                    1.0000000267948967`}, {2.6794897029117842`*^-8, 
                    0.9999999999999997}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 8, 21, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 29.}, {29.5, 19.}}, 
                    ImageSize -> {223.0000014737193, 103.49999999999997`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    GridBox[{{
                    ItemBox[
                    StyleBox[
                    RowBox[{"Input", " ", "Ports"}], FontWeight -> Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Input\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Input\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Input"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Input\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Input"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"image\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Target\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Target\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Target"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Target\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Target"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\"index \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "10", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox[
                    RowBox[{"Output", " ", "Port"}], FontWeight -> Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline), 
                    ImageSize -> {1, 11}], CacheGraphics -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    
                    Part[<|"Nodes" -> <|
                    "lenet" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 1, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 20|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 800}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {50, 4, 4}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|"Weights" -> 
                    NeuralNetworks`Private`DummyArray[{10, 500}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|"Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|"Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "loss" -> <|
                    "Type" -> "CrossEntropyLoss", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "TargetForm" -> "Index", "$InputDimensions" -> {}, 
                    "$Classes" -> 10, "$IntegerType" -> 
                    NeuralNetworks`IndexIntegerT[1, 10]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[1, 10]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{28, 28}], "ColorSpace" -> 
                    "Grayscale", "ColorChannels" -> 1, "Interleaving" -> 
                    False, "MeanImage" -> None, "VarianceImage" -> None, 
                    "DataTransposed" -> False, "Method" -> "Stretch", 
                    "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.2.1"|>, "Target" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`IndexIntegerT[1, 10]]|>, 
                    "Outputs" -> <|
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "lenet", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "lenet", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "loss", "Outputs", "Loss"]}|>, 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "lenet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "lenet"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "loss"], 
                    NeuralNetworks`NetPath["Outputs", "Loss"]}, 
                    NeuralNetworks`Private`NetGraph`selection], <||>, {}], 
                    ToBoxes[""]], ImageSizeCache -> {0., {0., 6.}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.885086186248999*^9},
 CellLabel->
  "Out[168]=",ExpressionUUID->"13f49caf-0b03-4564-9455-6b890ab1fb6c"]
}, Open  ]],

Cell["\:5c06\:8bad\:7ec3\:597d\:7684\:90e8\:5206\:63d0\:53d6\:51fa\:6765, \
\:5e76\:8bbe\:7f6e\:5165\:53e3\:548c\:51fa\:53e3\:7684 Layer:", "Text",
 CellChangeTimes->{{3.885086298494207*^9, 
  3.885086324068204*^9}},ExpressionUUID->"96b17e9e-92cd-4dda-b7c9-\
d87b30dc2761"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedLenet", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{
    RowBox[{"NetExtract", "[", 
     RowBox[{
      RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}], ",", 
      "\"\<lenet\>\""}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Input\>\"", "->", "enc"}], ",", 
      RowBox[{"\"\<Output\>\"", "->", "dec"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8850862260093*^9, 3.885086286341177*^9}},
 CellLabel->
  "In[170]:=",ExpressionUUID->"98d95101-a8d4-4c49-95f5-6092cb612623"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 1, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {24, 24}, "$WeightsInputChannels" -> 1|>,
                     "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 24, 24}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {24, 24}, 
                    "$OutputSize" -> {12, 12}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 24, 24}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {12, 12}, 
                    "$OutputSize" -> {8, 8}, "$WeightsInputChannels" -> 20|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 12, 12}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 8, 8}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {8, 8}, 
                    "$OutputSize" -> {4, 4}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 8, 8}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 800}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 800, "$InputDimensions" -> {50, 4, 4}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 4, 4}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>|>, 
                    "9" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 500}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1, 28, 28}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{28, 28}], "ColorSpace" -> 
                    "Grayscale", "ColorChannels" -> 1, "Interleaving" -> 
                    False, "MeanImage" -> None, "VarianceImage" -> None, 
                    "DataTransposed" -> False, "Method" -> "Stretch", 
                    "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.2.1"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{0, 1, 
                    Skeleton[7], 9}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], 
                    "InputDepth" -> 1, "Multilabel" -> False, "Dimensions" -> 
                    10, "$Rank" -> 0, "$Version" -> "13.2.1"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]24\[Times]24\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]24\[Times]24\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 20\[Times]12\[Times]12\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]8\[Times]8\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 50\[Times]4\[Times]4\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 500\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8850862489663277`*^9, 3.885086287592245*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"89c082b3-aa13-482a-bbae-9844d3188bf9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:8bad\:7ec3\:7ed3\:679c\:548c\:5e94\:7528", "Section",
 CellChangeTimes->{{3.885086862421185*^9, 
  3.885086887347982*^9}},ExpressionUUID->"c502f3ef-22e6-41eb-a9de-\
7193cdb6ac41"],

Cell["\:968f\:673a\:9009\:62e9\:51e0\:4e2a\:4f5c\:4e3a\:4f8b\:5b50:", "Text",
 CellChangeTimes->{{3.885086443144268*^9, 
  3.885086475593346*^9}},ExpressionUUID->"f58d5ee9-176c-413c-9434-\
e326f63a899f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"testData", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.8850863547395077`*^9, 3.885086367193274*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"13ec658c-4d5c-433d-91b2-bf97986a29fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+M4G6pIhMTd2npckypBUzMQAAkVD6gS83mhMkxb0GXM2CGyfn/RpdL
YeYpm/ry5YuXU+6gS+1nY9oPoj/NC014gWnmgf93l8VpA81NRJfzZ1Z3F4W4
hbkbTc4F6hYRN2ZmXwy3gOUcD//o4mWpQJW7oizGJOz8BcTyZUhFt/Hb4mcQ
xgEmmfvokjDQzWSIS+p/EpMbLn1X+JkWo4t9yWBKuPvp+QkxJp+rGBrW8zMz
g8KFuRzTsLuwcDmAKfctFSI3FZsrfmypZ2IOn/8Zpw+oAQAoppGd
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "5"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+kYNMZHBKrKvg5uPiPYZMx5GAGAlO+LxhS1exACavEG29u/EWXqmVj
Zo4+9Q6rXXJAXevgvCtr5+/2OQnj3VRkZpYISr8NYu8LEmZmltXWhiudLwey
kDc+fu5qW2ZmTuO7KMaaCgqCpJmYmdmrVmPaurYaLBeM1Un//1cyMDHpPMMq
9YmTaUEIM28HNrmPzEyfvs5lVn2IRe44UO7/J33mDVjkckFy/81xyR04OV8Q
q1wjyA/MzBrYXPpZACQnMRmrJ45PERdsfIlVig4AAI+Yo/A=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "8"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+04PeBDS2uDIwRPzCl1oQzMjLL8TMqf8CQqmFlZBRs+1/J6IohVcHM
KD3z9/93ooyL0WTeBnEwul3//2ufLaPNRzQpUUaOWQ/+/89jZGQ8hir1yYuR
59r//498mYBym1CkfgCV9757PUGbEQQmosglAkW8+RihoANZ6qfnFk2IsFIR
kGB9iyT3OPH//QItRkaWlNeLmbR5GJcgawQ68Ak7I2P//02Mri+FWB+hOnQx
H6Po5n8/S+f8bmRkQ5H53cDJmnEJxPq7VFhoEopcPSNjLYQ1mZHRB0XqvSaj
+HsQ41YMD7PGTRS56YzMXSCTM3kYmSJR3fG/kVGsPiYmRpaR0XgzmtT/bVxg
j0tGrXmNLvX/fwYjo3tSzxtMCaoDAFd3fg4=
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "8"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x924JgfW/SmP9hk3lqyMQLBN2xypYxg8BSL1CpGRl5GKUbGuZhSn3XZ
68/MusnIGIcpN4ex9///v/ksqXsx5eqt//7/f5CR9f8jDKkfBn3//58UYrTD
4pIXjO2rwzkZuW9jlQMDJSxS/19zMjLKWDGWY5P7vzHnyKVgyU9Y5YDgCmci
Lqn/HfyHcUm9EdDFqW0740accjFyH3BJ7WRMwaltJeMM3HJSn3HKYQAA+0jO
Vg==
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQwU/x+iYGeZfc8vLOI/21NTORkZGXdgSl11ZYQATLmbskBh6S37Ahino0vV
STAy2m99+P9/NiPPFTQpFkbu+m9AxgQeRsZTqAZKMLId+P//WqMY0GDlJygu
tGZk3P/x+WQpLG7ZyshoPE0L6kz5pyhywRBRBuHMFEaG5v9Y5AwXXPtvxCj+
ClNOP/sDkCXOKIfmuXlBGrc+gxgrmBm70H3+9zeY+q3JKPQXXQ4KNjIyNuOQ
+j+bkfEiDqn3OoxBuIycw8h4HpeRvoxqH3HJNas+xCVFCgAAP0igkQ==
       "], {{0, 28.}, {28., 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{28., 28.},
     PlotRange->{{0, 28.}, {0, 28.}}], "\[Rule]", "9"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.885086368785816*^9, 3.8850864589451838`*^9}},
 CellLabel->
  "Out[185]=",ExpressionUUID->"76450ff3-afad-4cc7-b619-c42fb6a70dae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trainedLenet", "[", 
  RowBox[{
   RowBox[{"Keys", "@", "%"}], ",", "\"\<TopProbabilities\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.88508634827976*^9, 3.885086457054173*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"1824546c-4012-494f-b8ad-19a5c3f080fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"9", "\[Rule]", "0.5418530106544495`"}], ",", 
     RowBox[{"5", "\[Rule]", "0.4538370370864868`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", "\[Rule]", "0.9998107552528381`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", "\[Rule]", "0.9856696128845215`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", "\[Rule]", "0.9999972581863403`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", "\[Rule]", "0.9999940395355225`"}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{{3.8850863769620113`*^9, 3.8850864292624283`*^9}, 
   3.88508646218489*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"9b763b76-f710-4612-b2ec-5639312a2670"]
}, Open  ]],

Cell["\:55ef\:8bc6\:522b\:7387\:771f\:7684\:633a\:9ad8\:7684. ", "Text",
 CellChangeTimes->{{3.885086478424453*^9, 
  3.88508648693566*^9}},ExpressionUUID->"c7e80472-e01a-4f96-97bf-\
2f4d50e9416c"],

Cell["\:8bad\:7ec3\:5b8c\:6210\:7684\:7f51\:7edc\:53ef\:4ee5\:7528\:4e8e\:5206\
\:7c7b. ", "Text",
 CellChangeTimes->{{3.8850867927574377`*^9, 
  3.885086809829941*^9}},ExpressionUUID->"12810d48-ee58-48be-8290-\
2cdc2b0bbaee"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\:4fdd\:5b58\:8bad\:7ec3\:7ed3\:679c", "Section",
 CellChangeTimes->{{3.885086868638049*^9, 
  3.885086873304235*^9}},ExpressionUUID->"d93bed02-5637-444d-ae3d-\
8c05db92bb3f"],

Cell["\:6700\:540e\:4fdd\:5b58\:4e00\:4e0b\:8fd9\:4e2a\:8bad\:7ec3\:7684\:7ed3\
\:679c, \:65b9\:4fbf\:4ee5\:540e\:518d\:8c03\:7528 (\:6bd5\:7adf\:8bad\:7ec3\
\:633a\:8d39\:65f6\:95f4\:7684). ", "Text",
 CellChangeTimes->{{3.885086742803261*^9, 
  3.885086773484458*^9}},ExpressionUUID->"7ef4d922-c6c7-4e69-959f-\
4bf088ae31bd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<./trained-LeNet-for-digits.wlnet\>\"", ",", "trainedLenet", ",", 
   "\"\<WLNet\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.885086496767578*^9, 3.88508650742698*^9}, {
   3.8850865735112553`*^9, 3.885086697672838*^9}, 
   3.8850867293610697`*^9},ExpressionUUID->"ec97dedd-d377-439e-a26f-\
8347a25d2254"],

Cell[BoxData["\<\"./trained-LeNet-for-digits.wlnet\"\>"], "Output",
 CellChangeTimes->{{3.8850866498216867`*^9, 3.8850866590242243`*^9}},
 CellLabel->
  "Out[188]=",ExpressionUUID->"59cf83ff-ab0a-4d86-ae04-d48b0b9bd89d"]
}, Open  ]],

Cell["\:53ef\:4ee5\:4f7f\:7528 Import \:6765\:91cd\:65b0\:5bfc\:5165. ", \
"Text",
 CellChangeTimes->{{3.885086950700377*^9, 
  3.885086961931015*^9}},ExpressionUUID->"55e0606c-82a3-42eb-97ef-\
5bd1583fa502"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{713, 689},
WindowMargins->{{Automatic, 11}, {Automatic, 47}},
FrontEndVersion->"13.2 for Mac OS X ARM (64-bit) (November 18, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c40893d5-6bae-4d88-a4cd-f25247a90770"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 353, 8, 30, "Input",ExpressionUUID->"2e840917-01ed-4b3b-af4b-19143a1a9ef8"],
Cell[CellGroupData[{
Cell[936, 32, 183, 3, 160, "Title",ExpressionUUID->"1b310400-6b59-4d31-acc5-7cacb94c30a5"],
Cell[1122, 37, 251, 4, 53, "Subtitle",ExpressionUUID->"f8d7aa66-f265-4e63-8683-cfb131a39ba4"],
Cell[1376, 43, 164, 3, 31, "Author",ExpressionUUID->"1f6666b4-ea34-4f90-9980-483e5705c143"],
Cell[1543, 48, 1416, 29, 135, "Abstract",ExpressionUUID->"a9782164-594f-4fa1-8e3a-0ca1da16ee14"],
Cell[CellGroupData[{
Cell[2984, 81, 169, 3, 67, "Section",ExpressionUUID->"01a0b32f-7b71-4d27-97ae-7225847e2f7b"],
Cell[3156, 86, 547, 14, 52, "Input",ExpressionUUID->"4709cd33-465c-40ce-862d-85d689cb797f"],
Cell[CellGroupData[{
Cell[3728, 104, 250, 5, 30, "Input",ExpressionUUID->"7f8046c1-7776-49ef-b7fc-d1c367f14fba"],
Cell[3981, 111, 3896, 91, 47, "Output",ExpressionUUID->"776ca8f0-5839-47ec-8cf2-a235f4a214e2"]
}, Open  ]],
Cell[7892, 205, 353, 6, 35, "Text",ExpressionUUID->"14bdc9aa-b6fe-4a2a-bf91-1c7780be0fbe"],
Cell[CellGroupData[{
Cell[8270, 215, 332, 5, 32, "Item",ExpressionUUID->"cd62fb3f-e7ce-4e97-82f4-99ed11f36880"],
Cell[CellGroupData[{
Cell[8627, 224, 360, 9, 30, "Input",ExpressionUUID->"26fe37e9-eacc-4414-a6b0-3a37609caffe"],
Cell[8990, 235, 5970, 130, 118, "Output",ExpressionUUID->"2d3ff2d8-1196-4f3b-bedc-147423522ee5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[15009, 371, 272, 4, 32, "Item",ExpressionUUID->"a505a10b-ffd5-4ec3-b08d-0c558d4c51c7"],
Cell[CellGroupData[{
Cell[15306, 379, 383, 10, 30, "Input",ExpressionUUID->"fca2dbcf-eb6d-4f00-9342-47db85ad20ad"],
Cell[15692, 391, 7117, 151, 63, "Output",ExpressionUUID->"13c0522e-41f1-4a69-a3b6-cc089608f4b6"]
}, Open  ]]
}, Open  ]],
Cell[22836, 546, 288, 5, 35, "Text",ExpressionUUID->"abe8c1a0-8781-4c25-b5bf-e06268d71f2f"],
Cell[23127, 553, 883, 25, 73, "Input",ExpressionUUID->"42d9dc3d-f584-4853-ae84-dd53f50faa80"],
Cell[CellGroupData[{
Cell[24035, 582, 250, 5, 30, "Input",ExpressionUUID->"0de099d2-94f9-4d3a-bf83-765cecf7559a"],
Cell[24288, 589, 4167, 95, 47, "Output",ExpressionUUID->"94efdaf9-4b3c-493b-8ed8-387c6e657c16"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[28504, 690, 171, 3, 67, "Section",ExpressionUUID->"4aa0be44-9e98-4783-8c75-3e8a524a892c"],
Cell[28678, 695, 1111, 24, 85, "Text",ExpressionUUID->"584e59cd-829e-4fcf-8070-32c078526eb2"],
Cell[29792, 721, 258742, 4247, 219, 190166, 3122, "CachedBoxData", "BoxData", "Input",ExpressionUUID->"ca2772e2-e6ca-4058-980b-ed88926bd130"],
Cell[288537, 4970, 480, 13, 37, "Text",ExpressionUUID->"0fb81abe-b57c-4a28-a0c1-6d41625b5437"],
Cell[CellGroupData[{
Cell[289042, 4987, 1464, 29, 283, "Input",ExpressionUUID->"5f18ad32-1770-42f0-8a81-e3c6414eb087"],
Cell[290509, 5018, 37534, 757, 62, "Output",ExpressionUUID->"82b7f0fe-ed5f-4b16-b64c-6a22adfef7d0"]
}, Open  ]],
Cell[328058, 5778, 225, 4, 35, "Text",ExpressionUUID->"cfbe03ec-1e33-4162-9bda-59dbed6ec690"],
Cell[CellGroupData[{
Cell[328308, 5786, 1189, 28, 136, "Input",ExpressionUUID->"bc1ea546-0511-4d2e-b2da-107955fcb1cf"],
Cell[329500, 5816, 108643, 2183, 233, "Output",ExpressionUUID->"8b561d6a-346d-4cd6-9289-d54ba696e260"]
}, Open  ]],
Cell[438158, 8002, 653, 11, 81, "Text",ExpressionUUID->"a98c01a6-755d-4f58-bcf2-2a97722e1ca5"],
Cell[438814, 8015, 420, 8, 58, "Text",ExpressionUUID->"61446db3-9e5e-4503-b528-aa43e1a88eef"],
Cell[CellGroupData[{
Cell[439259, 8027, 646, 17, 73, "Input",ExpressionUUID->"40df066b-cca1-47a3-89ad-750fc071b6b8"],
Cell[439908, 8046, 4000, 93, 47, "Output",ExpressionUUID->"e4e01f6f-3970-4148-bb5f-01abd7b71f75"],
Cell[443911, 8141, 404, 10, 34, "Output",ExpressionUUID->"d6e6edd3-0d6e-4a8c-9757-e03e0f2934d3"]
}, Open  ]],
Cell[444330, 8154, 328, 5, 35, "Text",ExpressionUUID->"d7673c15-5b7b-4ff5-8368-e15f4b32211d"],
Cell[444661, 8161, 380, 6, 58, "Text",ExpressionUUID->"7dce6f3d-744a-4143-aad9-f3652b18dd07"],
Cell[CellGroupData[{
Cell[445066, 8171, 505, 10, 52, "Input",ExpressionUUID->"f560e97d-de32-450b-bfe5-4db018b98ec0"],
Cell[445574, 8183, 30315, 637, 497, "Output",ExpressionUUID->"82f491a8-6895-44cb-a7a4-4bb0c06dbd50"]
}, Open  ]],
Cell[475904, 8823, 167, 3, 35, "Text",ExpressionUUID->"f8d92db6-0baf-4f5b-964c-f4334a56fb8d"],
Cell[476074, 8828, 240, 4, 32, "Item",ExpressionUUID->"cfb333f9-e78b-4534-8d1d-47395fdcc524"],
Cell[476317, 8834, 330, 5, 32, "Item",ExpressionUUID->"10a3e251-7596-4733-9e87-d3ed65876412"],
Cell[476650, 8841, 218, 4, 32, "Item",ExpressionUUID->"1cb1a99a-f61c-4610-a70f-9dfd4693f7ff"],
Cell[476871, 8847, 268, 5, 35, "Text",ExpressionUUID->"819fdaa9-d426-4a8f-bdf0-47cbc7639b79"],
Cell[CellGroupData[{
Cell[477164, 8856, 235, 4, 30, "Input",ExpressionUUID->"459786b7-b806-4a1b-8564-43290c4b60f8"],
Cell[477402, 8862, 13551, 283, 213, "Output",ExpressionUUID->"202e6104-1cea-4bb4-a280-f779d9245595"]
}, Open  ]],
Cell[CellGroupData[{
Cell[490990, 9150, 226, 4, 30, "Input",ExpressionUUID->"3d1e99ef-429f-4c81-a388-549a052e46fa"],
Cell[491219, 9156, 108546, 2181, 233, "Output",ExpressionUUID->"13f49caf-0b03-4564-9455-6b890ab1fb6c"]
}, Open  ]],
Cell[599780, 11340, 273, 4, 35, "Text",ExpressionUUID->"96b17e9e-92cd-4dda-b7c9-d87b30dc2761"],
Cell[CellGroupData[{
Cell[600078, 11348, 570, 14, 52, "Input",ExpressionUUID->"98d95101-a8d4-4c49-95f5-6092cb612623"],
Cell[600651, 11364, 36100, 721, 62, "Output",ExpressionUUID->"89c082b3-aa13-482a-bbae-9844d3188bf9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[636800, 12091, 187, 3, 67, "Section",ExpressionUUID->"c502f3ef-22e6-41eb-a9de-7193cdb6ac41"],
Cell[636990, 12096, 203, 3, 35, "Text",ExpressionUUID->"f58d5ee9-176c-413c-9434-e326f63a899f"],
Cell[CellGroupData[{
Cell[637218, 12103, 246, 5, 30, "Input",ExpressionUUID->"13ec658c-4d5c-433d-91b2-bf97986a29fa"],
Cell[637467, 12110, 4017, 92, 47, "Output",ExpressionUUID->"76450ff3-afad-4cc7-b619-c42fb6a70dae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[641521, 12207, 289, 7, 30, "Input",ExpressionUUID->"1824546c-4012-494f-b8ad-19a5c3f080fe"],
Cell[641813, 12216, 724, 19, 56, "Output",ExpressionUUID->"9b763b76-f710-4612-b2ec-5639312a2670"]
}, Open  ]],
Cell[642552, 12238, 197, 3, 35, "Text",ExpressionUUID->"c7e80472-e01a-4f96-97bf-2f4d50e9416c"],
Cell[642752, 12243, 226, 4, 35, "Text",ExpressionUUID->"12810d48-ee58-48be-8290-2cdc2b0bbaee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[643015, 12252, 181, 3, 67, "Section",ExpressionUUID->"d93bed02-5637-444d-ae3d-8c05db92bb3f"],
Cell[643199, 12257, 327, 5, 35, "Text",ExpressionUUID->"7ef4d922-c6c7-4e69-959f-4bf088ae31bd"],
Cell[CellGroupData[{
Cell[643551, 12266, 363, 8, 30, "Input",ExpressionUUID->"ec97dedd-d377-439e-a26f-8347a25d2254"],
Cell[643917, 12276, 220, 3, 34, "Output",ExpressionUUID->"59cf83ff-ab0a-4d86-ae04-d48b0b9bd89d"]
}, Open  ]],
Cell[644152, 12282, 208, 4, 35, "Text",ExpressionUUID->"55e0606c-82a3-42eb-97ef-5bd1583fa502"]
}, Open  ]]
}, Open  ]]
}
]
*)

